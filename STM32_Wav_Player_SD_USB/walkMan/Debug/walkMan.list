
walkMan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08012680  08012680  00022680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c14  08012c14  000300d4  2**0
                  CONTENTS
  4 .ARM          00000008  08012c14  08012c14  00022c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c1c  08012c1c  000300d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c1c  08012c1c  00022c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c20  08012c20  00022c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08012c24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300d4  2**0
                  CONTENTS
 10 .bss          000149d4  200000d8  200000d8  000300d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  20014aac  20014aac  000300d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032d1b  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000068f0  00000000  00000000  00062e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  00069710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001728  00000000  00000000  0006b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288ef  00000000  00000000  0006c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027fc1  00000000  00000000  0009507f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf04e  00000000  00000000  000bd040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018c08e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b20  00000000  00000000  0018c0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012668 	.word	0x08012668

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	08012668 	.word	0x08012668

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	603a      	str	r2, [r7, #0]
 8000582:	80fb      	strh	r3, [r7, #6]
 8000584:	460b      	mov	r3, r1
 8000586:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 800058c:	2200      	movs	r2, #0
 800058e:	6839      	ldr	r1, [r7, #0]
 8000590:	481c      	ldr	r0, [pc, #112]	; (8000604 <AUDIO_OUT_Init+0x8c>)
 8000592:	f000 f8f9 	bl	8000788 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <AUDIO_OUT_Init+0x8c>)
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <AUDIO_OUT_Init+0x90>)
 800059a:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 800059c:	4819      	ldr	r0, [pc, #100]	; (8000604 <AUDIO_OUT_Init+0x8c>)
 800059e:	f006 fe49 	bl	8007234 <HAL_I2S_GetState>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d103      	bne.n	80005b0 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80005a8:	2100      	movs	r1, #0
 80005aa:	4816      	ldr	r0, [pc, #88]	; (8000604 <AUDIO_OUT_Init+0x8c>)
 80005ac:	f000 f946 	bl	800083c <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80005b0:	6838      	ldr	r0, [r7, #0]
 80005b2:	f000 fa0b 	bl	80009cc <I2S3_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d10e      	bne.n	80005e4 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <AUDIO_OUT_Init+0x94>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	2094      	movs	r0, #148	; 0x94
 80005cc:	4798      	blx	r3
 80005ce:	4603      	mov	r3, r0
 80005d0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80005d4:	2be0      	cmp	r3, #224	; 0xe0
 80005d6:	d103      	bne.n	80005e0 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <AUDIO_OUT_Init+0x98>)
 80005da:	4a0c      	ldr	r2, [pc, #48]	; (800060c <AUDIO_OUT_Init+0x94>)
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	e001      	b.n	80005e4 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d107      	bne.n	80005fa <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <AUDIO_OUT_Init+0x98>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	681c      	ldr	r4, [r3, #0]
 80005f0:	797a      	ldrb	r2, [r7, #5]
 80005f2:	88f9      	ldrh	r1, [r7, #6]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	2094      	movs	r0, #148	; 0x94
 80005f8:	47a0      	blx	r4
  }
  
  return ret;
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	bd90      	pop	{r4, r7, pc}
 8000604:	20010670 	.word	0x20010670
 8000608:	40003c00 	.word	0x40003c00
 800060c:	20000008 	.word	0x20000008
 8000610:	200000f4 	.word	0x200000f4

08000614 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <AUDIO_OUT_Play+0x4c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	b292      	uxth	r2, r2
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	2094      	movs	r0, #148	; 0x94
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	e00f      	b.n	8000658 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800063e:	d203      	bcs.n	8000648 <AUDIO_OUT_Play+0x34>
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	085b      	lsrs	r3, r3, #1
 8000644:	b29b      	uxth	r3, r3
 8000646:	e001      	b.n	800064c <AUDIO_OUT_Play+0x38>
 8000648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064c:	461a      	mov	r2, r3
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <AUDIO_OUT_Play+0x50>)
 8000652:	f006 fa6d 	bl	8006b30 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000656:	2300      	movs	r3, #0
  }
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000f4 	.word	0x200000f4
 8000664:	20010670 	.word	0x20010670

08000668 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <AUDIO_OUT_Pause+0x24>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	2094      	movs	r0, #148	; 0x94
 8000674:	4798      	blx	r3
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	e003      	b.n	8000688 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <AUDIO_OUT_Pause+0x28>)
 8000682:	f006 fafd 	bl	8006c80 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000686:	2300      	movs	r3, #0
  }
}
 8000688:	4618      	mov	r0, r3
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000f4 	.word	0x200000f4
 8000690:	20010670 	.word	0x20010670

08000694 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <AUDIO_OUT_Resume+0x24>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	2094      	movs	r0, #148	; 0x94
 80006a0:	4798      	blx	r3
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e003      	b.n	80006b4 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80006ac:	4803      	ldr	r0, [pc, #12]	; (80006bc <AUDIO_OUT_Resume+0x28>)
 80006ae:	f006 fb49 	bl	8006d44 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006b2:	2300      	movs	r3, #0
  }
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000f4 	.word	0x200000f4
 80006bc:	20010670 	.word	0x20010670

080006c0 <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 80006c8:	480e      	ldr	r0, [pc, #56]	; (8000704 <AUDIO_OUT_Stop+0x44>)
 80006ca:	f006 fbcf 	bl	8006e6c <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <AUDIO_OUT_Stop+0x48>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	2094      	movs	r0, #148	; 0x94
 80006d8:	4798      	blx	r3
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e00b      	b.n	80006fc <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d107      	bne.n	80006fa <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f002 fb34 	bl	8002d58 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2110      	movs	r1, #16
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <AUDIO_OUT_Stop+0x4c>)
 80006f6:	f003 fb3b 	bl	8003d70 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006fa:	2300      	movs	r3, #0
  }
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20010670 	.word	0x20010670
 8000708:	200000f4 	.word	0x200000f4
 800070c:	40020c00 	.word	0x40020c00

08000710 <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <AUDIO_OUT_SetVolume+0x2c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6a1b      	ldr	r3, [r3, #32]
 8000720:	79fa      	ldrb	r2, [r7, #7]
 8000722:	4611      	mov	r1, r2
 8000724:	2094      	movs	r0, #148	; 0x94
 8000726:	4798      	blx	r3
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000732:	2300      	movs	r3, #0
  }
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000f4 	.word	0x200000f4

08000740 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <HAL_I2S_TxCpltCallback+0x20>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d101      	bne.n	8000756 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 8000752:	f002 fa3d 	bl	8002bd0 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40003c00 	.word	0x40003c00

08000764 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d101      	bne.n	800077a <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 8000776:	f002 fa3f 	bl	8002bf8 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40003c00 	.word	0x40003c00

08000788 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000794:	2300      	movs	r3, #0
 8000796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800079a:	23ff      	movs	r3, #255	; 0xff
 800079c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007a6:	e010      	b.n	80007ca <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80007a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007ac:	4a20      	ldr	r2, [pc, #128]	; (8000830 <AUDIO_OUT_ClockConfig+0xa8>)
 80007ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d103      	bne.n	80007c0 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80007b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 80007c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007c4:	3301      	adds	r3, #1
 80007c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	d9ea      	bls.n	80007a8 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4618      	mov	r0, r3
 80007d8:	f007 fe4c 	bl	8008474 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 80007dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007e0:	f003 0307 	and.w	r3, r3, #7
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d113      	bne.n	8000810 <AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007e8:	2301      	movs	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80007ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007f0:	4a10      	ldr	r2, [pc, #64]	; (8000834 <AUDIO_OUT_ClockConfig+0xac>)
 80007f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f6:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80007f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <AUDIO_OUT_ClockConfig+0xb0>)
 80007fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000802:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4618      	mov	r0, r3
 800080a:	f007 fd51 	bl	80082b0 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800080e:	e00b      	b.n	8000828 <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000810:	2301      	movs	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000814:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000818:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800081a:	2303      	movs	r3, #3
 800081c:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4618      	mov	r0, r3
 8000824:	f007 fd44 	bl	80082b0 <HAL_RCCEx_PeriphCLKConfig>
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	0801270c 	.word	0x0801270c
 8000834:	0801272c 	.word	0x0801272c
 8000838:	0801274c 	.word	0x0801274c

0800083c <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b56      	ldr	r3, [pc, #344]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a55      	ldr	r2, [pc, #340]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 8000850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b4f      	ldr	r3, [pc, #316]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a4e      	ldr	r2, [pc, #312]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b48      	ldr	r3, [pc, #288]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a47      	ldr	r2, [pc, #284]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b45      	ldr	r3, [pc, #276]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 800089a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80008a8:	2302      	movs	r3, #2
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80008ac:	2306      	movs	r3, #6
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	483c      	ldr	r0, [pc, #240]	; (80009a8 <AUDIO_OUT_MspInit+0x16c>)
 80008b8:	f002 ffc2 	bl	8003840 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80008bc:	2310      	movs	r3, #16
 80008be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4839      	ldr	r0, [pc, #228]	; (80009ac <AUDIO_OUT_MspInit+0x170>)
 80008c8:	f002 ffba 	bl	8003840 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 80008d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d4:	4a33      	ldr	r2, [pc, #204]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6313      	str	r3, [r2, #48]	; 0x30
 80008dc:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	482d      	ldr	r0, [pc, #180]	; (80009a8 <AUDIO_OUT_MspInit+0x16c>)
 80008f4:	f002 ffa4 	bl	8003840 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 8000902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000906:	6313      	str	r3, [r2, #48]	; 0x30
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <AUDIO_OUT_MspInit+0x168>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a25      	ldr	r2, [pc, #148]	; (80009b0 <AUDIO_OUT_MspInit+0x174>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d136      	bne.n	800098c <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 8000926:	2240      	movs	r2, #64	; 0x40
 8000928:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 8000932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000936:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 800093a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800093e:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 8000942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000946:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 8000950:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000954:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 8000958:	2204      	movs	r2, #4
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 800095e:	2203      	movs	r2, #3
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 8000964:	2200      	movs	r2, #0
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 800096a:	2200      	movs	r2, #0
 800096c:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 8000970:	4a11      	ldr	r2, [pc, #68]	; (80009b8 <AUDIO_OUT_MspInit+0x17c>)
 8000972:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 8000978:	639a      	str	r2, [r3, #56]	; 0x38
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 8000982:	f002 fbcd 	bl	8003120 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 8000986:	480b      	ldr	r0, [pc, #44]	; (80009b4 <AUDIO_OUT_MspInit+0x178>)
 8000988:	f002 fb1c 	bl	8002fc4 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	210e      	movs	r1, #14
 8000990:	202f      	movs	r0, #47	; 0x2f
 8000992:	f002 fae0 	bl	8002f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);
 8000996:	202f      	movs	r0, #47	; 0x2f
 8000998:	f002 faf9 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 800099c:	bf00      	nop
 800099e:	3730      	adds	r7, #48	; 0x30
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40003c00 	.word	0x40003c00
 80009b4:	200000f8 	.word	0x200000f8
 80009b8:	400260b8 	.word	0x400260b8

080009bc <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <I2S3_Init+0x68>)
 80009d6:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <I2S3_Init+0x6c>)
 80009d8:	601a      	str	r2, [r3, #0]

  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <I2S3_Init+0x68>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	69da      	ldr	r2, [r3, #28]
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <I2S3_Init+0x68>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009e8:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <I2S3_Init+0x68>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <I2S3_Init+0x68>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <I2S3_Init+0x68>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <I2S3_Init+0x68>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <I2S3_Init+0x68>)
 8000a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a08:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <I2S3_Init+0x68>)
 8000a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a10:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <I2S3_Init+0x68>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <I2S3_Init+0x68>)
 8000a1a:	f005 ff49 	bl	80068b0 <HAL_I2S_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e000      	b.n	8000a2a <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000a28:	2300      	movs	r3, #0
  }
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20010670 	.word	0x20010670
 8000a38:	40003c00 	.word	0x40003c00

08000a3c <HAL_I2S_ErrorCallback>:
  * @param  hi2s: I2S handle
  */


void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  if(hi2s->Instance == I2S3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_I2S_ErrorCallback+0x20>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000a4e:	f7ff ffb5 	bl	80009bc <AUDIO_OUT_Error_CallBack>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40003c00 	.word	0x40003c00

08000a60 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000a64:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <I2Cx_Init+0x58>)
 8000a66:	f005 fbb9 	bl	80061dc <HAL_I2C_GetState>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d121      	bne.n	8000ab4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <I2Cx_Init+0x58>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <I2Cx_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <I2Cx_Init+0x58>)
 8000a78:	2243      	movs	r2, #67	; 0x43
 8000a7a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <I2Cx_Init+0x58>)
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <I2Cx_Init+0x60>)
 8000a80:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <I2Cx_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <I2Cx_Init+0x58>)
 8000a8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a8e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <I2Cx_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <I2Cx_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <I2Cx_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <I2Cx_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000aa8:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <I2Cx_Init+0x58>)
 8000aaa:	f000 f86b 	bl	8000b84 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <I2Cx_Init+0x58>)
 8000ab0:	f004 ff00 	bl	80058b4 <HAL_I2C_Init>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000158 	.word	0x20000158
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	000186a0 	.word	0x000186a0

08000ac4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af04      	add	r7, sp, #16
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	717b      	strb	r3, [r7, #5]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000ada:	797b      	ldrb	r3, [r7, #5]
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <I2Cx_WriteData+0x48>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	88f9      	ldrh	r1, [r7, #6]
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <I2Cx_WriteData+0x4c>)
 8000af2:	f005 f853 	bl	8005b9c <HAL_I2C_Mem_Write>
 8000af6:	4603      	mov	r3, r0
 8000af8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b00:	f000 f834 	bl	8000b6c <I2Cx_Error>
  }
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000158 	.word	0x20000158

08000b14 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af04      	add	r7, sp, #16
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	80fb      	strh	r3, [r7, #6]
 8000b20:	4613      	mov	r3, r2
 8000b22:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000b2c:	797b      	ldrb	r3, [r7, #5]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <I2Cx_ReadData+0x50>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	88f9      	ldrh	r1, [r7, #6]
 8000b36:	9302      	str	r3, [sp, #8]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	f107 030e 	add.w	r3, r7, #14
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	4808      	ldr	r0, [pc, #32]	; (8000b68 <I2Cx_ReadData+0x54>)
 8000b46:	f005 f923 	bl	8005d90 <HAL_I2C_Mem_Read>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b54:	f000 f80a 	bl	8000b6c <I2Cx_Error>
  }
  return value;
 8000b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000158 	.word	0x20000158

08000b6c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <I2Cx_Error+0x14>)
 8000b72:	f004 ffe3 	bl	8005b3c <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000b76:	f7ff ff73 	bl	8000a60 <I2Cx_Init>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000158 	.word	0x20000158

08000b84 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <I2Cx_MspInit+0xa4>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <I2Cx_MspInit+0xa4>)
 8000b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <I2Cx_MspInit+0xa4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <I2Cx_MspInit+0xa4>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <I2Cx_MspInit+0xa4>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <I2Cx_MspInit+0xa4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000bc4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000bca:	2312      	movs	r3, #18
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <I2Cx_MspInit+0xa8>)
 8000be2:	f002 fe2d 	bl	8003840 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <I2Cx_MspInit+0xa4>)
 8000be8:	6a1b      	ldr	r3, [r3, #32]
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <I2Cx_MspInit+0xa4>)
 8000bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <I2Cx_MspInit+0xa4>)
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <I2Cx_MspInit+0xa4>)
 8000bf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000bfc:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	210f      	movs	r1, #15
 8000c02:	201f      	movs	r0, #31
 8000c04:	f002 f9a7 	bl	8002f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000c08:	201f      	movs	r0, #31
 8000c0a:	f002 f9c0 	bl	8002f8e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	210f      	movs	r1, #15
 8000c12:	2020      	movs	r0, #32
 8000c14:	f002 f99f 	bl	8002f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000c18:	2020      	movs	r0, #32
 8000c1a:	f002 f9b8 	bl	8002f8e <HAL_NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020400 	.word	0x40020400

08000c30 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <AUDIO_IO_Init+0x68>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <AUDIO_IO_Init+0x68>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <AUDIO_IO_Init+0x68>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000c52:	2310      	movs	r3, #16
 8000c54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <AUDIO_IO_Init+0x6c>)
 8000c68:	f002 fdea 	bl	8003840 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000c6c:	f7ff fef8 	bl	8000a60 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000c70:	2200      	movs	r2, #0
 8000c72:	2110      	movs	r1, #16
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <AUDIO_IO_Init+0x6c>)
 8000c76:	f003 f87b 	bl	8003d70 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c7a:	2005      	movs	r0, #5
 8000c7c:	f002 f86c 	bl	8002d58 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000c80:	2201      	movs	r2, #1
 8000c82:	2110      	movs	r1, #16
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <AUDIO_IO_Init+0x6c>)
 8000c86:	f003 f873 	bl	8003d70 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c8a:	2005      	movs	r0, #5
 8000c8c:	f002 f864 	bl	8002d58 <HAL_Delay>
}
 8000c90:	bf00      	nop
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020c00 	.word	0x40020c00

08000ca0 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	71bb      	strb	r3, [r7, #6]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	797a      	ldrb	r2, [r7, #5]
 8000cc6:	79b9      	ldrb	r1, [r7, #6]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fefb 	bl	8000ac4 <I2Cx_WriteData>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	460a      	mov	r2, r1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	79ba      	ldrb	r2, [r7, #6]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff10 	bl	8000b14 <I2Cx_ReadData>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0de      	sub	sp, #376	; 0x178
 8000d04:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	4942      	ldr	r1, [pc, #264]	; (8000e18 <AUDIO_StorageParse+0x118>)
 8000d10:	4618      	mov	r0, r3
 8000d12:	f010 faa8 	bl	8011266 <f_opendir>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
  FileList.ptr = 0;
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <AUDIO_StorageParse+0x11c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000d24:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d165      	bne.n	8000df8 <AUDIO_StorageParse+0xf8>
  {
    while(Appli_state == APPLICATION_READY)
 8000d2c:	e060      	b.n	8000df0 <AUDIO_StorageParse+0xf0>
    {
      res = f_readdir(&dir, &fno);
 8000d2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d32:	463b      	mov	r3, r7
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f010 fb64 	bl	8011404 <f_readdir>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
      if(res != FR_OK || fno.fname[0] == 0)
 8000d42:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d156      	bne.n	8000df8 <AUDIO_StorageParse+0xf8>
 8000d4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d4e:	7e9b      	ldrb	r3, [r3, #26]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d051      	beq.n	8000df8 <AUDIO_StorageParse+0xf8>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d58:	7e9b      	ldrb	r3, [r3, #26]
 8000d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8000d5c:	d100      	bne.n	8000d60 <AUDIO_StorageParse+0x60>
      {
        continue;
 8000d5e:	e047      	b.n	8000df0 <AUDIO_StorageParse+0xf0>
      }

      fn = fno.fname;
 8000d60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d64:	331a      	adds	r3, #26
 8000d66:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <AUDIO_StorageParse+0x11c>)
 8000d6c:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d70:	2b17      	cmp	r3, #23
 8000d72:	d83d      	bhi.n	8000df0 <AUDIO_StorageParse+0xf0>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000d74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d78:	7b1b      	ldrb	r3, [r3, #12]
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d136      	bne.n	8000df0 <AUDIO_StorageParse+0xf0>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000d82:	4927      	ldr	r1, [pc, #156]	; (8000e20 <AUDIO_StorageParse+0x120>)
 8000d84:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8000d88:	f011 f911 	bl	8011fae <strstr>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d107      	bne.n	8000da2 <AUDIO_StorageParse+0xa2>
 8000d92:	4924      	ldr	r1, [pc, #144]	; (8000e24 <AUDIO_StorageParse+0x124>)
 8000d94:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8000d98:	f011 f909 	bl	8011fae <strstr>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d026      	beq.n	8000df0 <AUDIO_StorageParse+0xf0>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <AUDIO_StorageParse+0x11c>)
 8000da4:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000da8:	461a      	mov	r2, r3
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4413      	add	r3, r2
 8000db4:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <AUDIO_StorageParse+0x11c>)
 8000db6:	4413      	add	r3, r2
 8000db8:	3301      	adds	r3, #1
 8000dba:	2228      	movs	r2, #40	; 0x28
 8000dbc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f011 f8e1 	bl	8011f88 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <AUDIO_StorageParse+0x11c>)
 8000dc8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4913      	ldr	r1, [pc, #76]	; (8000e1c <AUDIO_StorageParse+0x11c>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4413      	add	r3, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <AUDIO_StorageParse+0x11c>)
 8000de2:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000de6:	3301      	adds	r3, #1
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <AUDIO_StorageParse+0x11c>)
 8000dec:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <AUDIO_StorageParse+0x128>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d09a      	beq.n	8000d2e <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <AUDIO_StorageParse+0x11c>)
 8000dfa:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <AUDIO_StorageParse+0x12c>)
 8000e00:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000e02:	463b      	mov	r3, r7
 8000e04:	4618      	mov	r0, r3
 8000e06:	f010 fad7 	bl	80113b8 <f_closedir>
  return res;
 8000e0a:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20012320 	.word	0x20012320
 8000e1c:	20010ee0 	.word	0x20010ee0
 8000e20:	08012680 	.word	0x08012680
 8000e24:	08012684 	.word	0x08012684
 8000e28:	20010664 	.word	0x20010664
 8000e2c:	200001ac 	.word	0x200001ac

08000e30 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000e34:	f7ff ff64 	bl	8000d00 <AUDIO_StorageParse>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <AUDIO_GetWavObjectNumber+0x14>
 8000e3e:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <AUDIO_GetWavObjectNumber+0x18>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	e7ff      	b.n	8000e44 <AUDIO_GetWavObjectNumber+0x14>
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200001ac 	.word	0x200001ac

08000e4c <Mount_USB>:

void Mount_USB (void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	4905      	ldr	r1, [pc, #20]	; (8000e68 <Mount_USB+0x1c>)
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <Mount_USB+0x20>)
 8000e56:	f00f f8f9 	bl	801004c <f_mount>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <Mount_USB+0x24>)
 8000e60:	701a      	strb	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20012320 	.word	0x20012320
 8000e6c:	20013380 	.word	0x20013380
 8000e70:	20010a98 	.word	0x20010a98

08000e74 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08e      	sub	sp, #56	; 0x38
 8000e78:	af0a      	add	r7, sp, #40	; 0x28
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	4611      	mov	r1, r2
 8000e80:	461a      	mov	r2, r3
 8000e82:	4603      	mov	r3, r0
 8000e84:	817b      	strh	r3, [r7, #10]
 8000e86:	460b      	mov	r3, r1
 8000e88:	813b      	strh	r3, [r7, #8]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <LiquidCrystal+0x90>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d019      	beq.n	8000eca <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000e96:	8939      	ldrh	r1, [r7, #8]
 8000e98:	897a      	ldrh	r2, [r7, #10]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9308      	str	r3, [sp, #32]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	9307      	str	r3, [sp, #28]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9306      	str	r3, [sp, #24]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	9305      	str	r3, [sp, #20]
 8000eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eac:	9304      	str	r3, [sp, #16]
 8000eae:	8c3b      	ldrh	r3, [r7, #32]
 8000eb0:	9303      	str	r3, [sp, #12]
 8000eb2:	8bbb      	ldrh	r3, [r7, #28]
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	8b3b      	ldrh	r3, [r7, #24]
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	68f9      	ldr	r1, [r7, #12]
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f000 f820 	bl	8000f08 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000ec8:	e018      	b.n	8000efc <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000eca:	8939      	ldrh	r1, [r7, #8]
 8000ecc:	897a      	ldrh	r2, [r7, #10]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	9308      	str	r3, [sp, #32]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	9307      	str	r3, [sp, #28]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9306      	str	r3, [sp, #24]
 8000eda:	2300      	movs	r3, #0
 8000edc:	9305      	str	r3, [sp, #20]
 8000ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ee0:	9304      	str	r3, [sp, #16]
 8000ee2:	8c3b      	ldrh	r3, [r7, #32]
 8000ee4:	9303      	str	r3, [sp, #12]
 8000ee6:	8bbb      	ldrh	r3, [r7, #28]
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	8b3b      	ldrh	r3, [r7, #24]
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	68f9      	ldr	r1, [r7, #12]
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f806 	bl	8000f08 <init>
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000004 	.word	0x20000004

08000f08 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	4611      	mov	r1, r2
 8000f12:	461a      	mov	r2, r3
 8000f14:	4603      	mov	r3, r0
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	81bb      	strh	r3, [r7, #12]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000f20:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <init+0x84>)
 8000f22:	89bb      	ldrh	r3, [r7, #12]
 8000f24:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000f26:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <init+0x88>)
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <init+0x8c>)
 8000f2e:	8b3b      	ldrh	r3, [r7, #24]
 8000f30:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000f32:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <init+0x90>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000f38:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <init+0x94>)
 8000f3a:	8bbb      	ldrh	r3, [r7, #28]
 8000f3c:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000f3e:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <init+0x94>)
 8000f40:	8c3b      	ldrh	r3, [r7, #32]
 8000f42:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000f44:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <init+0x94>)
 8000f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f48:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000f4a:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <init+0x94>)
 8000f4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f4e:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <init+0x94>)
 8000f52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000f54:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <init+0x94>)
 8000f58:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f5a:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000f5c:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <init+0x94>)
 8000f5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f60:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <init+0x94>)
 8000f64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000f66:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e002      	b.n	8000f7c <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <init+0x98>)
 8000f78:	2210      	movs	r2, #16
 8000f7a:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	2010      	movs	r0, #16
 8000f80:	f000 f810 	bl	8000fa4 <begin>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20010be4 	.word	0x20010be4
 8000f90:	20010bc4 	.word	0x20010bc4
 8000f94:	20010be2 	.word	0x20010be2
 8000f98:	20010bc8 	.word	0x20010bc8
 8000f9c:	20010bd0 	.word	0x20010bd0
 8000fa0:	20010be1 	.word	0x20010be1

08000fa4 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d906      	bls.n	8000fc8 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000fba:	4b77      	ldr	r3, [pc, #476]	; (8001198 <begin+0x1f4>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	f043 0308 	orr.w	r3, r3, #8
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b74      	ldr	r3, [pc, #464]	; (8001198 <begin+0x1f4>)
 8000fc6:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000fc8:	4a74      	ldr	r2, [pc, #464]	; (800119c <begin+0x1f8>)
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000fce:	79fa      	ldrb	r2, [r7, #7]
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	3340      	adds	r3, #64	; 0x40
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f998 	bl	800130c <setRowOffsets>

  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000fdc:	4b70      	ldr	r3, [pc, #448]	; (80011a0 <begin+0x1fc>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d009      	beq.n	8000ff8 <begin+0x54>
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d106      	bne.n	8000ff8 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000fea:	4b6b      	ldr	r3, [pc, #428]	; (8001198 <begin+0x1f4>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b68      	ldr	r3, [pc, #416]	; (8001198 <begin+0x1f4>)
 8000ff6:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000ff8:	f000 f8e4 	bl	80011c4 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8001004:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <begin+0x200>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01b      	beq.n	8001044 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 800100c:	4b66      	ldr	r3, [pc, #408]	; (80011a8 <begin+0x204>)
 800100e:	881a      	ldrh	r2, [r3, #0]
 8001010:	4b66      	ldr	r3, [pc, #408]	; (80011ac <begin+0x208>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	4313      	orrs	r3, r2
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b65      	ldr	r3, [pc, #404]	; (80011b0 <begin+0x20c>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4313      	orrs	r3, r2
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b64      	ldr	r3, [pc, #400]	; (80011b4 <begin+0x210>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	4313      	orrs	r3, r2
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b62      	ldr	r3, [pc, #392]	; (80011b4 <begin+0x210>)
 800102a:	885b      	ldrh	r3, [r3, #2]
 800102c:	4313      	orrs	r3, r2
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <begin+0x210>)
 8001032:	889b      	ldrh	r3, [r3, #4]
 8001034:	4313      	orrs	r3, r2
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <begin+0x210>)
 800103a:	88db      	ldrh	r3, [r3, #6]
 800103c:	4313      	orrs	r3, r2
 800103e:	b29b      	uxth	r3, r3
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e02a      	b.n	800109a <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001044:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <begin+0x204>)
 8001046:	881a      	ldrh	r2, [r3, #0]
 8001048:	4b58      	ldr	r3, [pc, #352]	; (80011ac <begin+0x208>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	4313      	orrs	r3, r2
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <begin+0x20c>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	4313      	orrs	r3, r2
 8001056:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001058:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <begin+0x210>)
 800105a:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800105c:	4313      	orrs	r3, r2
 800105e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <begin+0x210>)
 8001062:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001064:	4313      	orrs	r3, r2
 8001066:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001068:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <begin+0x210>)
 800106a:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800106c:	4313      	orrs	r3, r2
 800106e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001070:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <begin+0x210>)
 8001072:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001074:	4313      	orrs	r3, r2
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b4e      	ldr	r3, [pc, #312]	; (80011b4 <begin+0x210>)
 800107a:	891b      	ldrh	r3, [r3, #8]
 800107c:	4313      	orrs	r3, r2
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <begin+0x210>)
 8001082:	895b      	ldrh	r3, [r3, #10]
 8001084:	4313      	orrs	r3, r2
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <begin+0x210>)
 800108a:	899b      	ldrh	r3, [r3, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <begin+0x210>)
 8001092:	89db      	ldrh	r3, [r3, #14]
 8001094:	4313      	orrs	r3, r2
 8001096:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001098:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <begin+0x214>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f107 020c 	add.w	r2, r7, #12
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fbcb 	bl	8003840 <HAL_GPIO_Init>

  HAL_Delay(50); 
 80010aa:	2032      	movs	r0, #50	; 0x32
 80010ac:	f001 fe54 	bl	8002d58 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80010b0:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <begin+0x214>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a3c      	ldr	r2, [pc, #240]	; (80011a8 <begin+0x204>)
 80010b6:	8811      	ldrh	r1, [r2, #0]
 80010b8:	2200      	movs	r2, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 fe58 	bl	8003d70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80010c0:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <begin+0x214>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a3a      	ldr	r2, [pc, #232]	; (80011b0 <begin+0x20c>)
 80010c6:	8811      	ldrh	r1, [r2, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fe50 	bl	8003d70 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80010d0:	4b36      	ldr	r3, [pc, #216]	; (80011ac <begin+0x208>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	2bff      	cmp	r3, #255	; 0xff
 80010d6:	d007      	beq.n	80010e8 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80010d8:	4b37      	ldr	r3, [pc, #220]	; (80011b8 <begin+0x214>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a33      	ldr	r2, [pc, #204]	; (80011ac <begin+0x208>)
 80010de:	8811      	ldrh	r1, [r2, #0]
 80010e0:	2200      	movs	r2, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fe44 	bl	8003d70 <HAL_GPIO_WritePin>
  }
  
  if (! (_displayfunction & LCD_8BITMODE)) {
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <begin+0x1f4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d115      	bne.n	8001120 <begin+0x17c>

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 fa2b 	bl	8001550 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80010fa:	2005      	movs	r0, #5
 80010fc:	f001 fe2c 	bl	8002d58 <HAL_Delay>

    // second try
    write4bits(0x03);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 fa25 	bl	8001550 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001106:	2005      	movs	r0, #5
 8001108:	f001 fe26 	bl	8002d58 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 800110c:	2003      	movs	r0, #3
 800110e:	f000 fa1f 	bl	8001550 <write4bits>
    HAL_Delay(1);
 8001112:	2001      	movs	r0, #1
 8001114:	f001 fe20 	bl	8002d58 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8001118:	2002      	movs	r0, #2
 800111a:	f000 fa19 	bl	8001550 <write4bits>
 800111e:	e01d      	b.n	800115c <begin+0x1b8>
  } else {

    command(LCD_FUNCTIONSET | _displayfunction);
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <begin+0x1f4>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	b2db      	uxtb	r3, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f98b 	bl	8001446 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8001130:	2005      	movs	r0, #5
 8001132:	f001 fe11 	bl	8002d58 <HAL_Delay>

    command(LCD_FUNCTIONSET | _displayfunction);
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <begin+0x1f4>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f043 0320 	orr.w	r3, r3, #32
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f980 	bl	8001446 <command>
    HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f001 fe06 	bl	8002d58 <HAL_Delay>

    command(LCD_FUNCTIONSET | _displayfunction);
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <begin+0x1f4>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	f043 0320 	orr.w	r3, r3, #32
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f975 	bl	8001446 <command>
  }

  command(LCD_FUNCTIONSET | _displayfunction);  
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <begin+0x1f4>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	f043 0320 	orr.w	r3, r3, #32
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f96d 	bl	8001446 <command>

  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <begin+0x218>)
 800116e:	2204      	movs	r2, #4
 8001170:	701a      	strb	r2, [r3, #0]
  display();
 8001172:	f000 f927 	bl	80013c4 <display>

  clear();
 8001176:	f000 f8e9 	bl	800134c <clear>

  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <begin+0x21c>)
 800117c:	2202      	movs	r2, #2
 800117e:	701a      	strb	r2, [r3, #0]
  command(LCD_ENTRYMODESET | _displaymode);
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <begin+0x21c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f95b 	bl	8001446 <command>

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20010be1 	.word	0x20010be1
 800119c:	20010bcd 	.word	0x20010bcd
 80011a0:	200001ae 	.word	0x200001ae
 80011a4:	20000004 	.word	0x20000004
 80011a8:	20010be4 	.word	0x20010be4
 80011ac:	20010bc4 	.word	0x20010bc4
 80011b0:	20010be2 	.word	0x20010be2
 80011b4:	20010bd0 	.word	0x20010bd0
 80011b8:	20010bc8 	.word	0x20010bc8
 80011bc:	20010bcc 	.word	0x20010bcc
 80011c0:	20010be0 	.word	0x20010be0

080011c4 <enableClock>:

void enableClock(void)
{  
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80011ca:	4b48      	ldr	r3, [pc, #288]	; (80012ec <enableClock+0x128>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <enableClock+0x12c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d10e      	bne.n	80011f2 <enableClock+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	4b46      	ldr	r3, [pc, #280]	; (80012f4 <enableClock+0x130>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a45      	ldr	r2, [pc, #276]	; (80012f4 <enableClock+0x130>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <enableClock+0x130>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOD_CLK_ENABLE();
	else if(_port == GPIOE)
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();
}
 80011f0:	e076      	b.n	80012e0 <enableClock+0x11c>
  else if(_port == GPIOB)
 80011f2:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <enableClock+0x128>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a40      	ldr	r2, [pc, #256]	; (80012f8 <enableClock+0x134>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d10e      	bne.n	800121a <enableClock+0x56>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <enableClock+0x130>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a3b      	ldr	r2, [pc, #236]	; (80012f4 <enableClock+0x130>)
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <enableClock+0x130>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	69bb      	ldr	r3, [r7, #24]
}
 8001218:	e062      	b.n	80012e0 <enableClock+0x11c>
  else if(_port == GPIOB)
 800121a:	4b34      	ldr	r3, [pc, #208]	; (80012ec <enableClock+0x128>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a36      	ldr	r2, [pc, #216]	; (80012f8 <enableClock+0x134>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d10e      	bne.n	8001242 <enableClock+0x7e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <enableClock+0x130>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	4a31      	ldr	r2, [pc, #196]	; (80012f4 <enableClock+0x130>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	6313      	str	r3, [r2, #48]	; 0x30
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <enableClock+0x130>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697b      	ldr	r3, [r7, #20]
}
 8001240:	e04e      	b.n	80012e0 <enableClock+0x11c>
	else if(_port == GPIOC)
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <enableClock+0x128>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a2d      	ldr	r2, [pc, #180]	; (80012fc <enableClock+0x138>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d10e      	bne.n	800126a <enableClock+0xa6>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <enableClock+0x130>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <enableClock+0x130>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <enableClock+0x130>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	693b      	ldr	r3, [r7, #16]
}
 8001268:	e03a      	b.n	80012e0 <enableClock+0x11c>
	else if(_port == GPIOD)
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <enableClock+0x128>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a24      	ldr	r2, [pc, #144]	; (8001300 <enableClock+0x13c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d10e      	bne.n	8001292 <enableClock+0xce>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <enableClock+0x130>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <enableClock+0x130>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <enableClock+0x130>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	e026      	b.n	80012e0 <enableClock+0x11c>
	else if(_port == GPIOE)
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <enableClock+0x128>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <enableClock+0x140>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d10e      	bne.n	80012ba <enableClock+0xf6>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <enableClock+0x130>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <enableClock+0x130>)
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <enableClock+0x130>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
}
 80012b8:	e012      	b.n	80012e0 <enableClock+0x11c>
	else if(_port == GPIOF)
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <enableClock+0x128>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <enableClock+0x144>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d10d      	bne.n	80012e0 <enableClock+0x11c>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <enableClock+0x130>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <enableClock+0x130>)
 80012ce:	f043 0320 	orr.w	r3, r3, #32
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <enableClock+0x130>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0320 	and.w	r3, r3, #32
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
}
 80012e0:	bf00      	nop
 80012e2:	3724      	adds	r7, #36	; 0x24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20010bc8 	.word	0x20010bc8
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40021400 	.word	0x40021400

0800130c <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <setRowOffsets+0x3c>)
 8001320:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <setRowOffsets+0x3c>)
 8001328:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <setRowOffsets+0x3c>)
 8001330:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <setRowOffsets+0x3c>)
 8001338:	70da      	strb	r2, [r3, #3]
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20010bc0 	.word	0x20010bc0

0800134c <clear>:
void clear(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);
 8001350:	2001      	movs	r0, #1
 8001352:	f000 f878 	bl	8001446 <command>
  HAL_Delay(2);
 8001356:	2002      	movs	r0, #2
 8001358:	f001 fcfe 	bl	8002d58 <HAL_Delay>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <setCursor>:

void setCursor(uint8_t col, uint8_t row)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8001370:	2304      	movs	r3, #4
 8001372:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d803      	bhi.n	8001384 <setCursor+0x24>
    row = max_lines - 1;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <setCursor+0x5c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	79ba      	ldrb	r2, [r7, #6]
 800138a:	429a      	cmp	r2, r3
 800138c:	d303      	bcc.n	8001396 <setCursor+0x36>
    row = _numlines - 1;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <setCursor+0x5c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3b01      	subs	r3, #1
 8001394:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8001396:	79bb      	ldrb	r3, [r7, #6]
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <setCursor+0x60>)
 800139a:	5cd2      	ldrb	r2, [r2, r3]
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4413      	add	r3, r2
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f84a 	bl	8001446 <command>
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20010bcd 	.word	0x20010bcd
 80013c0:	20010bc0 	.word	0x20010bc0

080013c4 <display>:
// Turn the display on/off
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <display+0x28>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <display+0x28>)
 80013d4:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <display+0x28>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f830 	bl	8001446 <command>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20010bcc 	.word	0x20010bcc

080013f0 <print>:

// This will print character string to the LCD
size_t print(const char str[]) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <print+0x12>
 80013fe:	2300      	movs	r3, #0
 8001400:	e01d      	b.n	800143e <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7fe fee2 	bl	80001d0 <strlen>
 800140c:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8001412:	e00c      	b.n	800142e <print+0x3e>
    if (write(*buffer++)) n++;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	617a      	str	r2, [r7, #20]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 f820 	bl	8001462 <write>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <print+0x4a>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3301      	adds	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1e5a      	subs	r2, r3, #1
 8001432:	613a      	str	r2, [r7, #16]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1ed      	bne.n	8001414 <print+0x24>
 8001438:	e000      	b.n	800143c <print+0x4c>
    else break;
 800143a:	bf00      	nop
  }
  return n;
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <command>:

inline void command(uint8_t value) {
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f813 	bl	8001480 <send>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <write>:

inline size_t write(uint8_t value) {
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2101      	movs	r1, #1
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f805 	bl	8001480 <send>
  return 1;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <send>:


void send(uint8_t value, GPIO_PinState mode) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	460a      	mov	r2, r1
 800148a:	71fb      	strb	r3, [r7, #7]
 800148c:	4613      	mov	r3, r2
 800148e:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <send+0x6c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <send+0x70>)
 8001496:	8811      	ldrh	r1, [r2, #0]
 8001498:	79ba      	ldrb	r2, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fc68 	bl	8003d70 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <send+0x74>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	2bff      	cmp	r3, #255	; 0xff
 80014a6:	d007      	beq.n	80014b8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <send+0x6c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <send+0x74>)
 80014ae:	8811      	ldrh	r1, [r2, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fc5c 	bl	8003d70 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <send+0x78>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <send+0x4e>
    write8bits(value); 
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f86c 	bl	80015a4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 80014cc:	e009      	b.n	80014e2 <send+0x62>
    write4bits(value>>4);
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f83b 	bl	8001550 <write4bits>
    write4bits(value);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f837 	bl	8001550 <write4bits>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20010bc8 	.word	0x20010bc8
 80014f0:	20010be4 	.word	0x20010be4
 80014f4:	20010bc4 	.word	0x20010bc4
 80014f8:	20010be1 	.word	0x20010be1

080014fc <pulseEnable>:

void pulseEnable(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <pulseEnable+0x4c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a11      	ldr	r2, [pc, #68]	; (800154c <pulseEnable+0x50>)
 8001506:	8811      	ldrh	r1, [r2, #0]
 8001508:	2200      	movs	r2, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fc30 	bl	8003d70 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8001510:	2001      	movs	r0, #1
 8001512:	f001 fc21 	bl	8002d58 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <pulseEnable+0x4c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a0c      	ldr	r2, [pc, #48]	; (800154c <pulseEnable+0x50>)
 800151c:	8811      	ldrh	r1, [r2, #0]
 800151e:	2201      	movs	r2, #1
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fc25 	bl	8003d70 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8001526:	2001      	movs	r0, #1
 8001528:	f001 fc16 	bl	8002d58 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <pulseEnable+0x4c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <pulseEnable+0x50>)
 8001532:	8811      	ldrh	r1, [r2, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fc1a 	bl	8003d70 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800153c:	2001      	movs	r0, #1
 800153e:	f001 fc0b 	bl	8002d58 <HAL_Delay>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20010bc8 	.word	0x20010bc8
 800154c:	20010be2 	.word	0x20010be2

08001550 <write4bits>:

void write4bits(uint8_t value) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e013      	b.n	8001588 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <write4bits+0x4c>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <write4bits+0x50>)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800156c:	79fa      	ldrb	r2, [r7, #7]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	fa42 f303 	asr.w	r3, r2, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	f002 fbf7 	bl	8003d70 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3301      	adds	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b03      	cmp	r3, #3
 800158c:	dde8      	ble.n	8001560 <write4bits+0x10>
  }

  pulseEnable();
 800158e:	f7ff ffb5 	bl	80014fc <pulseEnable>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20010bc8 	.word	0x20010bc8
 80015a0:	20010bd0 	.word	0x20010bd0

080015a4 <write8bits>:

void write8bits(uint8_t value) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e013      	b.n	80015dc <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <write8bits+0x4c>)
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <write8bits+0x50>)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015c0:	79fa      	ldrb	r2, [r7, #7]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	fa42 f303 	asr.w	r3, r2, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	f002 fbcd 	bl	8003d70 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b07      	cmp	r3, #7
 80015e0:	dde8      	ble.n	80015b4 <write8bits+0x10>
  }
  
  pulseEnable();
 80015e2:	f7ff ff8b 	bl	80014fc <pulseEnable>
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20010bc8 	.word	0x20010bc8
 80015f4:	20010bd0 	.word	0x20010bd0

080015f8 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	4603      	mov	r3, r0
 8001602:	81fb      	strh	r3, [r7, #14]
 8001604:	460b      	mov	r3, r1
 8001606:	81bb      	strh	r3, [r7, #12]
 8001608:	4613      	mov	r3, r2
 800160a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001610:	f7ff fb0e 	bl	8000c30 <AUDIO_IO_Init>

  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001614:	89fb      	ldrh	r3, [r7, #14]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2201      	movs	r2, #1
 800161a:	2102      	movs	r1, #2
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fb01 	bl	8001c24 <CODEC_IO_Write>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	4413      	add	r3, r2
 800162a:	617b      	str	r3, [r7, #20]

  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 800162c:	89bb      	ldrh	r3, [r7, #12]
 800162e:	3b01      	subs	r3, #1
 8001630:	2b03      	cmp	r3, #3
 8001632:	d81b      	bhi.n	800166c <cs43l22_Init+0x74>
 8001634:	a201      	add	r2, pc, #4	; (adr r2, 800163c <cs43l22_Init+0x44>)
 8001636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163a:	bf00      	nop
 800163c:	0800164d 	.word	0x0800164d
 8001640:	08001655 	.word	0x08001655
 8001644:	0800165d 	.word	0x0800165d
 8001648:	08001665 	.word	0x08001665
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 800164c:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <cs43l22_Init+0x1c4>)
 800164e:	22fa      	movs	r2, #250	; 0xfa
 8001650:	701a      	strb	r2, [r3, #0]
    break;
 8001652:	e00f      	b.n	8001674 <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8001654:	4b59      	ldr	r3, [pc, #356]	; (80017bc <cs43l22_Init+0x1c4>)
 8001656:	22af      	movs	r2, #175	; 0xaf
 8001658:	701a      	strb	r2, [r3, #0]
    break;
 800165a:	e00b      	b.n	8001674 <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 800165c:	4b57      	ldr	r3, [pc, #348]	; (80017bc <cs43l22_Init+0x1c4>)
 800165e:	22aa      	movs	r2, #170	; 0xaa
 8001660:	701a      	strb	r2, [r3, #0]
    break;
 8001662:	e007      	b.n	8001674 <cs43l22_Init+0x7c>

  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8001664:	4b55      	ldr	r3, [pc, #340]	; (80017bc <cs43l22_Init+0x1c4>)
 8001666:	2205      	movs	r2, #5
 8001668:	701a      	strb	r2, [r3, #0]
    break;
 800166a:	e003      	b.n	8001674 <cs43l22_Init+0x7c>

  default:
    OutputDev = 0x05;
 800166c:	4b53      	ldr	r3, [pc, #332]	; (80017bc <cs43l22_Init+0x1c4>)
 800166e:	2205      	movs	r2, #5
 8001670:	701a      	strb	r2, [r3, #0]
    break;
 8001672:	bf00      	nop
  }

  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4a50      	ldr	r2, [pc, #320]	; (80017bc <cs43l22_Init+0x1c4>)
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	2104      	movs	r1, #4
 8001680:	4618      	mov	r0, r3
 8001682:	f000 facf 	bl	8001c24 <CODEC_IO_Write>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	4413      	add	r3, r2
 800168e:	617b      	str	r3, [r7, #20]

  /* Clock configuration: Auto detection */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2281      	movs	r2, #129	; 0x81
 8001696:	2105      	movs	r1, #5
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fac3 	bl	8001c24 <CODEC_IO_Write>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	4413      	add	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

  /* Set the Slave Mode and the audio Standard */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 80016a8:	89fb      	ldrh	r3, [r7, #14]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2204      	movs	r2, #4
 80016ae:	2106      	movs	r1, #6
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fab7 	bl	8001c24 <CODEC_IO_Write>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	4413      	add	r3, r2
 80016be:	617b      	str	r3, [r7, #20]

  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80016c0:	7afa      	ldrb	r2, [r7, #11]
 80016c2:	89fb      	ldrh	r3, [r7, #14]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f964 	bl	8001994 <cs43l22_SetVolume>
 80016cc:	4602      	mov	r2, r0
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	4413      	add	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]

  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80016d4:	89bb      	ldrh	r3, [r7, #12]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d023      	beq.n	8001722 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80016da:	89fb      	ldrh	r3, [r7, #14]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2206      	movs	r2, #6
 80016e0:	210f      	movs	r1, #15
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fa9e 	bl	8001c24 <CODEC_IO_Write>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	4413      	add	r3, r2
 80016f0:	617b      	str	r3, [r7, #20]

    /* Set the Speaker attenuation level */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2200      	movs	r2, #0
 80016f8:	2124      	movs	r1, #36	; 0x24
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fa92 	bl	8001c24 <CODEC_IO_Write>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4413      	add	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2200      	movs	r2, #0
 8001710:	2125      	movs	r1, #37	; 0x25
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fa86 	bl	8001c24 <CODEC_IO_Write>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	4413      	add	r3, r2
 8001720:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */

  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8001722:	89fb      	ldrh	r3, [r7, #14]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2200      	movs	r2, #0
 8001728:	210a      	movs	r1, #10
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fa7a 	bl	8001c24 <CODEC_IO_Write>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	4413      	add	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2204      	movs	r2, #4
 8001740:	210e      	movs	r1, #14
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fa6e 	bl	8001c24 <CODEC_IO_Write>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	4413      	add	r3, r2
 8001750:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8001752:	89fb      	ldrh	r3, [r7, #14]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2200      	movs	r2, #0
 8001758:	2127      	movs	r1, #39	; 0x27
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fa62 	bl	8001c24 <CODEC_IO_Write>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	4413      	add	r3, r2
 8001768:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800176a:	89fb      	ldrh	r3, [r7, #14]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	220f      	movs	r2, #15
 8001770:	211f      	movs	r1, #31
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fa56 	bl	8001c24 <CODEC_IO_Write>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4413      	add	r3, r2
 8001780:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8001782:	89fb      	ldrh	r3, [r7, #14]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	220a      	movs	r2, #10
 8001788:	211a      	movs	r1, #26
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fa4a 	bl	8001c24 <CODEC_IO_Write>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	4413      	add	r3, r2
 8001798:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800179a:	89fb      	ldrh	r3, [r7, #14]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	220a      	movs	r2, #10
 80017a0:	211b      	movs	r1, #27
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fa3e 	bl	8001c24 <CODEC_IO_Write>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	4413      	add	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]

  /* Return communication control value */
  return counter;
 80017b2:	697b      	ldr	r3, [r7, #20]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200001af 	.word	0x200001af

080017c0 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80017c4:	f7ff fa6c 	bl	8000ca0 <AUDIO_IO_DeInit>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The CS43L22 ID
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80017d6:	f7ff fa2b 	bl	8000c30 <AUDIO_IO_Init>

  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2101      	movs	r1, #1
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fa78 	bl	8000cd6 <AUDIO_IO_Read>
 80017e6:	4603      	mov	r3, r0
 80017e8:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	f023 0307 	bic.w	r3, r3, #7
 80017f0:	73fb      	strb	r3, [r7, #15]

  return((uint32_t) Value);
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	80fb      	strh	r3, [r7, #6]
 8001808:	4613      	mov	r3, r2
 800180a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]

  if(Is_cs43l22_Stop == 1)
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <cs43l22_Play+0x70>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d123      	bne.n	8001860 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2206      	movs	r2, #6
 800181e:	210e      	movs	r1, #14
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f9ff 	bl	8001c24 <CODEC_IO_Write>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4413      	add	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

    /* Enable Output device */
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f919 	bl	8001a6c <cs43l22_SetMute>
 800183a:	4602      	mov	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]

    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	229e      	movs	r2, #158	; 0x9e
 8001848:	2102      	movs	r1, #2
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f9ea 	bl	8001c24 <CODEC_IO_Write>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <cs43l22_Play+0x70>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
  }

  /* Return communication control value */
  return counter;
 8001860:	68fb      	ldr	r3, [r7, #12]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000038 	.word	0x20000038

08001870 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]

  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	2101      	movs	r1, #1
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f8f2 	bl	8001a6c <cs43l22_SetMute>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]

  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2201      	movs	r2, #1
 8001896:	2102      	movs	r1, #2
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f9c3 	bl	8001c24 <CODEC_IO_Write>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

  return counter;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f8ce 	bl	8001a6c <cs43l22_SetMute>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4413      	add	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	e002      	b.n	80018e4 <cs43l22_Resume+0x30>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3301      	adds	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2bfe      	cmp	r3, #254	; 0xfe
 80018e8:	d9f9      	bls.n	80018de <cs43l22_Resume+0x2a>

  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <cs43l22_Resume+0x74>)
 80018f0:	7812      	ldrb	r2, [r2, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	2104      	movs	r1, #4
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f994 	bl	8001c24 <CODEC_IO_Write>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	229e      	movs	r2, #158	; 0x9e
 800190c:	2102      	movs	r1, #2
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f988 	bl	8001c24 <CODEC_IO_Write>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

  return counter;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200001af 	.word	0x200001af

0800192c <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]

  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	2101      	movs	r1, #1
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f893 	bl	8001a6c <cs43l22_SetMute>
 8001946:	4602      	mov	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2204      	movs	r2, #4
 8001954:	210e      	movs	r1, #14
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f964 	bl	8001c24 <CODEC_IO_Write>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]

  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	229f      	movs	r2, #159	; 0x9f
 800196c:	2102      	movs	r1, #2
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f958 	bl	8001c24 <CODEC_IO_Write>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]

  Is_cs43l22_Stop = 1;
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <cs43l22_Stop+0x64>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
  return counter;
 8001984:	68fb      	ldr	r3, [r7, #12]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000038 	.word	0x20000038

08001994 <cs43l22_SetVolume>:
  *                description for more details).
  *
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	460a      	mov	r2, r1
 800199e:	80fb      	strh	r3, [r7, #6]
 80019a0:	4613      	mov	r3, r2
 80019a2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80019a8:	797b      	ldrb	r3, [r7, #5]
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d80b      	bhi.n	80019c6 <cs43l22_SetVolume+0x32>
 80019ae:	797a      	ldrb	r2, [r7, #5]
 80019b0:	4613      	mov	r3, r2
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <cs43l22_SetVolume+0xb8>)
 80019b8:	fb82 1203 	smull	r1, r2, r2, r3
 80019bc:	1152      	asrs	r2, r2, #5
 80019be:	17db      	asrs	r3, r3, #31
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	e000      	b.n	80019c8 <cs43l22_SetVolume+0x34>
 80019c6:	23ff      	movs	r3, #255	; 0xff
 80019c8:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80019ca:	7afb      	ldrb	r3, [r7, #11]
 80019cc:	2be6      	cmp	r3, #230	; 0xe6
 80019ce:	d91c      	bls.n	8001a0a <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7);
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	b2d8      	uxtb	r0, r3
 80019d4:	7afb      	ldrb	r3, [r7, #11]
 80019d6:	3319      	adds	r3, #25
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	2120      	movs	r1, #32
 80019de:	f000 f921 	bl	8001c24 <CODEC_IO_Write>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	b2d8      	uxtb	r0, r3
 80019f0:	7afb      	ldrb	r3, [r7, #11]
 80019f2:	3319      	adds	r3, #25
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	2121      	movs	r1, #33	; 0x21
 80019fa:	f000 f913 	bl	8001c24 <CODEC_IO_Write>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4413      	add	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e01b      	b.n	8001a42 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19);
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	b2d8      	uxtb	r0, r3
 8001a0e:	7afb      	ldrb	r3, [r7, #11]
 8001a10:	3319      	adds	r3, #25
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	2120      	movs	r1, #32
 8001a18:	f000 f904 	bl	8001c24 <CODEC_IO_Write>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19);
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	b2d8      	uxtb	r0, r3
 8001a2a:	7afb      	ldrb	r3, [r7, #11]
 8001a2c:	3319      	adds	r3, #25
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	2121      	movs	r1, #33	; 0x21
 8001a34:	f000 f8f6 	bl	8001c24 <CODEC_IO_Write>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	51eb851f 	.word	0x51eb851f

08001a50 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d124      	bne.n	8001acc <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	22ff      	movs	r2, #255	; 0xff
 8001a88:	2104      	movs	r1, #4
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f8ca 	bl	8001c24 <CODEC_IO_Write>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2122      	movs	r1, #34	; 0x22
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f8be 	bl	8001c24 <CODEC_IO_Write>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2123      	movs	r1, #35	; 0x23
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f8b2 	bl	8001c24 <CODEC_IO_Write>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e025      	b.n	8001b18 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2122      	movs	r1, #34	; 0x22
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 f8a5 	bl	8001c24 <CODEC_IO_Write>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2123      	movs	r1, #35	; 0x23
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f899 	bl	8001c24 <CODEC_IO_Write>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <cs43l22_SetMute+0xb8>)
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	2104      	movs	r1, #4
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f88b 	bl	8001c24 <CODEC_IO_Write>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001b18:	68fb      	ldr	r3, [r7, #12]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200001af 	.word	0x200001af

08001b28 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460a      	mov	r2, r1
 8001b32:	80fb      	strh	r3, [r7, #6]
 8001b34:	4613      	mov	r3, r2
 8001b36:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]

  switch (Output)
 8001b3c:	797b      	ldrb	r3, [r7, #5]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d84b      	bhi.n	8001bdc <cs43l22_SetOutputMode+0xb4>
 8001b44:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <cs43l22_SetOutputMode+0x24>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001b7d 	.word	0x08001b7d
 8001b54:	08001b9d 	.word	0x08001b9d
 8001b58:	08001bbd 	.word	0x08001bbd
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	22fa      	movs	r2, #250	; 0xfa
 8001b62:	2104      	movs	r1, #4
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f85d 	bl	8001c24 <CODEC_IO_Write>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <cs43l22_SetOutputMode+0xe0>)
 8001b76:	22fa      	movs	r2, #250	; 0xfa
 8001b78:	701a      	strb	r2, [r3, #0]
      break;
 8001b7a:	e03f      	b.n	8001bfc <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	22af      	movs	r2, #175	; 0xaf
 8001b82:	2104      	movs	r1, #4
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f84d 	bl	8001c24 <CODEC_IO_Write>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <cs43l22_SetOutputMode+0xe0>)
 8001b96:	22af      	movs	r2, #175	; 0xaf
 8001b98:	701a      	strb	r2, [r3, #0]
      break;
 8001b9a:	e02f      	b.n	8001bfc <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	22aa      	movs	r2, #170	; 0xaa
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f83d 	bl	8001c24 <CODEC_IO_Write>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <cs43l22_SetOutputMode+0xe0>)
 8001bb6:	22aa      	movs	r2, #170	; 0xaa
 8001bb8:	701a      	strb	r2, [r3, #0]
      break;
 8001bba:	e01f      	b.n	8001bfc <cs43l22_SetOutputMode+0xd4>

    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2205      	movs	r2, #5
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f82d 	bl	8001c24 <CODEC_IO_Write>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <cs43l22_SetOutputMode+0xe0>)
 8001bd6:	2205      	movs	r2, #5
 8001bd8:	701a      	strb	r2, [r3, #0]
      break;
 8001bda:	e00f      	b.n	8001bfc <cs43l22_SetOutputMode+0xd4>

    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2205      	movs	r2, #5
 8001be2:	2104      	movs	r1, #4
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f81d 	bl	8001c24 <CODEC_IO_Write>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <cs43l22_SetOutputMode+0xe0>)
 8001bf6:	2205      	movs	r2, #5
 8001bf8:	701a      	strb	r2, [r3, #0]
      break;
 8001bfa:	bf00      	nop
  }
  return counter;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200001af 	.word	0x200001af

08001c0c <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <CODEC_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	71bb      	strb	r3, [r7, #6]
 8001c32:	4613      	mov	r3, r2
 8001c34:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]

  AUDIO_IO_Write(Addr, Reg, Value);
 8001c3a:	797a      	ldrb	r2, [r7, #5]
 8001c3c:	79b9      	ldrb	r1, [r7, #6]
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f834 	bl	8000cae <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */

  return result;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	b2db      	uxtb	r3, r3
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_GPIO_EXTI_Callback>:
/***************************************
 * Button interupt
 **************************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d119      	bne.n	8001c98 <HAL_GPIO_EXTI_Callback+0x44>
	{
		if (AudioState == AUDIO_STATE_PLAY)
 8001c64:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d108      	bne.n	8001c7e <HAL_GPIO_EXTI_Callback+0x2a>
		{
			updateLCD=1;
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
			play=0;
 8001c72:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
			AudioState = AUDIO_STATE_PAUSE;
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001c7a:	220a      	movs	r2, #10
 8001c7c:	701a      	strb	r2, [r3, #0]
		}

		if (AudioState == AUDIO_STATE_WAIT)
 8001c7e:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d108      	bne.n	8001c98 <HAL_GPIO_EXTI_Callback+0x44>
		{
			updateLCD=1;
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
			play=1;
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
			AudioState = AUDIO_STATE_RESUME;
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001c94:	220b      	movs	r2, #11
 8001c96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == GPIO_PIN_11)
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c9e:	d108      	bne.n	8001cb2 <HAL_GPIO_EXTI_Callback+0x5e>
	{
		updateLCD=1;
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
		audioUpdate=1;
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
		AudioState = AUDIO_STATE_VOLUME_DOWN;
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001cae:	220d      	movs	r2, #13
 8001cb0:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_12)
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb8:	d108      	bne.n	8001ccc <HAL_GPIO_EXTI_Callback+0x78>
	{
		updateLCD=1;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
		audioUpdate=1;
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
		AudioState = AUDIO_STATE_VOLUME_UP;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001cc8:	220c      	movs	r2, #12
 8001cca:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_14)
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cd2:	d10b      	bne.n	8001cec <HAL_GPIO_EXTI_Callback+0x98>
	{
		updateLCD=1;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
		audioUpdate=0;
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
		play=1;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
		AudioState = AUDIO_STATE_PREVIOUS;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001ce8:	2206      	movs	r2, #6
 8001cea:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_13)
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf2:	d10b      	bne.n	8001d0c <HAL_GPIO_EXTI_Callback+0xb8>
	{
		updateLCD=1;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
		audioUpdate=0;
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
		play=1;
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
		AudioState = AUDIO_STATE_NEXT;
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001d08:	2205      	movs	r2, #5
 8001d0a:	701a      	strb	r2, [r3, #0]
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	20010eb0 	.word	0x20010eb0
 8001d1c:	200001b8 	.word	0x200001b8
 8001d20:	2000003c 	.word	0x2000003c
 8001d24:	200001b4 	.word	0x200001b4

08001d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	; 0x30
 8001d2c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001d2e:	f000 ffa1 	bl	8002c74 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d32:	f000 f8bf 	bl	8001eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d36:	f000 fa0f 	bl	8002158 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d3a:	f000 f925 	bl	8001f88 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d3e:	f000 f97f 	bl	8002040 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001d42:	f000 f9b3 	bl	80020ac <MX_SPI2_Init>
  MX_DMA_Init();
 8001d46:	f000 f9e7 	bl	8002118 <MX_DMA_Init>
  MX_I2S3_Init();
 8001d4a:	f000 f94b 	bl	8001fe4 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8001d4e:	f00f fcb9 	bl	80116c4 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001d52:	f007 fc59 	bl	8009608 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  LiquidCrystal(GPIOE, GPIO_PIN_7,GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13);
 8001d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d5a:	9303      	str	r3, [sp, #12]
 8001d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d60:	9302      	str	r3, [sp, #8]
 8001d62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	4841      	ldr	r0, [pc, #260]	; (8001e80 <main+0x158>)
 8001d7a:	f7ff f87b 	bl	8000e74 <LiquidCrystal>
  print("LCD: [OK]");
 8001d7e:	4841      	ldr	r0, [pc, #260]	; (8001e84 <main+0x15c>)
 8001d80:	f7ff fb36 	bl	80013f0 <print>
  HAL_Delay(1000);
 8001d84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d88:	f000 ffe6 	bl	8002d58 <HAL_Delay>
  clear();
 8001d8c:	f7ff fade 	bl	800134c <clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //sd_state = mountSD();
	  updateLCD=1;
 8001d90:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <main+0x160>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
	  MX_USB_HOST_Process();
 8001d96:	f00f fcbb 	bl	8011710 <MX_USB_HOST_Process>
	  if (sd_state || Appli_state==APPLICATION_READY)
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <main+0x164>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <main+0x82>
 8001da2:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <main+0x168>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d1f2      	bne.n	8001d90 <main+0x68>
	  {
		  if(Appli_state==APPLICATION_READY){
 8001daa:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <main+0x168>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d101      	bne.n	8001db6 <main+0x8e>
			  Mount_USB();
 8001db2:	f7ff f84b 	bl	8000e4c <Mount_USB>
		  }
	      	AUDIO_PLAYER_Start(0);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f000 fd88 	bl	80028cc <AUDIO_PLAYER_Start>
	      	clear();
 8001dbc:	f7ff fac6 	bl	800134c <clear>
	      	while (!IsFinished)
 8001dc0:	e059      	b.n	8001e76 <main+0x14e>
	      	{
	      		char lcdOutput[13];
	      		char lcdFileName[16];
	      		if((audioUpdate && updateLCD))
 8001dc2:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <main+0x16c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d017      	beq.n	8001dfa <main+0xd2>
 8001dca:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <main+0x160>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d013      	beq.n	8001dfa <main+0xd2>
	      		{
	      			updateLCD=0;
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <main+0x160>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
	      			clear();
 8001dd8:	f7ff fab8 	bl	800134c <clear>
	      			sprintf(lcdOutput,"VOL %d",getVol());
 8001ddc:	f000 fd6a 	bl	80028b4 <getVol>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	492c      	ldr	r1, [pc, #176]	; (8001e98 <main+0x170>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f010 f8ad 	bl	8011f48 <siprintf>
	    	      	print(lcdOutput);
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fafc 	bl	80013f0 <print>
	      		{
 8001df8:	e033      	b.n	8001e62 <main+0x13a>

	      		}
	      		else if((updateLCD && !audioUpdate) || (updateLCD && play))
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <main+0x160>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <main+0xe2>
 8001e02:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <main+0x16c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <main+0xf2>
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <main+0x160>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d027      	beq.n	8001e62 <main+0x13a>
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <main+0x174>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d023      	beq.n	8001e62 <main+0x13a>
	      		{
	      			updateLCD=0;
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <main+0x160>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
	      			clear();
 8001e20:	f7ff fa94 	bl	800134c <clear>
	      			setCursor(0,0);
 8001e24:	2100      	movs	r1, #0
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff fa9a 	bl	8001360 <setCursor>
	      			sprintf(lcdFileName,"%16s",getFileName());
 8001e2c:	f000 fd2a 	bl	8002884 <getFileName>
 8001e30:	4602      	mov	r2, r0
 8001e32:	463b      	mov	r3, r7
 8001e34:	491a      	ldr	r1, [pc, #104]	; (8001ea0 <main+0x178>)
 8001e36:	4618      	mov	r0, r3
 8001e38:	f010 f886 	bl	8011f48 <siprintf>
	    	      	print(lcdFileName);
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fad6 	bl	80013f0 <print>
	    	      	setCursor(0,1);
 8001e44:	2101      	movs	r1, #1
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fa8a 	bl	8001360 <setCursor>
	    	      	if(play)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <main+0x174>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <main+0x134>
	    	      		print("PLAYING");
 8001e54:	4813      	ldr	r0, [pc, #76]	; (8001ea4 <main+0x17c>)
 8001e56:	f7ff facb 	bl	80013f0 <print>
 8001e5a:	e002      	b.n	8001e62 <main+0x13a>
	    	      	else
	    	      		print("PAUSE");
 8001e5c:	4812      	ldr	r0, [pc, #72]	; (8001ea8 <main+0x180>)
 8001e5e:	f7ff fac7 	bl	80013f0 <print>
	      		}

	      		AUDIO_PLAYER_Process(true);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f000 fd96 	bl	8002994 <AUDIO_PLAYER_Process>

	      		if (AudioState == AUDIO_STATE_STOP)
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <main+0x184>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b09      	cmp	r3, #9
 8001e6e:	d102      	bne.n	8001e76 <main+0x14e>
	      		{
	      			IsFinished = 1;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <main+0x188>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
	      	while (!IsFinished)
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <main+0x188>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0a1      	beq.n	8001dc2 <main+0x9a>
	  updateLCD=1;
 8001e7e:	e787      	b.n	8001d90 <main+0x68>
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08012688 	.word	0x08012688
 8001e88:	200001b8 	.word	0x200001b8
 8001e8c:	20010c94 	.word	0x20010c94
 8001e90:	20010664 	.word	0x20010664
 8001e94:	200001b4 	.word	0x200001b4
 8001e98:	08012694 	.word	0x08012694
 8001e9c:	2000003c 	.word	0x2000003c
 8001ea0:	0801269c 	.word	0x0801269c
 8001ea4:	080126a4 	.word	0x080126a4
 8001ea8:	080126ac 	.word	0x080126ac
 8001eac:	20010eb0 	.word	0x20010eb0
 8001eb0:	200001b0 	.word	0x200001b0

08001eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b094      	sub	sp, #80	; 0x50
 8001eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eba:	f107 0320 	add.w	r3, r7, #32
 8001ebe:	2230      	movs	r2, #48	; 0x30
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f00f ff7e 	bl	8011dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <SystemClock_Config+0xcc>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	4a27      	ldr	r2, [pc, #156]	; (8001f80 <SystemClock_Config+0xcc>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <SystemClock_Config+0xcc>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <SystemClock_Config+0xd0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a21      	ldr	r2, [pc, #132]	; (8001f84 <SystemClock_Config+0xd0>)
 8001efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <SystemClock_Config+0xd0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f10:	2301      	movs	r3, #1
 8001f12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f24:	2304      	movs	r3, #4
 8001f26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f28:	23a8      	movs	r3, #168	; 0xa8
 8001f2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f30:	2307      	movs	r3, #7
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f34:	f107 0320 	add.w	r3, r7, #32
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f005 fd59 	bl	80079f0 <HAL_RCC_OscConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f44:	f000 f9a8 	bl	8002298 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f48:	230f      	movs	r3, #15
 8001f4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	2105      	movs	r1, #5
 8001f66:	4618      	mov	r0, r3
 8001f68:	f005 ffba 	bl	8007ee0 <HAL_RCC_ClockConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f72:	f000 f991 	bl	8002298 <Error_Handler>
  }
}
 8001f76:	bf00      	nop
 8001f78:	3750      	adds	r7, #80	; 0x50
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40007000 	.word	0x40007000

08001f88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001f8e:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <MX_I2C1_Init+0x54>)
 8001f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001f94:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <MX_I2C1_Init+0x58>)
 8001f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001faa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <MX_I2C1_Init+0x50>)
 8001fc6:	f003 fc75 	bl	80058b4 <HAL_I2C_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fd0:	f000 f962 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20010c40 	.word	0x20010c40
 8001fdc:	40005400 	.word	0x40005400
 8001fe0:	000186a0 	.word	0x000186a0

08001fe4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <MX_I2S3_Init+0x54>)
 8001fea:	4a14      	ldr	r2, [pc, #80]	; (800203c <MX_I2S3_Init+0x58>)
 8001fec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_I2S3_Init+0x54>)
 8001ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <MX_I2S3_Init+0x54>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_I2S3_Init+0x54>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <MX_I2S3_Init+0x54>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <MX_I2S3_Init+0x54>)
 800200a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800200e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_I2S3_Init+0x54>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <MX_I2S3_Init+0x54>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_I2S3_Init+0x54>)
 800201e:	2201      	movs	r2, #1
 8002020:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_I2S3_Init+0x54>)
 8002024:	f004 fc44 	bl	80068b0 <HAL_I2S_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800202e:	f000 f933 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20010e60 	.word	0x20010e60
 800203c:	40003c00 	.word	0x40003c00

08002040 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <MX_SPI1_Init+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <MX_SPI1_Init+0x64>)
 800204c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002050:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <MX_SPI1_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_SPI1_Init+0x64>)
 800206c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002070:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002074:	2200      	movs	r2, #0
 8002076:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <MX_SPI1_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_SPI1_Init+0x64>)
 800208c:	220a      	movs	r2, #10
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <MX_SPI1_Init+0x64>)
 8002092:	f006 fa79 	bl	8008588 <HAL_SPI_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800209c:	f000 f8fc 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20010df8 	.word	0x20010df8
 80020a8:	40013000 	.word	0x40013000

080020ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <MX_SPI2_Init+0x64>)
 80020b2:	4a18      	ldr	r2, [pc, #96]	; (8002114 <MX_SPI2_Init+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MX_SPI2_Init+0x64>)
 80020b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <MX_SPI2_Init+0x64>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <MX_SPI2_Init+0x64>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <MX_SPI2_Init+0x64>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <MX_SPI2_Init+0x64>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <MX_SPI2_Init+0x64>)
 80020d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <MX_SPI2_Init+0x64>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <MX_SPI2_Init+0x64>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <MX_SPI2_Init+0x64>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <MX_SPI2_Init+0x64>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <MX_SPI2_Init+0x64>)
 80020f8:	220a      	movs	r2, #10
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020fc:	4804      	ldr	r0, [pc, #16]	; (8002110 <MX_SPI2_Init+0x64>)
 80020fe:	f006 fa43 	bl	8008588 <HAL_SPI_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002108:	f000 f8c6 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20010be8 	.word	0x20010be8
 8002114:	40003800 	.word	0x40003800

08002118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_DMA_Init+0x3c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <MX_DMA_Init+0x3c>)
 8002128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_DMA_Init+0x3c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2010      	movs	r0, #16
 8002140:	f000 ff09 	bl	8002f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002144:	2010      	movs	r0, #16
 8002146:	f000 ff22 	bl	8002f8e <HAL_NVIC_EnableIRQ>

}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800

08002158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	4b45      	ldr	r3, [pc, #276]	; (8002288 <MX_GPIO_Init+0x130>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a44      	ldr	r2, [pc, #272]	; (8002288 <MX_GPIO_Init+0x130>)
 8002178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b42      	ldr	r3, [pc, #264]	; (8002288 <MX_GPIO_Init+0x130>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b3e      	ldr	r3, [pc, #248]	; (8002288 <MX_GPIO_Init+0x130>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a3d      	ldr	r2, [pc, #244]	; (8002288 <MX_GPIO_Init+0x130>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <MX_GPIO_Init+0x130>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <MX_GPIO_Init+0x130>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a36      	ldr	r2, [pc, #216]	; (8002288 <MX_GPIO_Init+0x130>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b34      	ldr	r3, [pc, #208]	; (8002288 <MX_GPIO_Init+0x130>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4b30      	ldr	r3, [pc, #192]	; (8002288 <MX_GPIO_Init+0x130>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <MX_GPIO_Init+0x130>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <MX_GPIO_Init+0x130>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	2101      	movs	r1, #1
 80021e2:	482a      	ldr	r0, [pc, #168]	; (800228c <MX_GPIO_Init+0x134>)
 80021e4:	f001 fdc4 	bl	8003d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2113      	movs	r1, #19
 80021ec:	4828      	ldr	r0, [pc, #160]	; (8002290 <MX_GPIO_Init+0x138>)
 80021ee:	f001 fdbf 	bl	8003d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021f2:	2301      	movs	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4820      	ldr	r0, [pc, #128]	; (800228c <MX_GPIO_Init+0x134>)
 800220a:	f001 fb19 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800220e:	2301      	movs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002212:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	481c      	ldr	r0, [pc, #112]	; (8002294 <MX_GPIO_Init+0x13c>)
 8002224:	f001 fb0c 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002228:	2313      	movs	r3, #19
 800222a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	2301      	movs	r3, #1
 800222e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	4814      	ldr	r0, [pc, #80]	; (8002290 <MX_GPIO_Init+0x138>)
 8002240:	f001 fafe 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002244:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8002248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800224a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800224e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002250:	2301      	movs	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	480d      	ldr	r0, [pc, #52]	; (8002290 <MX_GPIO_Init+0x138>)
 800225c:	f001 faf0 	bl	8003840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	2006      	movs	r0, #6
 8002266:	f000 fe76 	bl	8002f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800226a:	2006      	movs	r0, #6
 800226c:	f000 fe8f 	bl	8002f8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	2028      	movs	r0, #40	; 0x28
 8002276:	f000 fe6e 	bl	8002f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800227a:	2028      	movs	r0, #40	; 0x28
 800227c:	f000 fe87 	bl	8002f8e <HAL_NVIC_EnableIRQ>

}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	40020800 	.word	0x40020800
 8002290:	40020400 	.word	0x40020400
 8002294:	40020000 	.word	0x40020000

08002298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800229c:	b672      	cpsid	i
}
 800229e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <Error_Handler+0x8>
	...

080022a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_MspInit+0x4c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <HAL_MspInit+0x4c>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <HAL_MspInit+0x4c>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_MspInit+0x4c>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a08      	ldr	r2, [pc, #32]	; (80022f0 <HAL_MspInit+0x4c>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_MspInit+0x4c>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800

080022f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a19      	ldr	r2, [pc, #100]	; (8002378 <HAL_I2C_MspInit+0x84>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d12b      	bne.n	800236e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <HAL_I2C_MspInit+0x88>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a17      	ldr	r2, [pc, #92]	; (800237c <HAL_I2C_MspInit+0x88>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_I2C_MspInit+0x88>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002332:	23c0      	movs	r3, #192	; 0xc0
 8002334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002336:	2312      	movs	r3, #18
 8002338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002342:	2304      	movs	r3, #4
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	480c      	ldr	r0, [pc, #48]	; (8002380 <HAL_I2C_MspInit+0x8c>)
 800234e:	f001 fa77 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_I2C_MspInit+0x88>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a08      	ldr	r2, [pc, #32]	; (800237c <HAL_I2C_MspInit+0x88>)
 800235c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_I2C_MspInit+0x88>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800236e:	bf00      	nop
 8002370:	3728      	adds	r7, #40	; 0x28
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40005400 	.word	0x40005400
 800237c:	40023800 	.word	0x40023800
 8002380:	40020400 	.word	0x40020400

08002384 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_I2C_MspDeInit+0x38>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10d      	bne.n	80023b2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_I2C_MspDeInit+0x3c>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_I2C_MspDeInit+0x3c>)
 800239c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80023a2:	2140      	movs	r1, #64	; 0x40
 80023a4:	4807      	ldr	r0, [pc, #28]	; (80023c4 <HAL_I2C_MspDeInit+0x40>)
 80023a6:	f001 fbe7 	bl	8003b78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <HAL_I2C_MspDeInit+0x40>)
 80023ae:	f001 fbe3 	bl	8003b78 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40005400 	.word	0x40005400
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020400 	.word	0x40020400

080023c8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08e      	sub	sp, #56	; 0x38
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a56      	ldr	r2, [pc, #344]	; (800254c <HAL_I2S_MspInit+0x184>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	f040 80a5 	bne.w	8002544 <HAL_I2S_MspInit+0x17c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80023fa:	2301      	movs	r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 191;
 80023fe:	23bf      	movs	r3, #191	; 0xbf
 8002400:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002402:	2302      	movs	r3, #2
 8002404:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4618      	mov	r0, r3
 800240c:	f005 ff50 	bl	80082b0 <HAL_RCCEx_PeriphCLKConfig>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8002416:	f7ff ff3f 	bl	8002298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_I2S_MspInit+0x188>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_I2S_MspInit+0x188>)
 8002424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_I2S_MspInit+0x188>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b45      	ldr	r3, [pc, #276]	; (8002550 <HAL_I2S_MspInit+0x188>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a44      	ldr	r2, [pc, #272]	; (8002550 <HAL_I2S_MspInit+0x188>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b42      	ldr	r3, [pc, #264]	; (8002550 <HAL_I2S_MspInit+0x188>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <HAL_I2S_MspInit+0x188>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a3d      	ldr	r2, [pc, #244]	; (8002550 <HAL_I2S_MspInit+0x188>)
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_I2S_MspInit+0x188>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800246e:	2310      	movs	r3, #16
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800247e:	2306      	movs	r3, #6
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002486:	4619      	mov	r1, r3
 8002488:	4832      	ldr	r0, [pc, #200]	; (8002554 <HAL_I2S_MspInit+0x18c>)
 800248a:	f001 f9d9 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800248e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024a0:	2306      	movs	r3, #6
 80024a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a8:	4619      	mov	r1, r3
 80024aa:	482b      	ldr	r0, [pc, #172]	; (8002558 <HAL_I2S_MspInit+0x190>)
 80024ac:	f001 f9c8 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2300      	movs	r3, #0
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 80024c2:	2305      	movs	r3, #5
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ca:	4619      	mov	r1, r3
 80024cc:	4822      	ldr	r0, [pc, #136]	; (8002558 <HAL_I2S_MspInit+0x190>)
 80024ce:	f001 f9b7 	bl	8003840 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80024d2:	4b22      	ldr	r3, [pc, #136]	; (800255c <HAL_I2S_MspInit+0x194>)
 80024d4:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_I2S_MspInit+0x198>)
 80024d6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_I2S_MspInit+0x194>)
 80024da:	2200      	movs	r2, #0
 80024dc:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <HAL_I2S_MspInit+0x194>)
 80024e0:	2240      	movs	r2, #64	; 0x40
 80024e2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_I2S_MspInit+0x194>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <HAL_I2S_MspInit+0x194>)
 80024ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024f0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <HAL_I2S_MspInit+0x194>)
 80024f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024f8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_I2S_MspInit+0x194>)
 80024fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002500:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_I2S_MspInit+0x194>)
 8002504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002508:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <HAL_I2S_MspInit+0x194>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_I2S_MspInit+0x194>)
 8002512:	2204      	movs	r2, #4
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <HAL_I2S_MspInit+0x194>)
 8002518:	2203      	movs	r2, #3
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_I2S_MspInit+0x194>)
 800251e:	2200      	movs	r2, #0
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_I2S_MspInit+0x194>)
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002528:	480c      	ldr	r0, [pc, #48]	; (800255c <HAL_I2S_MspInit+0x194>)
 800252a:	f000 fd4b 	bl	8002fc4 <HAL_DMA_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_I2S_MspInit+0x170>
    {
      Error_Handler();
 8002534:	f7ff feb0 	bl	8002298 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_I2S_MspInit+0x194>)
 800253c:	639a      	str	r2, [r3, #56]	; 0x38
 800253e:	4a07      	ldr	r2, [pc, #28]	; (800255c <HAL_I2S_MspInit+0x194>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002544:	bf00      	nop
 8002546:	3738      	adds	r7, #56	; 0x38
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40003c00 	.word	0x40003c00
 8002550:	40023800 	.word	0x40023800
 8002554:	40020000 	.word	0x40020000
 8002558:	40020800 	.word	0x40020800
 800255c:	20010c98 	.word	0x20010c98
 8002560:	40026088 	.word	0x40026088

08002564 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a41      	ldr	r2, [pc, #260]	; (8002688 <HAL_SPI_MspInit+0x124>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d12c      	bne.n	80025e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	4b40      	ldr	r3, [pc, #256]	; (800268c <HAL_SPI_MspInit+0x128>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	4a3f      	ldr	r2, [pc, #252]	; (800268c <HAL_SPI_MspInit+0x128>)
 8002590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002594:	6453      	str	r3, [r2, #68]	; 0x44
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_SPI_MspInit+0x128>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_SPI_MspInit+0x128>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a38      	ldr	r2, [pc, #224]	; (800268c <HAL_SPI_MspInit+0x128>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b36      	ldr	r3, [pc, #216]	; (800268c <HAL_SPI_MspInit+0x128>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025be:	23e0      	movs	r3, #224	; 0xe0
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ce:	2305      	movs	r3, #5
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4619      	mov	r1, r3
 80025d8:	482d      	ldr	r0, [pc, #180]	; (8002690 <HAL_SPI_MspInit+0x12c>)
 80025da:	f001 f931 	bl	8003840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025de:	e04f      	b.n	8002680 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2b      	ldr	r2, [pc, #172]	; (8002694 <HAL_SPI_MspInit+0x130>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d14a      	bne.n	8002680 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_SPI_MspInit+0x128>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a26      	ldr	r2, [pc, #152]	; (800268c <HAL_SPI_MspInit+0x128>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_SPI_MspInit+0x128>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_SPI_MspInit+0x128>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_SPI_MspInit+0x128>)
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_SPI_MspInit+0x128>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_SPI_MspInit+0x128>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a18      	ldr	r2, [pc, #96]	; (800268c <HAL_SPI_MspInit+0x128>)
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_SPI_MspInit+0x128>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800263e:	230c      	movs	r3, #12
 8002640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800264e:	2305      	movs	r3, #5
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	4619      	mov	r1, r3
 8002658:	480f      	ldr	r0, [pc, #60]	; (8002698 <HAL_SPI_MspInit+0x134>)
 800265a:	f001 f8f1 	bl	8003840 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800265e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002670:	2305      	movs	r3, #5
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	4619      	mov	r1, r3
 800267a:	4808      	ldr	r0, [pc, #32]	; (800269c <HAL_SPI_MspInit+0x138>)
 800267c:	f001 f8e0 	bl	8003840 <HAL_GPIO_Init>
}
 8002680:	bf00      	nop
 8002682:	3730      	adds	r7, #48	; 0x30
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40013000 	.word	0x40013000
 800268c:	40023800 	.word	0x40023800
 8002690:	40020000 	.word	0x40020000
 8002694:	40003800 	.word	0x40003800
 8002698:	40020800 	.word	0x40020800
 800269c:	40020400 	.word	0x40020400

080026a0 <SDTimer_Handler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void SDTimer_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <SDTimer_Handler+0x40>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <SDTimer_Handler+0x1c>
    Timer1--;
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <SDTimer_Handler+0x40>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <SDTimer_Handler+0x40>)
 80026ba:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <SDTimer_Handler+0x44>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <SDTimer_Handler+0x34>
    Timer2--;
 80026c6:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <SDTimer_Handler+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <SDTimer_Handler+0x44>)
 80026d2:	701a      	strb	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20010eaa 	.word	0x20010eaa
 80026e4:	20010ea8 	.word	0x20010ea8

080026e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026ec:	e7fe      	b.n	80026ec <NMI_Handler+0x4>

080026ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f2:	e7fe      	b.n	80026f2 <HardFault_Handler+0x4>

080026f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <MemManage_Handler+0x4>

080026fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026fe:	e7fe      	b.n	80026fe <BusFault_Handler+0x4>

08002700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002704:	e7fe      	b.n	8002704 <UsageFault_Handler+0x4>

08002706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <SysTick_Handler+0x30>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	3301      	adds	r3, #1
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <SysTick_Handler+0x30>)
 8002740:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10){
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <SysTick_Handler+0x30>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b09      	cmp	r3, #9
 800274a:	d904      	bls.n	8002756 <SysTick_Handler+0x26>
	   FatFsCnt = 0;
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <SysTick_Handler+0x30>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
	   SDTimer_Handler();
 8002752:	f7ff ffa5 	bl	80026a0 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002756:	f000 fadf 	bl	8002d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200001bc 	.word	0x200001bc

08002764 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002768:	2001      	movs	r0, #1
 800276a:	f001 fb1b 	bl	8003da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <DMA1_Stream5_IRQHandler+0x10>)
 800277a:	f000 fdf7 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20010c98 	.word	0x20010c98

08002788 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800278c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002790:	f001 fb08 	bl	8003da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002794:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002798:	f001 fb04 	bl	8003da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800279c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027a0:	f001 fb00 	bl	8003da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80027a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027a8:	f001 fafc 	bl	8003da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <OTG_FS_IRQHandler+0x10>)
 80027b6:	f001 fd77 	bl	80042a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20014798 	.word	0x20014798

080027c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <_sbrk+0x5c>)
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <_sbrk+0x60>)
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <_sbrk+0x64>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <_sbrk+0x64>)
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <_sbrk+0x68>)
 80027e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <_sbrk+0x64>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d207      	bcs.n	8002804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f4:	f00f fa9e 	bl	8011d34 <__errno>
 80027f8:	4603      	mov	r3, r0
 80027fa:	220c      	movs	r2, #12
 80027fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002802:	e009      	b.n	8002818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <_sbrk+0x64>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280a:	4b07      	ldr	r3, [pc, #28]	; (8002828 <_sbrk+0x64>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	4a05      	ldr	r2, [pc, #20]	; (8002828 <_sbrk+0x64>)
 8002814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002816:	68fb      	ldr	r3, [r7, #12]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20020000 	.word	0x20020000
 8002824:	00000800 	.word	0x00000800
 8002828:	200001c0 	.word	0x200001c0
 800282c:	20014ab0 	.word	0x20014ab0

08002830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <SystemInit+0x20>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	4a05      	ldr	r2, [pc, #20]	; (8002850 <SystemInit+0x20>)
 800283c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <PlayerInit>:
WAVE_FormatTypeDef WaveFormat;

FIL WavFile;

uint8_t PlayerInit(uint32_t AudioFreq)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <PlayerInit+0x2c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4619      	mov	r1, r3
 8002866:	2003      	movs	r0, #3
 8002868:	f7fd fe86 	bl	8000578 <AUDIO_OUT_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <PlayerInit+0x22>
	{
		return 1;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8002876:	2300      	movs	r3, #0
	}
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20000044 	.word	0x20000044

08002884 <getFileName>:

char* getFileName()
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
	return (char *)FileList.file[FilePos].name;
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <getFileName+0x28>)
 800288a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288e:	461a      	mov	r2, r3
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <getFileName+0x2c>)
 800289c:	4413      	add	r3, r2
 800289e:	3301      	adds	r3, #1
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	200101cc 	.word	0x200101cc
 80028b0:	20010ee0 	.word	0x20010ee0

080028b4 <getVol>:

int getVol()
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
	return uwVolume;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <getVol+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000044 	.word	0x20000044

080028cc <AUDIO_PLAYER_Start>:

AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
  uint bytesread;

  f_close(&WavFile);
 80028d6:	482a      	ldr	r0, [pc, #168]	; (8002980 <AUDIO_PLAYER_Start+0xb4>)
 80028d8:	f00e f959 	bl	8010b8e <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 80028dc:	f7fe faa8 	bl	8000e30 <AUDIO_GetWavObjectNumber>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d943      	bls.n	8002974 <AUDIO_PLAYER_Start+0xa8>
  {
    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 80028ec:	79fa      	ldrb	r2, [r7, #7]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	4a22      	ldr	r2, [pc, #136]	; (8002984 <AUDIO_PLAYER_Start+0xb8>)
 80028fa:	4413      	add	r3, r2
 80028fc:	3301      	adds	r3, #1
 80028fe:	2201      	movs	r2, #1
 8002900:	4619      	mov	r1, r3
 8002902:	481f      	ldr	r0, [pc, #124]	; (8002980 <AUDIO_PLAYER_Start+0xb4>)
 8002904:	f00d fbe8 	bl	80100d8 <f_open>

    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	222c      	movs	r2, #44	; 0x2c
 800290e:	491e      	ldr	r1, [pc, #120]	; (8002988 <AUDIO_PLAYER_Start+0xbc>)
 8002910:	481b      	ldr	r0, [pc, #108]	; (8002980 <AUDIO_PLAYER_Start+0xb4>)
 8002912:	f00d fe92 	bl	801063a <f_read>

    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <AUDIO_PLAYER_Start+0xbc>)
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff ff9a 	bl	8002854 <PlayerInit>

    BufferCtl.state = BUFFER_OFFSET_NONE;
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <AUDIO_PLAYER_Start+0xc0>)
 8002922:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]

    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	4813      	ldr	r0, [pc, #76]	; (8002980 <AUDIO_PLAYER_Start+0xb4>)
 8002934:	f00e f955 	bl	8010be2 <f_lseek>

    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002940:	4912      	ldr	r1, [pc, #72]	; (800298c <AUDIO_PLAYER_Start+0xc0>)
 8002942:	480f      	ldr	r0, [pc, #60]	; (8002980 <AUDIO_PLAYER_Start+0xb4>)
 8002944:	f00d fe79 	bl	801063a <f_read>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d112      	bne.n	8002974 <AUDIO_PLAYER_Start+0xa8>
    {
      AudioState = AUDIO_STATE_PLAY;
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <AUDIO_PLAYER_Start+0xc4>)
 8002950:	2203      	movs	r2, #3
 8002952:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00c      	beq.n	8002974 <AUDIO_PLAYER_Start+0xa8>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 800295a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800295e:	480b      	ldr	r0, [pc, #44]	; (800298c <AUDIO_PLAYER_Start+0xc0>)
 8002960:	f7fd fe58 	bl	8000614 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <AUDIO_PLAYER_Start+0xc0>)
 8002968:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800296c:	3304      	adds	r3, #4
 800296e:	601a      	str	r2, [r3, #0]
          return AUDIO_ERROR_NONE;
 8002970:	2300      	movs	r3, #0
 8002972:	e000      	b.n	8002976 <AUDIO_PLAYER_Start+0xaa>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8002974:	2301      	movs	r3, #1
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200112c0 	.word	0x200112c0
 8002984:	20010ee0 	.word	0x20010ee0
 8002988:	20010eb4 	.word	0x20010eb4
 800298c:	200001c4 	.word	0x200001c4
 8002990:	20010eb0 	.word	0x20010eb0

08002994 <AUDIO_PLAYER_Process>:


AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]

  switch(AudioState)
 80029a2:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <AUDIO_PLAYER_Process+0x220>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	3b03      	subs	r3, #3
 80029a8:	2b0a      	cmp	r3, #10
 80029aa:	f200 80fb 	bhi.w	8002ba4 <AUDIO_PLAYER_Process+0x210>
 80029ae:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <AUDIO_PLAYER_Process+0x20>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	080029e1 	.word	0x080029e1
 80029b8:	08002ba5 	.word	0x08002ba5
 80029bc:	08002ab1 	.word	0x08002ab1
 80029c0:	08002aff 	.word	0x08002aff
 80029c4:	08002ba5 	.word	0x08002ba5
 80029c8:	08002ba5 	.word	0x08002ba5
 80029cc:	08002a9f 	.word	0x08002a9f
 80029d0:	08002b41 	.word	0x08002b41
 80029d4:	08002b4d 	.word	0x08002b4d
 80029d8:	08002b59 	.word	0x08002b59
 80029dc:	08002b7f 	.word	0x08002b7f
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 80029e0:	4b75      	ldr	r3, [pc, #468]	; (8002bb8 <AUDIO_PLAYER_Process+0x224>)
 80029e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80029e6:	3304      	adds	r3, #4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b74      	ldr	r3, [pc, #464]	; (8002bbc <AUDIO_PLAYER_Process+0x228>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d305      	bcc.n	80029fe <AUDIO_PLAYER_Process+0x6a>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80029f2:	2002      	movs	r0, #2
 80029f4:	f7fd fe64 	bl	80006c0 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 80029f8:	4b6e      	ldr	r3, [pc, #440]	; (8002bb4 <AUDIO_PLAYER_Process+0x220>)
 80029fa:	2205      	movs	r2, #5
 80029fc:	701a      	strb	r2, [r3, #0]
    }

    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 80029fe:	4b6e      	ldr	r3, [pc, #440]	; (8002bb8 <AUDIO_PLAYER_Process+0x224>)
 8002a00:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d120      	bne.n	8002a4c <AUDIO_PLAYER_Process+0xb8>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a12:	4969      	ldr	r1, [pc, #420]	; (8002bb8 <AUDIO_PLAYER_Process+0x224>)
 8002a14:	486a      	ldr	r0, [pc, #424]	; (8002bc0 <AUDIO_PLAYER_Process+0x22c>)
 8002a16:	f00d fe10 	bl	801063a <f_read>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <AUDIO_PLAYER_Process+0x96>
      {
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002a20:	2002      	movs	r0, #2
 8002a22:	f7fd fe4d 	bl	80006c0 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0c0      	b.n	8002bac <AUDIO_PLAYER_Process+0x218>
      }
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002a2a:	4b63      	ldr	r3, [pc, #396]	; (8002bb8 <AUDIO_PLAYER_Process+0x224>)
 8002a2c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread;
 8002a34:	4b60      	ldr	r3, [pc, #384]	; (8002bb8 <AUDIO_PLAYER_Process+0x224>)
 8002a36:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	441a      	add	r2, r3
 8002a42:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <AUDIO_PLAYER_Process+0x224>)
 8002a44:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a48:	3304      	adds	r3, #4
 8002a4a:	601a      	str	r2, [r3, #0]
    }

    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8002a4c:	4b5a      	ldr	r3, [pc, #360]	; (8002bb8 <AUDIO_PLAYER_Process+0x224>)
 8002a4e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	f040 80a7 	bne.w	8002ba8 <AUDIO_PLAYER_Process+0x214>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002a5a:	f107 0308 	add.w	r3, r7, #8
 8002a5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a62:	4958      	ldr	r1, [pc, #352]	; (8002bc4 <AUDIO_PLAYER_Process+0x230>)
 8002a64:	4856      	ldr	r0, [pc, #344]	; (8002bc0 <AUDIO_PLAYER_Process+0x22c>)
 8002a66:	f00d fde8 	bl	801063a <f_read>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <AUDIO_PLAYER_Process+0xe6>
      {
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002a70:	2002      	movs	r0, #2
 8002a72:	f7fd fe25 	bl	80006c0 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e098      	b.n	8002bac <AUDIO_PLAYER_Process+0x218>
      }

      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002a7a:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <AUDIO_PLAYER_Process+0x224>)
 8002a7c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread;
 8002a84:	4b4c      	ldr	r3, [pc, #304]	; (8002bb8 <AUDIO_PLAYER_Process+0x224>)
 8002a86:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	441a      	add	r2, r3
 8002a92:	4b49      	ldr	r3, [pc, #292]	; (8002bb8 <AUDIO_PLAYER_Process+0x224>)
 8002a94:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002a98:	3304      	adds	r3, #4
 8002a9a:	601a      	str	r2, [r3, #0]
    }
    break;
 8002a9c:	e084      	b.n	8002ba8 <AUDIO_PLAYER_Process+0x214>

  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f7fd fe0e 	bl	80006c0 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE;
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <AUDIO_PLAYER_Process+0x220>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
    break;
 8002aae:	e07c      	b.n	8002baa <AUDIO_PLAYER_Process+0x216>

  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8002ab0:	4b45      	ldr	r3, [pc, #276]	; (8002bc8 <AUDIO_PLAYER_Process+0x234>)
 8002ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	b21a      	sxth	r2, r3
 8002abe:	4b42      	ldr	r3, [pc, #264]	; (8002bc8 <AUDIO_PLAYER_Process+0x234>)
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <AUDIO_PLAYER_Process+0x234>)
 8002ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac8:	461c      	mov	r4, r3
 8002aca:	f7fe f9b1 	bl	8000e30 <AUDIO_GetWavObjectNumber>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	429c      	cmp	r4, r3
 8002ad2:	db09      	blt.n	8002ae8 <AUDIO_PLAYER_Process+0x154>
    {
    	if (isLoop)
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <AUDIO_PLAYER_Process+0x14e>
    	{
    		FilePos = 0;
 8002ada:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <AUDIO_PLAYER_Process+0x234>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	801a      	strh	r2, [r3, #0]
 8002ae0:	e002      	b.n	8002ae8 <AUDIO_PLAYER_Process+0x154>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <AUDIO_PLAYER_Process+0x220>)
 8002ae4:	2209      	movs	r2, #9
 8002ae6:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002ae8:	2002      	movs	r0, #2
 8002aea:	f7fd fde9 	bl	80006c0 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002aee:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <AUDIO_PLAYER_Process+0x234>)
 8002af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fee8 	bl	80028cc <AUDIO_PLAYER_Start>
    break;
 8002afc:	e055      	b.n	8002baa <AUDIO_PLAYER_Process+0x216>

  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8002afe:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <AUDIO_PLAYER_Process+0x234>)
 8002b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	b21a      	sxth	r2, r3
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <AUDIO_PLAYER_Process+0x234>)
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <AUDIO_PLAYER_Process+0x234>)
 8002b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	da07      	bge.n	8002b2a <AUDIO_PLAYER_Process+0x196>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8002b1a:	f7fe f989 	bl	8000e30 <AUDIO_GetWavObjectNumber>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	b21a      	sxth	r2, r3
 8002b26:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <AUDIO_PLAYER_Process+0x234>)
 8002b28:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	f7fd fdc8 	bl	80006c0 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <AUDIO_PLAYER_Process+0x234>)
 8002b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fec7 	bl	80028cc <AUDIO_PLAYER_Start>
    break;
 8002b3e:	e034      	b.n	8002baa <AUDIO_PLAYER_Process+0x216>

  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8002b40:	f7fd fd92 	bl	8000668 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <AUDIO_PLAYER_Process+0x220>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
    break;
 8002b4a:	e02e      	b.n	8002baa <AUDIO_PLAYER_Process+0x216>

  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8002b4c:	f7fd fda2 	bl	8000694 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <AUDIO_PLAYER_Process+0x220>)
 8002b52:	2203      	movs	r2, #3
 8002b54:	701a      	strb	r2, [r3, #0]
    break;
 8002b56:	e028      	b.n	8002baa <AUDIO_PLAYER_Process+0x216>

  case AUDIO_STATE_VOLUME_UP:
    if( uwVolume <= 99)
 8002b58:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <AUDIO_PLAYER_Process+0x238>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b63      	cmp	r3, #99	; 0x63
 8002b5e:	dc04      	bgt.n	8002b6a <AUDIO_PLAYER_Process+0x1d6>
    {
      uwVolume += 1;
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <AUDIO_PLAYER_Process+0x238>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <AUDIO_PLAYER_Process+0x238>)
 8002b68:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <AUDIO_PLAYER_Process+0x238>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fdcd 	bl	8000710 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <AUDIO_PLAYER_Process+0x220>)
 8002b78:	2203      	movs	r2, #3
 8002b7a:	701a      	strb	r2, [r3, #0]
    break;
 8002b7c:	e015      	b.n	8002baa <AUDIO_PLAYER_Process+0x216>

  case AUDIO_STATE_VOLUME_DOWN:
    if( uwVolume >= 1)
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <AUDIO_PLAYER_Process+0x238>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	dd04      	ble.n	8002b90 <AUDIO_PLAYER_Process+0x1fc>
    {
      uwVolume -= 1;
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <AUDIO_PLAYER_Process+0x238>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <AUDIO_PLAYER_Process+0x238>)
 8002b8e:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <AUDIO_PLAYER_Process+0x238>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fdba 	bl	8000710 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <AUDIO_PLAYER_Process+0x220>)
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	701a      	strb	r2, [r3, #0]
    break;
 8002ba2:	e002      	b.n	8002baa <AUDIO_PLAYER_Process+0x216>

  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:
  default:
    break;
 8002ba4:	bf00      	nop
 8002ba6:	e000      	b.n	8002baa <AUDIO_PLAYER_Process+0x216>
    break;
 8002ba8:	bf00      	nop
  }
  return audio_error;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd90      	pop	{r4, r7, pc}
 8002bb4:	20010eb0 	.word	0x20010eb0
 8002bb8:	200001c4 	.word	0x200001c4
 8002bbc:	20010eb4 	.word	0x20010eb4
 8002bc0:	200112c0 	.word	0x200112c0
 8002bc4:	200081c4 	.word	0x200081c4
 8002bc8:	200101cc 	.word	0x200101cc
 8002bcc:	20000044 	.word	0x20000044

08002bd0 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d104      	bne.n	8002be6 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8002bde:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002be2:	2202      	movs	r2, #2
 8002be4:	701a      	strb	r2, [r3, #0]
  }
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	20010eb0 	.word	0x20010eb0
 8002bf4:	200001c4 	.word	0x200001c4

08002bf8 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d104      	bne.n	8002c0e <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8002c06:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
  }
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	20010eb0 	.word	0x20010eb0
 8002c1c:	200001c4 	.word	0x200001c4

08002c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c24:	480d      	ldr	r0, [pc, #52]	; (8002c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c26:	490e      	ldr	r1, [pc, #56]	; (8002c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c28:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c2c:	e002      	b.n	8002c34 <LoopCopyDataInit>

08002c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c32:	3304      	adds	r3, #4

08002c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c38:	d3f9      	bcc.n	8002c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c3a:	4a0b      	ldr	r2, [pc, #44]	; (8002c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c3c:	4c0b      	ldr	r4, [pc, #44]	; (8002c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c40:	e001      	b.n	8002c46 <LoopFillZerobss>

08002c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c44:	3204      	adds	r2, #4

08002c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c48:	d3fb      	bcc.n	8002c42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c4a:	f7ff fdf1 	bl	8002830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c4e:	f00f f877 	bl	8011d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c52:	f7ff f869 	bl	8001d28 <main>
  bx  lr    
 8002c56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c60:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8002c64:	08012c24 	.word	0x08012c24
  ldr r2, =_sbss
 8002c68:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002c6c:	20014aac 	.word	0x20014aac

08002c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c70:	e7fe      	b.n	8002c70 <ADC_IRQHandler>
	...

08002c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_Init+0x40>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <HAL_Init+0x40>)
 8002c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_Init+0x40>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <HAL_Init+0x40>)
 8002c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_Init+0x40>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <HAL_Init+0x40>)
 8002c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c9c:	2003      	movs	r0, #3
 8002c9e:	f000 f94f 	bl	8002f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca2:	200f      	movs	r0, #15
 8002ca4:	f000 f808 	bl	8002cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ca8:	f7ff fafc 	bl	80022a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00

08002cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_InitTick+0x54>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_InitTick+0x58>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f967 	bl	8002faa <HAL_SYSTICK_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00e      	b.n	8002d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b0f      	cmp	r3, #15
 8002cea:	d80a      	bhi.n	8002d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cec:	2200      	movs	r2, #0
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f000 f92f 	bl	8002f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cf8:	4a06      	ldr	r2, [pc, #24]	; (8002d14 <HAL_InitTick+0x5c>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e000      	b.n	8002d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000040 	.word	0x20000040
 8002d10:	2000004c 	.word	0x2000004c
 8002d14:	20000048 	.word	0x20000048

08002d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_IncTick+0x20>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x24>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4413      	add	r3, r2
 8002d28:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <HAL_IncTick+0x24>)
 8002d2a:	6013      	str	r3, [r2, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	2000004c 	.word	0x2000004c
 8002d3c:	20012318 	.word	0x20012318

08002d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return uwTick;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_GetTick+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20012318 	.word	0x20012318

08002d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d60:	f7ff ffee 	bl	8002d40 <HAL_GetTick>
 8002d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d005      	beq.n	8002d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_Delay+0x44>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d7e:	bf00      	nop
 8002d80:	f7ff ffde 	bl	8002d40 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d8f7      	bhi.n	8002d80 <HAL_Delay+0x28>
  {
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2000004c 	.word	0x2000004c

08002da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	60d3      	str	r3, [r2, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <__NVIC_GetPriorityGrouping+0x18>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	f003 0307 	and.w	r3, r3, #7
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	db0b      	blt.n	8002e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4907      	ldr	r1, [pc, #28]	; (8002e3c <__NVIC_EnableIRQ+0x38>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2001      	movs	r0, #1
 8002e26:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000e100 	.word	0xe000e100

08002e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	db0a      	blt.n	8002e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	490c      	ldr	r1, [pc, #48]	; (8002e8c <__NVIC_SetPriority+0x4c>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	440b      	add	r3, r1
 8002e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e68:	e00a      	b.n	8002e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4908      	ldr	r1, [pc, #32]	; (8002e90 <__NVIC_SetPriority+0x50>)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	3b04      	subs	r3, #4
 8002e78:	0112      	lsls	r2, r2, #4
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	761a      	strb	r2, [r3, #24]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000e100 	.word	0xe000e100
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	; 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f1c3 0307 	rsb	r3, r3, #7
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	bf28      	it	cs
 8002eb2:	2304      	movcs	r3, #4
 8002eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d902      	bls.n	8002ec4 <NVIC_EncodePriority+0x30>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3b03      	subs	r3, #3
 8002ec2:	e000      	b.n	8002ec6 <NVIC_EncodePriority+0x32>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002edc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	43d9      	mvns	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	4313      	orrs	r3, r2
         );
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f0c:	d301      	bcc.n	8002f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e00f      	b.n	8002f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <SysTick_Config+0x40>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1a:	210f      	movs	r1, #15
 8002f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f20:	f7ff ff8e 	bl	8002e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <SysTick_Config+0x40>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <SysTick_Config+0x40>)
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	e000e010 	.word	0xe000e010

08002f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff29 	bl	8002da0 <__NVIC_SetPriorityGrouping>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff3e 	bl	8002de8 <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff8e 	bl	8002e94 <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5d 	bl	8002e40 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff31 	bl	8002e04 <__NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffa2 	bl	8002efc <SysTick_Config>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff feb6 	bl	8002d40 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e099      	b.n	8003114 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003000:	e00f      	b.n	8003022 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003002:	f7ff fe9d 	bl	8002d40 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b05      	cmp	r3, #5
 800300e:	d908      	bls.n	8003022 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2203      	movs	r2, #3
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e078      	b.n	8003114 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e8      	bne.n	8003002 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4b38      	ldr	r3, [pc, #224]	; (800311c <HAL_DMA_Init+0x158>)
 800303c:	4013      	ands	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800304e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2b04      	cmp	r3, #4
 800307a:	d107      	bne.n	800308c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	4313      	orrs	r3, r2
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0307 	bic.w	r3, r3, #7
 80030a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d117      	bne.n	80030e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00e      	beq.n	80030e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fb3d 	bl	8003748 <DMA_CheckFifoParam>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2240      	movs	r2, #64	; 0x40
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030e2:	2301      	movs	r3, #1
 80030e4:	e016      	b.n	8003114 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 faf4 	bl	80036dc <DMA_CalcBaseAndBitshift>
 80030f4:	4603      	mov	r3, r0
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	223f      	movs	r2, #63	; 0x3f
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	f010803f 	.word	0xf010803f

08003120 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e050      	b.n	80031d4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d101      	bne.n	8003142 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800313e:	2302      	movs	r3, #2
 8003140:	e048      	b.n	80031d4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2200      	movs	r2, #0
 8003170:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2221      	movs	r2, #33	; 0x21
 8003180:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 faaa 	bl	80036dc <DMA_CalcBaseAndBitshift>
 8003188:	4603      	mov	r3, r0
 800318a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	223f      	movs	r2, #63	; 0x3f
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_DMA_Start_IT+0x26>
 80031fe:	2302      	movs	r3, #2
 8003200:	e040      	b.n	8003284 <HAL_DMA_Start_IT+0xa8>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d12f      	bne.n	8003276 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fa28 	bl	8003680 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	223f      	movs	r2, #63	; 0x3f
 8003236:	409a      	lsls	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0216 	orr.w	r2, r2, #22
 800324a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0208 	orr.w	r2, r2, #8
 8003262:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e005      	b.n	8003282 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800327e:	2302      	movs	r3, #2
 8003280:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003282:	7dfb      	ldrb	r3, [r7, #23]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800329a:	f7ff fd51 	bl	8002d40 <HAL_GetTick>
 800329e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d008      	beq.n	80032be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e052      	b.n	8003364 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0216 	bic.w	r2, r2, #22
 80032cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <HAL_DMA_Abort+0x62>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0208 	bic.w	r2, r2, #8
 80032fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330e:	e013      	b.n	8003338 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003310:	f7ff fd16 	bl	8002d40 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b05      	cmp	r3, #5
 800331c:	d90c      	bls.n	8003338 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2203      	movs	r2, #3
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e015      	b.n	8003364 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e4      	bne.n	8003310 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334a:	223f      	movs	r2, #63	; 0x3f
 800334c:	409a      	lsls	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003378:	4b92      	ldr	r3, [pc, #584]	; (80035c4 <HAL_DMA_IRQHandler+0x258>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a92      	ldr	r2, [pc, #584]	; (80035c8 <HAL_DMA_IRQHandler+0x25c>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0a9b      	lsrs	r3, r3, #10
 8003384:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	2208      	movs	r2, #8
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01a      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0204 	bic.w	r2, r2, #4
 80033be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	2208      	movs	r2, #8
 80033c6:	409a      	lsls	r2, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	2201      	movs	r2, #1
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d012      	beq.n	800340e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	2201      	movs	r2, #1
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f043 0202 	orr.w	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	2204      	movs	r2, #4
 8003414:	409a      	lsls	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d012      	beq.n	8003444 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00b      	beq.n	8003444 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	2204      	movs	r2, #4
 8003432:	409a      	lsls	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0204 	orr.w	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	2210      	movs	r2, #16
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d043      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d03c      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	2210      	movs	r2, #16
 8003468:	409a      	lsls	r2, r3
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d018      	beq.n	80034ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d024      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
 800349a:	e01f      	b.n	80034dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01b      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
 80034ac:	e016      	b.n	80034dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0208 	bic.w	r2, r2, #8
 80034ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	2220      	movs	r2, #32
 80034e2:	409a      	lsls	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 808e 	beq.w	800360a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8086 	beq.w	800360a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	2220      	movs	r2, #32
 8003504:	409a      	lsls	r2, r3
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b05      	cmp	r3, #5
 8003514:	d136      	bne.n	8003584 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0216 	bic.w	r2, r2, #22
 8003524:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003534:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <HAL_DMA_IRQHandler+0x1da>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0208 	bic.w	r2, r2, #8
 8003554:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	223f      	movs	r2, #63	; 0x3f
 800355c:	409a      	lsls	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003576:	2b00      	cmp	r3, #0
 8003578:	d07d      	beq.n	8003676 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
        }
        return;
 8003582:	e078      	b.n	8003676 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01c      	beq.n	80035cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d108      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d030      	beq.n	800360a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
 80035b0:	e02b      	b.n	800360a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d027      	beq.n	800360a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
 80035c2:	e022      	b.n	800360a <HAL_DMA_IRQHandler+0x29e>
 80035c4:	20000040 	.word	0x20000040
 80035c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0210 	bic.w	r2, r2, #16
 80035e8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	2b00      	cmp	r3, #0
 8003610:	d032      	beq.n	8003678 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d022      	beq.n	8003664 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2205      	movs	r2, #5
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3301      	adds	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	429a      	cmp	r2, r3
 8003640:	d307      	bcc.n	8003652 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f2      	bne.n	8003636 <HAL_DMA_IRQHandler+0x2ca>
 8003650:	e000      	b.n	8003654 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003652:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
 8003674:	e000      	b.n	8003678 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003676:	bf00      	nop
    }
  }
}
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop

08003680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800369c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d108      	bne.n	80036c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036be:	e007      	b.n	80036d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3b10      	subs	r3, #16
 80036ec:	4a14      	ldr	r2, [pc, #80]	; (8003740 <DMA_CalcBaseAndBitshift+0x64>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036f6:	4a13      	ldr	r2, [pc, #76]	; (8003744 <DMA_CalcBaseAndBitshift+0x68>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d909      	bls.n	800371e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	1d1a      	adds	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	659a      	str	r2, [r3, #88]	; 0x58
 800371c:	e007      	b.n	800372e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	aaaaaaab 	.word	0xaaaaaaab
 8003744:	08012784 	.word	0x08012784

08003748 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d11f      	bne.n	80037a2 <DMA_CheckFifoParam+0x5a>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d856      	bhi.n	8003816 <DMA_CheckFifoParam+0xce>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <DMA_CheckFifoParam+0x28>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003781 	.word	0x08003781
 8003774:	08003793 	.word	0x08003793
 8003778:	08003781 	.word	0x08003781
 800377c:	08003817 	.word	0x08003817
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d046      	beq.n	800381a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003790:	e043      	b.n	800381a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800379a:	d140      	bne.n	800381e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a0:	e03d      	b.n	800381e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037aa:	d121      	bne.n	80037f0 <DMA_CheckFifoParam+0xa8>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d837      	bhi.n	8003822 <DMA_CheckFifoParam+0xda>
 80037b2:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <DMA_CheckFifoParam+0x70>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	080037c9 	.word	0x080037c9
 80037bc:	080037cf 	.word	0x080037cf
 80037c0:	080037c9 	.word	0x080037c9
 80037c4:	080037e1 	.word	0x080037e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	e030      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d025      	beq.n	8003826 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037de:	e022      	b.n	8003826 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037e8:	d11f      	bne.n	800382a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ee:	e01c      	b.n	800382a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d903      	bls.n	80037fe <DMA_CheckFifoParam+0xb6>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d003      	beq.n	8003804 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037fc:	e018      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      break;
 8003802:	e015      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00e      	beq.n	800382e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      break;
 8003814:	e00b      	b.n	800382e <DMA_CheckFifoParam+0xe6>
      break;
 8003816:	bf00      	nop
 8003818:	e00a      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
 800381c:	e008      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800381e:	bf00      	nop
 8003820:	e006      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
 8003824:	e004      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;   
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <DMA_CheckFifoParam+0xe8>
      break;
 800382e:	bf00      	nop
    }
  } 
  
  return status; 
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e16b      	b.n	8003b34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	f040 815a 	bne.w	8003b2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d005      	beq.n	8003892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388e:	2b02      	cmp	r3, #2
 8003890:	d130      	bne.n	80038f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	2203      	movs	r2, #3
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c8:	2201      	movs	r2, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 0201 	and.w	r2, r3, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d017      	beq.n	8003930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d123      	bne.n	8003984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	08da      	lsrs	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3208      	adds	r2, #8
 800397e:	69b9      	ldr	r1, [r7, #24]
 8003980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80b4 	beq.w	8003b2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4b60      	ldr	r3, [pc, #384]	; (8003b4c <HAL_GPIO_Init+0x30c>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	4a5f      	ldr	r2, [pc, #380]	; (8003b4c <HAL_GPIO_Init+0x30c>)
 80039d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d4:	6453      	str	r3, [r2, #68]	; 0x44
 80039d6:	4b5d      	ldr	r3, [pc, #372]	; (8003b4c <HAL_GPIO_Init+0x30c>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e2:	4a5b      	ldr	r2, [pc, #364]	; (8003b50 <HAL_GPIO_Init+0x310>)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	3302      	adds	r3, #2
 80039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a52      	ldr	r2, [pc, #328]	; (8003b54 <HAL_GPIO_Init+0x314>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d02b      	beq.n	8003a66 <HAL_GPIO_Init+0x226>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a51      	ldr	r2, [pc, #324]	; (8003b58 <HAL_GPIO_Init+0x318>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d025      	beq.n	8003a62 <HAL_GPIO_Init+0x222>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a50      	ldr	r2, [pc, #320]	; (8003b5c <HAL_GPIO_Init+0x31c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01f      	beq.n	8003a5e <HAL_GPIO_Init+0x21e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4f      	ldr	r2, [pc, #316]	; (8003b60 <HAL_GPIO_Init+0x320>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d019      	beq.n	8003a5a <HAL_GPIO_Init+0x21a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a4e      	ldr	r2, [pc, #312]	; (8003b64 <HAL_GPIO_Init+0x324>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_GPIO_Init+0x216>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a4d      	ldr	r2, [pc, #308]	; (8003b68 <HAL_GPIO_Init+0x328>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00d      	beq.n	8003a52 <HAL_GPIO_Init+0x212>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4c      	ldr	r2, [pc, #304]	; (8003b6c <HAL_GPIO_Init+0x32c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <HAL_GPIO_Init+0x20e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4b      	ldr	r2, [pc, #300]	; (8003b70 <HAL_GPIO_Init+0x330>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_GPIO_Init+0x20a>
 8003a46:	2307      	movs	r3, #7
 8003a48:	e00e      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	e00c      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a4e:	2306      	movs	r3, #6
 8003a50:	e00a      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a52:	2305      	movs	r3, #5
 8003a54:	e008      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a56:	2304      	movs	r3, #4
 8003a58:	e006      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e004      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e002      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_GPIO_Init+0x228>
 8003a66:	2300      	movs	r3, #0
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	f002 0203 	and.w	r2, r2, #3
 8003a6e:	0092      	lsls	r2, r2, #2
 8003a70:	4093      	lsls	r3, r2
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a78:	4935      	ldr	r1, [pc, #212]	; (8003b50 <HAL_GPIO_Init+0x310>)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a86:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <HAL_GPIO_Init+0x334>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aaa:	4a32      	ldr	r2, [pc, #200]	; (8003b74 <HAL_GPIO_Init+0x334>)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ab0:	4b30      	ldr	r3, [pc, #192]	; (8003b74 <HAL_GPIO_Init+0x334>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <HAL_GPIO_Init+0x334>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ada:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <HAL_GPIO_Init+0x334>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003afe:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <HAL_GPIO_Init+0x334>)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b04:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <HAL_GPIO_Init+0x334>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b28:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <HAL_GPIO_Init+0x334>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3301      	adds	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	f67f ae90 	bls.w	800385c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3724      	adds	r7, #36	; 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40020000 	.word	0x40020000
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40021400 	.word	0x40021400
 8003b6c:	40021800 	.word	0x40021800
 8003b70:	40021c00 	.word	0x40021c00
 8003b74:	40013c00 	.word	0x40013c00

08003b78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	e0cd      	b.n	8003d30 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b94:	2201      	movs	r2, #1
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	f040 80bd 	bne.w	8003d2a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003bb0:	4a65      	ldr	r2, [pc, #404]	; (8003d48 <HAL_GPIO_DeInit+0x1d0>)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bbc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	220f      	movs	r2, #15
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a5d      	ldr	r2, [pc, #372]	; (8003d4c <HAL_GPIO_DeInit+0x1d4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d02b      	beq.n	8003c32 <HAL_GPIO_DeInit+0xba>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a5c      	ldr	r2, [pc, #368]	; (8003d50 <HAL_GPIO_DeInit+0x1d8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d025      	beq.n	8003c2e <HAL_GPIO_DeInit+0xb6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a5b      	ldr	r2, [pc, #364]	; (8003d54 <HAL_GPIO_DeInit+0x1dc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01f      	beq.n	8003c2a <HAL_GPIO_DeInit+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a5a      	ldr	r2, [pc, #360]	; (8003d58 <HAL_GPIO_DeInit+0x1e0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d019      	beq.n	8003c26 <HAL_GPIO_DeInit+0xae>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a59      	ldr	r2, [pc, #356]	; (8003d5c <HAL_GPIO_DeInit+0x1e4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_GPIO_DeInit+0xaa>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a58      	ldr	r2, [pc, #352]	; (8003d60 <HAL_GPIO_DeInit+0x1e8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00d      	beq.n	8003c1e <HAL_GPIO_DeInit+0xa6>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a57      	ldr	r2, [pc, #348]	; (8003d64 <HAL_GPIO_DeInit+0x1ec>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d007      	beq.n	8003c1a <HAL_GPIO_DeInit+0xa2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a56      	ldr	r2, [pc, #344]	; (8003d68 <HAL_GPIO_DeInit+0x1f0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d101      	bne.n	8003c16 <HAL_GPIO_DeInit+0x9e>
 8003c12:	2307      	movs	r3, #7
 8003c14:	e00e      	b.n	8003c34 <HAL_GPIO_DeInit+0xbc>
 8003c16:	2308      	movs	r3, #8
 8003c18:	e00c      	b.n	8003c34 <HAL_GPIO_DeInit+0xbc>
 8003c1a:	2306      	movs	r3, #6
 8003c1c:	e00a      	b.n	8003c34 <HAL_GPIO_DeInit+0xbc>
 8003c1e:	2305      	movs	r3, #5
 8003c20:	e008      	b.n	8003c34 <HAL_GPIO_DeInit+0xbc>
 8003c22:	2304      	movs	r3, #4
 8003c24:	e006      	b.n	8003c34 <HAL_GPIO_DeInit+0xbc>
 8003c26:	2303      	movs	r3, #3
 8003c28:	e004      	b.n	8003c34 <HAL_GPIO_DeInit+0xbc>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e002      	b.n	8003c34 <HAL_GPIO_DeInit+0xbc>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_GPIO_DeInit+0xbc>
 8003c32:	2300      	movs	r3, #0
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	f002 0203 	and.w	r2, r2, #3
 8003c3a:	0092      	lsls	r2, r2, #2
 8003c3c:	4093      	lsls	r3, r2
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d132      	bne.n	8003caa <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c44:	4b49      	ldr	r3, [pc, #292]	; (8003d6c <HAL_GPIO_DeInit+0x1f4>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	4947      	ldr	r1, [pc, #284]	; (8003d6c <HAL_GPIO_DeInit+0x1f4>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c52:	4b46      	ldr	r3, [pc, #280]	; (8003d6c <HAL_GPIO_DeInit+0x1f4>)
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	4944      	ldr	r1, [pc, #272]	; (8003d6c <HAL_GPIO_DeInit+0x1f4>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003c60:	4b42      	ldr	r3, [pc, #264]	; (8003d6c <HAL_GPIO_DeInit+0x1f4>)
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	43db      	mvns	r3, r3
 8003c68:	4940      	ldr	r1, [pc, #256]	; (8003d6c <HAL_GPIO_DeInit+0x1f4>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003c6e:	4b3f      	ldr	r3, [pc, #252]	; (8003d6c <HAL_GPIO_DeInit+0x1f4>)
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	493d      	ldr	r1, [pc, #244]	; (8003d6c <HAL_GPIO_DeInit+0x1f4>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	220f      	movs	r2, #15
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003c8c:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <HAL_GPIO_DeInit+0x1d0>)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	3302      	adds	r3, #2
 8003c94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	482a      	ldr	r0, [pc, #168]	; (8003d48 <HAL_GPIO_DeInit+0x1d0>)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	2103      	movs	r1, #3
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	401a      	ands	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	08da      	lsrs	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3208      	adds	r2, #8
 8003cc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	220f      	movs	r2, #15
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	08d2      	lsrs	r2, r2, #3
 8003ce0:	4019      	ands	r1, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3208      	adds	r2, #8
 8003ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2103      	movs	r1, #3
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	2101      	movs	r1, #1
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	401a      	ands	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	2103      	movs	r1, #3
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	401a      	ands	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b0f      	cmp	r3, #15
 8003d34:	f67f af2e 	bls.w	8003b94 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40013800 	.word	0x40013800
 8003d4c:	40020000 	.word	0x40020000
 8003d50:	40020400 	.word	0x40020400
 8003d54:	40020800 	.word	0x40020800
 8003d58:	40020c00 	.word	0x40020c00
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40021400 	.word	0x40021400
 8003d64:	40021800 	.word	0x40021800
 8003d68:	40021c00 	.word	0x40021c00
 8003d6c:	40013c00 	.word	0x40013c00

08003d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	807b      	strh	r3, [r7, #2]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d80:	787b      	ldrb	r3, [r7, #1]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d86:	887a      	ldrh	r2, [r7, #2]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d8c:	e003      	b.n	8003d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d8e:	887b      	ldrh	r3, [r7, #2]
 8003d90:	041a      	lsls	r2, r3, #16
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	619a      	str	r2, [r3, #24]
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dba:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd ff46 	bl	8001c54 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40013c00 	.word	0x40013c00

08003dd4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd6:	b08f      	sub	sp, #60	; 0x3c
 8003dd8:	af0a      	add	r7, sp, #40	; 0x28
 8003dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e054      	b.n	8003e90 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d106      	bne.n	8003e06 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f00d fcbd 	bl	8011780 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2203      	movs	r2, #3
 8003e0a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f004 fcaa 	bl	800877e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	687e      	ldr	r6, [r7, #4]
 8003e32:	466d      	mov	r5, sp
 8003e34:	f106 0410 	add.w	r4, r6, #16
 8003e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e44:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e48:	1d33      	adds	r3, r6, #4
 8003e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e4c:	6838      	ldr	r0, [r7, #0]
 8003e4e:	f004 fc24 	bl	800869a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f004 fca1 	bl	80087a0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	687e      	ldr	r6, [r7, #4]
 8003e66:	466d      	mov	r5, sp
 8003e68:	f106 0410 	add.w	r4, r6, #16
 8003e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e78:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e7c:	1d33      	adds	r3, r6, #4
 8003e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e80:	6838      	ldr	r0, [r7, #0]
 8003e82:	f004 fe07 	bl	8008a94 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e98 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b089      	sub	sp, #36	; 0x24
 8003e9c:	af04      	add	r7, sp, #16
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	70fb      	strb	r3, [r7, #3]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	70bb      	strb	r3, [r7, #2]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_HCD_HC_Init+0x28>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e076      	b.n	8003fae <HAL_HCD_HC_Init+0x116>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	212c      	movs	r1, #44	; 0x2c
 8003ece:	fb01 f303 	mul.w	r3, r1, r3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	333d      	adds	r3, #61	; 0x3d
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	212c      	movs	r1, #44	; 0x2c
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3338      	adds	r3, #56	; 0x38
 8003ee8:	787a      	ldrb	r2, [r7, #1]
 8003eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3340      	adds	r3, #64	; 0x40
 8003efa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003efc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	212c      	movs	r1, #44	; 0x2c
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	3339      	adds	r3, #57	; 0x39
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	212c      	movs	r1, #44	; 0x2c
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	333f      	adds	r3, #63	; 0x3f
 8003f1e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	78ba      	ldrb	r2, [r7, #2]
 8003f28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f2c:	b2d0      	uxtb	r0, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	212c      	movs	r1, #44	; 0x2c
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	333a      	adds	r3, #58	; 0x3a
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003f3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	da09      	bge.n	8003f5a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	212c      	movs	r1, #44	; 0x2c
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	333b      	adds	r3, #59	; 0x3b
 8003f54:	2201      	movs	r2, #1
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e008      	b.n	8003f6c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	212c      	movs	r1, #44	; 0x2c
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	333b      	adds	r3, #59	; 0x3b
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	212c      	movs	r1, #44	; 0x2c
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	333c      	adds	r3, #60	; 0x3c
 8003f7a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f7e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	787c      	ldrb	r4, [r7, #1]
 8003f86:	78ba      	ldrb	r2, [r7, #2]
 8003f88:	78f9      	ldrb	r1, [r7, #3]
 8003f8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f8c:	9302      	str	r3, [sp, #8]
 8003f8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	4623      	mov	r3, r4
 8003f9c:	f004 fef4 	bl	8008d88 <USB_HC_Init>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd90      	pop	{r4, r7, pc}

08003fb6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_HCD_HC_Halt+0x1e>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e00f      	b.n	8003ff4 <HAL_HCD_HC_Halt+0x3e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f005 f930 	bl	800924a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	4608      	mov	r0, r1
 8004006:	4611      	mov	r1, r2
 8004008:	461a      	mov	r2, r3
 800400a:	4603      	mov	r3, r0
 800400c:	70fb      	strb	r3, [r7, #3]
 800400e:	460b      	mov	r3, r1
 8004010:	70bb      	strb	r3, [r7, #2]
 8004012:	4613      	mov	r3, r2
 8004014:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	333b      	adds	r3, #59	; 0x3b
 8004024:	78ba      	ldrb	r2, [r7, #2]
 8004026:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	212c      	movs	r1, #44	; 0x2c
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	4413      	add	r3, r2
 8004034:	333f      	adds	r3, #63	; 0x3f
 8004036:	787a      	ldrb	r2, [r7, #1]
 8004038:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800403a:	7c3b      	ldrb	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d112      	bne.n	8004066 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	212c      	movs	r1, #44	; 0x2c
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	4413      	add	r3, r2
 800404c:	3342      	adds	r3, #66	; 0x42
 800404e:	2203      	movs	r2, #3
 8004050:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	212c      	movs	r1, #44	; 0x2c
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	4413      	add	r3, r2
 800405e:	333d      	adds	r3, #61	; 0x3d
 8004060:	7f3a      	ldrb	r2, [r7, #28]
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e008      	b.n	8004078 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	212c      	movs	r1, #44	; 0x2c
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	3342      	adds	r3, #66	; 0x42
 8004074:	2202      	movs	r2, #2
 8004076:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004078:	787b      	ldrb	r3, [r7, #1]
 800407a:	2b03      	cmp	r3, #3
 800407c:	f200 80c6 	bhi.w	800420c <HAL_HCD_HC_SubmitRequest+0x210>
 8004080:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	08004099 	.word	0x08004099
 800408c:	080041f9 	.word	0x080041f9
 8004090:	080040fd 	.word	0x080040fd
 8004094:	0800417b 	.word	0x0800417b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004098:	7c3b      	ldrb	r3, [r7, #16]
 800409a:	2b01      	cmp	r3, #1
 800409c:	f040 80b8 	bne.w	8004210 <HAL_HCD_HC_SubmitRequest+0x214>
 80040a0:	78bb      	ldrb	r3, [r7, #2]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f040 80b4 	bne.w	8004210 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80040a8:	8b3b      	ldrh	r3, [r7, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	212c      	movs	r1, #44	; 0x2c
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	3355      	adds	r3, #85	; 0x55
 80040bc:	2201      	movs	r2, #1
 80040be:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	212c      	movs	r1, #44	; 0x2c
 80040c6:	fb01 f303 	mul.w	r3, r1, r3
 80040ca:	4413      	add	r3, r2
 80040cc:	3355      	adds	r3, #85	; 0x55
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	212c      	movs	r1, #44	; 0x2c
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	4413      	add	r3, r2
 80040e0:	3342      	adds	r3, #66	; 0x42
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80040e6:	e093      	b.n	8004210 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	212c      	movs	r1, #44	; 0x2c
 80040ee:	fb01 f303 	mul.w	r3, r1, r3
 80040f2:	4413      	add	r3, r2
 80040f4:	3342      	adds	r3, #66	; 0x42
 80040f6:	2202      	movs	r2, #2
 80040f8:	701a      	strb	r2, [r3, #0]
      break;
 80040fa:	e089      	b.n	8004210 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80040fc:	78bb      	ldrb	r3, [r7, #2]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d11d      	bne.n	800413e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	212c      	movs	r1, #44	; 0x2c
 8004108:	fb01 f303 	mul.w	r3, r1, r3
 800410c:	4413      	add	r3, r2
 800410e:	3355      	adds	r3, #85	; 0x55
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	212c      	movs	r1, #44	; 0x2c
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	4413      	add	r3, r2
 8004122:	3342      	adds	r3, #66	; 0x42
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004128:	e073      	b.n	8004212 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	3342      	adds	r3, #66	; 0x42
 8004138:	2202      	movs	r2, #2
 800413a:	701a      	strb	r2, [r3, #0]
      break;
 800413c:	e069      	b.n	8004212 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	212c      	movs	r1, #44	; 0x2c
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	4413      	add	r3, r2
 800414a:	3354      	adds	r3, #84	; 0x54
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	3342      	adds	r3, #66	; 0x42
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]
      break;
 8004164:	e055      	b.n	8004212 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	212c      	movs	r1, #44	; 0x2c
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	4413      	add	r3, r2
 8004172:	3342      	adds	r3, #66	; 0x42
 8004174:	2202      	movs	r2, #2
 8004176:	701a      	strb	r2, [r3, #0]
      break;
 8004178:	e04b      	b.n	8004212 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800417a:	78bb      	ldrb	r3, [r7, #2]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d11d      	bne.n	80041bc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	212c      	movs	r1, #44	; 0x2c
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	4413      	add	r3, r2
 800418c:	3355      	adds	r3, #85	; 0x55
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	212c      	movs	r1, #44	; 0x2c
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	4413      	add	r3, r2
 80041a0:	3342      	adds	r3, #66	; 0x42
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80041a6:	e034      	b.n	8004212 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	212c      	movs	r1, #44	; 0x2c
 80041ae:	fb01 f303 	mul.w	r3, r1, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	3342      	adds	r3, #66	; 0x42
 80041b6:	2202      	movs	r2, #2
 80041b8:	701a      	strb	r2, [r3, #0]
      break;
 80041ba:	e02a      	b.n	8004212 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	212c      	movs	r1, #44	; 0x2c
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	4413      	add	r3, r2
 80041c8:	3354      	adds	r3, #84	; 0x54
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d109      	bne.n	80041e4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	212c      	movs	r1, #44	; 0x2c
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	3342      	adds	r3, #66	; 0x42
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
      break;
 80041e2:	e016      	b.n	8004212 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	3342      	adds	r3, #66	; 0x42
 80041f2:	2202      	movs	r2, #2
 80041f4:	701a      	strb	r2, [r3, #0]
      break;
 80041f6:	e00c      	b.n	8004212 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	3342      	adds	r3, #66	; 0x42
 8004206:	2200      	movs	r2, #0
 8004208:	701a      	strb	r2, [r3, #0]
      break;
 800420a:	e002      	b.n	8004212 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800420c:	bf00      	nop
 800420e:	e000      	b.n	8004212 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004210:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	3344      	adds	r3, #68	; 0x44
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	8b3a      	ldrh	r2, [r7, #24]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	202c      	movs	r0, #44	; 0x2c
 800422c:	fb00 f303 	mul.w	r3, r0, r3
 8004230:	440b      	add	r3, r1
 8004232:	334c      	adds	r3, #76	; 0x4c
 8004234:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	212c      	movs	r1, #44	; 0x2c
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	4413      	add	r3, r2
 8004242:	3360      	adds	r3, #96	; 0x60
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	212c      	movs	r1, #44	; 0x2c
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	4413      	add	r3, r2
 8004254:	3350      	adds	r3, #80	; 0x50
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	3339      	adds	r3, #57	; 0x39
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	212c      	movs	r1, #44	; 0x2c
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	3361      	adds	r3, #97	; 0x61
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	222c      	movs	r2, #44	; 0x2c
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	3338      	adds	r3, #56	; 0x38
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	18d1      	adds	r1, r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	f004 fe84 	bl	8008fa4 <USB_HC_StartXfer>
 800429c:	4603      	mov	r3, r0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop

080042a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f004 fba7 	bl	8008a12 <USB_GetMode>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	f040 80f6 	bne.w	80044b8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 fb8b 	bl	80089ec <USB_ReadInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80ec 	beq.w	80044b6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f004 fb82 	bl	80089ec <USB_ReadInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f2:	d104      	bne.n	80042fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80042fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f004 fb72 	bl	80089ec <USB_ReadInterrupts>
 8004308:	4603      	mov	r3, r0
 800430a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800430e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004312:	d104      	bne.n	800431e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800431c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f004 fb62 	bl	80089ec <USB_ReadInterrupts>
 8004328:	4603      	mov	r3, r0
 800432a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800432e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004332:	d104      	bne.n	800433e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800433c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f004 fb52 	bl	80089ec <USB_ReadInterrupts>
 8004348:	4603      	mov	r3, r0
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d103      	bne.n	800435a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2202      	movs	r2, #2
 8004358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f004 fb44 	bl	80089ec <USB_ReadInterrupts>
 8004364:	4603      	mov	r3, r0
 8004366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800436a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800436e:	d11c      	bne.n	80043aa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004378:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10f      	bne.n	80043aa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800438a:	2110      	movs	r1, #16
 800438c:	6938      	ldr	r0, [r7, #16]
 800438e:	f004 fa53 	bl	8008838 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004392:	6938      	ldr	r0, [r7, #16]
 8004394:	f004 fa74 	bl	8008880 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f004 fc2c 	bl	8008bfc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f00d fa69 	bl	801187c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f004 fb1c 	bl	80089ec <USB_ReadInterrupts>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043be:	d102      	bne.n	80043c6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f001 fa03 	bl	80057cc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f004 fb0e 	bl	80089ec <USB_ReadInterrupts>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d106      	bne.n	80043e8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f00d fa32 	bl	8011844 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2208      	movs	r2, #8
 80043e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f004 fafd 	bl	80089ec <USB_ReadInterrupts>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d101      	bne.n	8004400 <HAL_HCD_IRQHandler+0x158>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <HAL_HCD_IRQHandler+0x15a>
 8004400:	2300      	movs	r3, #0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d012      	beq.n	800442c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699a      	ldr	r2, [r3, #24]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0210 	bic.w	r2, r2, #16
 8004414:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 f906 	bl	8005628 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0210 	orr.w	r2, r2, #16
 800442a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f004 fadb 	bl	80089ec <USB_ReadInterrupts>
 8004436:	4603      	mov	r3, r0
 8004438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004440:	d13a      	bne.n	80044b8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f004 feee 	bl	8009228 <USB_HC_ReadInterrupt>
 800444c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e025      	b.n	80044a0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d018      	beq.n	800449a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800447a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447e:	d106      	bne.n	800448e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8ab 	bl	80045e2 <HCD_HC_IN_IRQHandler>
 800448c:	e005      	b.n	800449a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	4619      	mov	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fcc6 	bl	8004e26 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	3301      	adds	r3, #1
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d3d4      	bcc.n	8004454 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044b2:	615a      	str	r2, [r3, #20]
 80044b4:	e000      	b.n	80044b8 <HAL_HCD_IRQHandler+0x210>
      return;
 80044b6:	bf00      	nop
    }
  }
}
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_HCD_Start+0x16>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e013      	b.n	80044fc <HAL_HCD_Start+0x3e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2101      	movs	r1, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	f004 fbee 	bl	8008cc4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f004 f935 	bl	800875c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_HCD_Stop+0x16>
 8004516:	2302      	movs	r3, #2
 8004518:	e00d      	b.n	8004536 <HAL_HCD_Stop+0x32>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f004 ffe8 	bl	80094fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f004 fb90 	bl	8008c70 <USB_ResetPort>
 8004550:	4603      	mov	r3, r0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	212c      	movs	r1, #44	; 0x2c
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	4413      	add	r3, r2
 8004572:	3360      	adds	r3, #96	; 0x60
 8004574:	781b      	ldrb	r3, [r3, #0]
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	460b      	mov	r3, r1
 800458c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	212c      	movs	r1, #44	; 0x2c
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	4413      	add	r3, r2
 800459a:	3350      	adds	r3, #80	; 0x50
 800459c:	681b      	ldr	r3, [r3, #0]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f004 fbd4 	bl	8008d64 <USB_GetCurrentFrame>
 80045bc:	4603      	mov	r3, r0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f004 fbaf 	bl	8008d36 <USB_GetHostSpeed>
 80045d8:	4603      	mov	r3, r0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b086      	sub	sp, #24
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	460b      	mov	r3, r1
 80045ec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b04      	cmp	r3, #4
 8004610:	d119      	bne.n	8004646 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4413      	add	r3, r2
 800461a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461e:	461a      	mov	r2, r3
 8004620:	2304      	movs	r3, #4
 8004622:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	440a      	add	r2, r1
 800463a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800463e:	f043 0302 	orr.w	r3, r3, #2
 8004642:	60d3      	str	r3, [r2, #12]
 8004644:	e101      	b.n	800484a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4413      	add	r3, r2
 800464e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465c:	d12b      	bne.n	80046b6 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4413      	add	r3, r2
 8004666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466a:	461a      	mov	r2, r3
 800466c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004670:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3361      	adds	r3, #97	; 0x61
 8004680:	2207      	movs	r2, #7
 8004682:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4413      	add	r3, r2
 800468c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	0151      	lsls	r1, r2, #5
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	440a      	add	r2, r1
 800469a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800469e:	f043 0302 	orr.w	r3, r3, #2
 80046a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	4611      	mov	r1, r2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f004 fdcb 	bl	800924a <USB_HC_Halt>
 80046b4:	e0c9      	b.n	800484a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d109      	bne.n	80046e0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d8:	461a      	mov	r2, r3
 80046da:	2320      	movs	r3, #32
 80046dc:	6093      	str	r3, [r2, #8]
 80046de:	e0b4      	b.n	800484a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d133      	bne.n	800475e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	440a      	add	r2, r1
 800470c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004710:	f043 0302 	orr.w	r3, r3, #2
 8004714:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	212c      	movs	r1, #44	; 0x2c
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	4413      	add	r3, r2
 8004722:	3361      	adds	r3, #97	; 0x61
 8004724:	2205      	movs	r2, #5
 8004726:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004734:	461a      	mov	r2, r3
 8004736:	2310      	movs	r3, #16
 8004738:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4413      	add	r3, r2
 8004742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004746:	461a      	mov	r2, r3
 8004748:	2308      	movs	r3, #8
 800474a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f004 fd77 	bl	800924a <USB_HC_Halt>
 800475c:	e075      	b.n	800484a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004774:	d134      	bne.n	80047e0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4413      	add	r3, r2
 800477e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	0151      	lsls	r1, r2, #5
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	440a      	add	r2, r1
 800478c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004790:	f043 0302 	orr.w	r3, r3, #2
 8004794:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	212c      	movs	r1, #44	; 0x2c
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	3361      	adds	r3, #97	; 0x61
 80047a4:	2208      	movs	r2, #8
 80047a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b4:	461a      	mov	r2, r3
 80047b6:	2310      	movs	r3, #16
 80047b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c6:	461a      	mov	r2, r3
 80047c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	4611      	mov	r1, r2
 80047d8:	4618      	mov	r0, r3
 80047da:	f004 fd36 	bl	800924a <USB_HC_Halt>
 80047de:	e034      	b.n	800484a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	2b80      	cmp	r3, #128	; 0x80
 80047f4:	d129      	bne.n	800484a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	440a      	add	r2, r1
 800480c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	212c      	movs	r1, #44	; 0x2c
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	4413      	add	r3, r2
 8004822:	3361      	adds	r3, #97	; 0x61
 8004824:	2206      	movs	r2, #6
 8004826:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	4611      	mov	r1, r2
 8004832:	4618      	mov	r0, r3
 8004834:	f004 fd09 	bl	800924a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004844:	461a      	mov	r2, r3
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4413      	add	r3, r2
 8004852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800485c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004860:	d122      	bne.n	80048a8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4413      	add	r3, r2
 800486a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	440a      	add	r2, r1
 8004878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800487c:	f043 0302 	orr.w	r3, r3, #2
 8004880:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	4611      	mov	r1, r2
 800488c:	4618      	mov	r0, r3
 800488e:	f004 fcdc 	bl	800924a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4413      	add	r3, r2
 800489a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489e:	461a      	mov	r2, r3
 80048a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048a4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80048a6:	e2ba      	b.n	8004e1e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	f040 811b 	bne.w	8004af6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d019      	beq.n	80048fc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	212c      	movs	r1, #44	; 0x2c
 80048ce:	fb01 f303 	mul.w	r3, r1, r3
 80048d2:	4413      	add	r3, r2
 80048d4:	3348      	adds	r3, #72	; 0x48
 80048d6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	0159      	lsls	r1, r3, #5
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	440b      	add	r3, r1
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	202c      	movs	r0, #44	; 0x2c
 80048f2:	fb00 f303 	mul.w	r3, r0, r3
 80048f6:	440b      	add	r3, r1
 80048f8:	3350      	adds	r3, #80	; 0x50
 80048fa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	212c      	movs	r1, #44	; 0x2c
 8004902:	fb01 f303 	mul.w	r3, r1, r3
 8004906:	4413      	add	r3, r2
 8004908:	3361      	adds	r3, #97	; 0x61
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	212c      	movs	r1, #44	; 0x2c
 8004914:	fb01 f303 	mul.w	r3, r1, r3
 8004918:	4413      	add	r3, r2
 800491a:	335c      	adds	r3, #92	; 0x5c
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492c:	461a      	mov	r2, r3
 800492e:	2301      	movs	r3, #1
 8004930:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	212c      	movs	r1, #44	; 0x2c
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	4413      	add	r3, r2
 800493e:	333f      	adds	r3, #63	; 0x3f
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	212c      	movs	r1, #44	; 0x2c
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	4413      	add	r3, r2
 8004952:	333f      	adds	r3, #63	; 0x3f
 8004954:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004956:	2b02      	cmp	r3, #2
 8004958:	d121      	bne.n	800499e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4413      	add	r3, r2
 8004962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	440a      	add	r2, r1
 8004970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f004 fc60 	bl	800924a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4413      	add	r3, r2
 8004992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004996:	461a      	mov	r2, r3
 8004998:	2310      	movs	r3, #16
 800499a:	6093      	str	r3, [r2, #8]
 800499c:	e066      	b.n	8004a6c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	333f      	adds	r3, #63	; 0x3f
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d127      	bne.n	8004a02 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	0151      	lsls	r1, r2, #5
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	440a      	add	r2, r1
 80049c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049d0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	212c      	movs	r1, #44	; 0x2c
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	4413      	add	r3, r2
 80049de:	3360      	adds	r3, #96	; 0x60
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	b2d9      	uxtb	r1, r3
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	202c      	movs	r0, #44	; 0x2c
 80049ee:	fb00 f303 	mul.w	r3, r0, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	3360      	adds	r3, #96	; 0x60
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f00c ff4c 	bl	8011898 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a00:	e034      	b.n	8004a6c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	212c      	movs	r1, #44	; 0x2c
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	333f      	adds	r3, #63	; 0x3f
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d12a      	bne.n	8004a6c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	212c      	movs	r1, #44	; 0x2c
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	3360      	adds	r3, #96	; 0x60
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	3354      	adds	r3, #84	; 0x54
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	f083 0301 	eor.w	r3, r3, #1
 8004a3c:	b2d8      	uxtb	r0, r3
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	212c      	movs	r1, #44	; 0x2c
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	3354      	adds	r3, #84	; 0x54
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	b2d9      	uxtb	r1, r3
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	202c      	movs	r0, #44	; 0x2c
 8004a5a:	fb00 f303 	mul.w	r3, r0, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	3360      	adds	r3, #96	; 0x60
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f00c ff16 	bl	8011898 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d12b      	bne.n	8004acc <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	212c      	movs	r1, #44	; 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3348      	adds	r3, #72	; 0x48
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	202c      	movs	r0, #44	; 0x2c
 8004a8a:	fb00 f202 	mul.w	r2, r0, r2
 8004a8e:	440a      	add	r2, r1
 8004a90:	3240      	adds	r2, #64	; 0x40
 8004a92:	8812      	ldrh	r2, [r2, #0]
 8004a94:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 81be 	beq.w	8004e1e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	212c      	movs	r1, #44	; 0x2c
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	4413      	add	r3, r2
 8004aae:	3354      	adds	r3, #84	; 0x54
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	f083 0301 	eor.w	r3, r3, #1
 8004ab6:	b2d8      	uxtb	r0, r3
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3354      	adds	r3, #84	; 0x54
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	701a      	strb	r2, [r3, #0]
}
 8004aca:	e1a8      	b.n	8004e1e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3354      	adds	r3, #84	; 0x54
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	f083 0301 	eor.w	r3, r3, #1
 8004ae0:	b2d8      	uxtb	r0, r3
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	212c      	movs	r1, #44	; 0x2c
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	3354      	adds	r3, #84	; 0x54
 8004af0:	4602      	mov	r2, r0
 8004af2:	701a      	strb	r2, [r3, #0]
}
 8004af4:	e193      	b.n	8004e1e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	f040 8106 	bne.w	8004d1a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b28:	f023 0302 	bic.w	r3, r3, #2
 8004b2c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	212c      	movs	r1, #44	; 0x2c
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	3361      	adds	r3, #97	; 0x61
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d109      	bne.n	8004b56 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	212c      	movs	r1, #44	; 0x2c
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	3360      	adds	r3, #96	; 0x60
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	e0c9      	b.n	8004cea <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	212c      	movs	r1, #44	; 0x2c
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	4413      	add	r3, r2
 8004b62:	3361      	adds	r3, #97	; 0x61
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b05      	cmp	r3, #5
 8004b68:	d109      	bne.n	8004b7e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	212c      	movs	r1, #44	; 0x2c
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	3360      	adds	r3, #96	; 0x60
 8004b78:	2205      	movs	r2, #5
 8004b7a:	701a      	strb	r2, [r3, #0]
 8004b7c:	e0b5      	b.n	8004cea <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	212c      	movs	r1, #44	; 0x2c
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	3361      	adds	r3, #97	; 0x61
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d009      	beq.n	8004ba6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	212c      	movs	r1, #44	; 0x2c
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3361      	adds	r3, #97	; 0x61
 8004ba0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d150      	bne.n	8004c48 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	212c      	movs	r1, #44	; 0x2c
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	335c      	adds	r3, #92	; 0x5c
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	202c      	movs	r0, #44	; 0x2c
 8004bbe:	fb00 f303 	mul.w	r3, r0, r3
 8004bc2:	440b      	add	r3, r1
 8004bc4:	335c      	adds	r3, #92	; 0x5c
 8004bc6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	212c      	movs	r1, #44	; 0x2c
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	335c      	adds	r3, #92	; 0x5c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d912      	bls.n	8004c02 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	335c      	adds	r3, #92	; 0x5c
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	212c      	movs	r1, #44	; 0x2c
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3360      	adds	r3, #96	; 0x60
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c00:	e073      	b.n	8004cea <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	212c      	movs	r1, #44	; 0x2c
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	3360      	adds	r3, #96	; 0x60
 8004c10:	2202      	movs	r2, #2
 8004c12:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c2a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c32:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c40:	461a      	mov	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c46:	e050      	b.n	8004cea <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	212c      	movs	r1, #44	; 0x2c
 8004c4e:	fb01 f303 	mul.w	r3, r1, r3
 8004c52:	4413      	add	r3, r2
 8004c54:	3361      	adds	r3, #97	; 0x61
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d122      	bne.n	8004ca2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	212c      	movs	r1, #44	; 0x2c
 8004c62:	fb01 f303 	mul.w	r3, r1, r3
 8004c66:	4413      	add	r3, r2
 8004c68:	3360      	adds	r3, #96	; 0x60
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c84:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c8c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	e023      	b.n	8004cea <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	3361      	adds	r3, #97	; 0x61
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b07      	cmp	r3, #7
 8004cb4:	d119      	bne.n	8004cea <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	212c      	movs	r1, #44	; 0x2c
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	335c      	adds	r3, #92	; 0x5c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	202c      	movs	r0, #44	; 0x2c
 8004cce:	fb00 f303 	mul.w	r3, r0, r3
 8004cd2:	440b      	add	r3, r1
 8004cd4:	335c      	adds	r3, #92	; 0x5c
 8004cd6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	212c      	movs	r1, #44	; 0x2c
 8004cde:	fb01 f303 	mul.w	r3, r1, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3360      	adds	r3, #96	; 0x60
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	b2d9      	uxtb	r1, r3
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	202c      	movs	r0, #44	; 0x2c
 8004d06:	fb00 f303 	mul.w	r3, r0, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3360      	adds	r3, #96	; 0x60
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	461a      	mov	r2, r3
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f00c fdc0 	bl	8011898 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d18:	e081      	b.n	8004e1e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d176      	bne.n	8004e1e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	212c      	movs	r1, #44	; 0x2c
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	333f      	adds	r3, #63	; 0x3f
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d121      	bne.n	8004d88 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	212c      	movs	r1, #44	; 0x2c
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	4413      	add	r3, r2
 8004d50:	335c      	adds	r3, #92	; 0x5c
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d70:	f043 0302 	orr.w	r3, r3, #2
 8004d74:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f004 fa62 	bl	800924a <USB_HC_Halt>
 8004d86:	e041      	b.n	8004e0c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	212c      	movs	r1, #44	; 0x2c
 8004d8e:	fb01 f303 	mul.w	r3, r1, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	333f      	adds	r3, #63	; 0x3f
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d009      	beq.n	8004db0 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	212c      	movs	r1, #44	; 0x2c
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	4413      	add	r3, r2
 8004da8:	333f      	adds	r3, #63	; 0x3f
 8004daa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d12d      	bne.n	8004e0c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	212c      	movs	r1, #44	; 0x2c
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	335c      	adds	r3, #92	; 0x5c
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d120      	bne.n	8004e0c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	212c      	movs	r1, #44	; 0x2c
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3361      	adds	r3, #97	; 0x61
 8004dd8:	2203      	movs	r2, #3
 8004dda:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004df6:	f043 0302 	orr.w	r3, r3, #2
 8004dfa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f004 fa1f 	bl	800924a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e18:	461a      	mov	r2, r3
 8004e1a:	2310      	movs	r3, #16
 8004e1c:	6093      	str	r3, [r2, #8]
}
 8004e1e:	bf00      	nop
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b088      	sub	sp, #32
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d119      	bne.n	8004e8a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e62:	461a      	mov	r2, r3
 8004e64:	2304      	movs	r3, #4
 8004e66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e82:	f043 0302 	orr.w	r3, r3, #2
 8004e86:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004e88:	e3ca      	b.n	8005620 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d13e      	bne.n	8004f1e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eac:	461a      	mov	r2, r3
 8004eae:	2320      	movs	r3, #32
 8004eb0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	212c      	movs	r1, #44	; 0x2c
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	333d      	adds	r3, #61	; 0x3d
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	f040 83ac 	bne.w	8005620 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	212c      	movs	r1, #44	; 0x2c
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	333d      	adds	r3, #61	; 0x3d
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3360      	adds	r3, #96	; 0x60
 8004ee8:	2202      	movs	r2, #2
 8004eea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f06:	f043 0302 	orr.w	r3, r3, #2
 8004f0a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	4611      	mov	r1, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f004 f997 	bl	800924a <USB_HC_Halt>
}
 8004f1c:	e380      	b.n	8005620 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f34:	d122      	bne.n	8004f7c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f004 f972 	bl	800924a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f72:	461a      	mov	r2, r3
 8004f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f78:	6093      	str	r3, [r2, #8]
}
 8004f7a:	e351      	b.n	8005620 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d150      	bne.n	8005034 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	212c      	movs	r1, #44	; 0x2c
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	335c      	adds	r3, #92	; 0x5c
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d111      	bne.n	8004fde <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	212c      	movs	r1, #44	; 0x2c
 8004fc0:	fb01 f303 	mul.w	r3, r1, r3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	333d      	adds	r3, #61	; 0x3d
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd8:	461a      	mov	r2, r3
 8004fda:	2340      	movs	r3, #64	; 0x40
 8004fdc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff8:	f043 0302 	orr.w	r3, r3, #2
 8004ffc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f004 f91e 	bl	800924a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	461a      	mov	r2, r3
 800501c:	2301      	movs	r3, #1
 800501e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	212c      	movs	r1, #44	; 0x2c
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	4413      	add	r3, r2
 800502c:	3361      	adds	r3, #97	; 0x61
 800502e:	2201      	movs	r2, #1
 8005030:	701a      	strb	r2, [r3, #0]
}
 8005032:	e2f5      	b.n	8005620 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	4413      	add	r3, r2
 800503c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b40      	cmp	r3, #64	; 0x40
 8005048:	d13c      	bne.n	80050c4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	212c      	movs	r1, #44	; 0x2c
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	4413      	add	r3, r2
 8005056:	3361      	adds	r3, #97	; 0x61
 8005058:	2204      	movs	r2, #4
 800505a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	212c      	movs	r1, #44	; 0x2c
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	4413      	add	r3, r2
 8005068:	333d      	adds	r3, #61	; 0x3d
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	212c      	movs	r1, #44	; 0x2c
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	4413      	add	r3, r2
 800507a:	335c      	adds	r3, #92	; 0x5c
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	440a      	add	r2, r1
 8005096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800509a:	f043 0302 	orr.w	r3, r3, #2
 800509e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f004 f8cd 	bl	800924a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050bc:	461a      	mov	r2, r3
 80050be:	2340      	movs	r3, #64	; 0x40
 80050c0:	6093      	str	r3, [r2, #8]
}
 80050c2:	e2ad      	b.n	8005620 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d12a      	bne.n	8005130 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e6:	461a      	mov	r2, r3
 80050e8:	2308      	movs	r3, #8
 80050ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	440a      	add	r2, r1
 8005102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005106:	f043 0302 	orr.w	r3, r3, #2
 800510a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f004 f897 	bl	800924a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	212c      	movs	r1, #44	; 0x2c
 8005122:	fb01 f303 	mul.w	r3, r1, r3
 8005126:	4413      	add	r3, r2
 8005128:	3361      	adds	r3, #97	; 0x61
 800512a:	2205      	movs	r2, #5
 800512c:	701a      	strb	r2, [r3, #0]
}
 800512e:	e277      	b.n	8005620 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b10      	cmp	r3, #16
 8005144:	d150      	bne.n	80051e8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	212c      	movs	r1, #44	; 0x2c
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	4413      	add	r3, r2
 8005152:	335c      	adds	r3, #92	; 0x5c
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	212c      	movs	r1, #44	; 0x2c
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	4413      	add	r3, r2
 8005164:	3361      	adds	r3, #97	; 0x61
 8005166:	2203      	movs	r2, #3
 8005168:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	212c      	movs	r1, #44	; 0x2c
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	4413      	add	r3, r2
 8005176:	333d      	adds	r3, #61	; 0x3d
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d112      	bne.n	80051a4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	212c      	movs	r1, #44	; 0x2c
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	4413      	add	r3, r2
 800518a:	333c      	adds	r3, #60	; 0x3c
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d108      	bne.n	80051a4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	212c      	movs	r1, #44	; 0x2c
 8005198:	fb01 f303 	mul.w	r3, r1, r3
 800519c:	4413      	add	r3, r2
 800519e:	333d      	adds	r3, #61	; 0x3d
 80051a0:	2201      	movs	r2, #1
 80051a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051be:	f043 0302 	orr.w	r3, r3, #2
 80051c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	4611      	mov	r1, r2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f004 f83b 	bl	800924a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e0:	461a      	mov	r2, r3
 80051e2:	2310      	movs	r3, #16
 80051e4:	6093      	str	r3, [r2, #8]
}
 80051e6:	e21b      	b.n	8005620 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fa:	2b80      	cmp	r3, #128	; 0x80
 80051fc:	d174      	bne.n	80052e8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d121      	bne.n	800524a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	212c      	movs	r1, #44	; 0x2c
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	4413      	add	r3, r2
 8005212:	3361      	adds	r3, #97	; 0x61
 8005214:	2206      	movs	r2, #6
 8005216:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	0151      	lsls	r1, r2, #5
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	440a      	add	r2, r1
 800522e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005232:	f043 0302 	orr.w	r3, r3, #2
 8005236:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	4611      	mov	r1, r2
 8005242:	4618      	mov	r0, r3
 8005244:	f004 f801 	bl	800924a <USB_HC_Halt>
 8005248:	e044      	b.n	80052d4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	212c      	movs	r1, #44	; 0x2c
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	4413      	add	r3, r2
 8005256:	335c      	adds	r3, #92	; 0x5c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	202c      	movs	r0, #44	; 0x2c
 8005262:	fb00 f303 	mul.w	r3, r0, r3
 8005266:	440b      	add	r3, r1
 8005268:	335c      	adds	r3, #92	; 0x5c
 800526a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	212c      	movs	r1, #44	; 0x2c
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	4413      	add	r3, r2
 8005278:	335c      	adds	r3, #92	; 0x5c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d920      	bls.n	80052c2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	212c      	movs	r1, #44	; 0x2c
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	4413      	add	r3, r2
 800528c:	335c      	adds	r3, #92	; 0x5c
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	212c      	movs	r1, #44	; 0x2c
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	4413      	add	r3, r2
 800529e:	3360      	adds	r3, #96	; 0x60
 80052a0:	2204      	movs	r2, #4
 80052a2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	b2d9      	uxtb	r1, r3
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	202c      	movs	r0, #44	; 0x2c
 80052ae:	fb00 f303 	mul.w	r3, r0, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	3360      	adds	r3, #96	; 0x60
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f00c faec 	bl	8011898 <HAL_HCD_HC_NotifyURBChange_Callback>
 80052c0:	e008      	b.n	80052d4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	212c      	movs	r1, #44	; 0x2c
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	4413      	add	r3, r2
 80052ce:	3360      	adds	r3, #96	; 0x60
 80052d0:	2202      	movs	r2, #2
 80052d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	461a      	mov	r2, r3
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	6093      	str	r3, [r2, #8]
}
 80052e6:	e19b      	b.n	8005620 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052fe:	d134      	bne.n	800536a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	4413      	add	r3, r2
 8005308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	440a      	add	r2, r1
 8005316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800531a:	f043 0302 	orr.w	r3, r3, #2
 800531e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	4611      	mov	r1, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f003 ff8d 	bl	800924a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	4413      	add	r3, r2
 8005338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533c:	461a      	mov	r2, r3
 800533e:	2310      	movs	r3, #16
 8005340:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	4413      	add	r3, r2
 800534a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534e:	461a      	mov	r2, r3
 8005350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005354:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	212c      	movs	r1, #44	; 0x2c
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	4413      	add	r3, r2
 8005362:	3361      	adds	r3, #97	; 0x61
 8005364:	2208      	movs	r2, #8
 8005366:	701a      	strb	r2, [r3, #0]
}
 8005368:	e15a      	b.n	8005620 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b02      	cmp	r3, #2
 800537e:	f040 814f 	bne.w	8005620 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	4413      	add	r3, r2
 800538a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	440a      	add	r2, r1
 8005398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800539c:	f023 0302 	bic.w	r3, r3, #2
 80053a0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	212c      	movs	r1, #44	; 0x2c
 80053a8:	fb01 f303 	mul.w	r3, r1, r3
 80053ac:	4413      	add	r3, r2
 80053ae:	3361      	adds	r3, #97	; 0x61
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d17d      	bne.n	80054b2 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	212c      	movs	r1, #44	; 0x2c
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	4413      	add	r3, r2
 80053c2:	3360      	adds	r3, #96	; 0x60
 80053c4:	2201      	movs	r2, #1
 80053c6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	212c      	movs	r1, #44	; 0x2c
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	333f      	adds	r3, #63	; 0x3f
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d00a      	beq.n	80053f2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	212c      	movs	r1, #44	; 0x2c
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	333f      	adds	r3, #63	; 0x3f
 80053ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	f040 8100 	bne.w	80055f2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d113      	bne.n	8005422 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	212c      	movs	r1, #44	; 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	3355      	adds	r3, #85	; 0x55
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	f083 0301 	eor.w	r3, r3, #1
 800540e:	b2d8      	uxtb	r0, r3
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	212c      	movs	r1, #44	; 0x2c
 8005416:	fb01 f303 	mul.w	r3, r1, r3
 800541a:	4413      	add	r3, r2
 800541c:	3355      	adds	r3, #85	; 0x55
 800541e:	4602      	mov	r2, r0
 8005420:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b01      	cmp	r3, #1
 8005428:	f040 80e3 	bne.w	80055f2 <HCD_HC_OUT_IRQHandler+0x7cc>
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	212c      	movs	r1, #44	; 0x2c
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	4413      	add	r3, r2
 8005438:	334c      	adds	r3, #76	; 0x4c
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 80d8 	beq.w	80055f2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	212c      	movs	r1, #44	; 0x2c
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	334c      	adds	r3, #76	; 0x4c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	202c      	movs	r0, #44	; 0x2c
 8005458:	fb00 f202 	mul.w	r2, r0, r2
 800545c:	440a      	add	r2, r1
 800545e:	3240      	adds	r2, #64	; 0x40
 8005460:	8812      	ldrh	r2, [r2, #0]
 8005462:	4413      	add	r3, r2
 8005464:	3b01      	subs	r3, #1
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	202c      	movs	r0, #44	; 0x2c
 800546c:	fb00 f202 	mul.w	r2, r0, r2
 8005470:	440a      	add	r2, r1
 8005472:	3240      	adds	r2, #64	; 0x40
 8005474:	8812      	ldrh	r2, [r2, #0]
 8005476:	fbb3 f3f2 	udiv	r3, r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 80b5 	beq.w	80055f2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	212c      	movs	r1, #44	; 0x2c
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	4413      	add	r3, r2
 8005494:	3355      	adds	r3, #85	; 0x55
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	f083 0301 	eor.w	r3, r3, #1
 800549c:	b2d8      	uxtb	r0, r3
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	212c      	movs	r1, #44	; 0x2c
 80054a4:	fb01 f303 	mul.w	r3, r1, r3
 80054a8:	4413      	add	r3, r2
 80054aa:	3355      	adds	r3, #85	; 0x55
 80054ac:	4602      	mov	r2, r0
 80054ae:	701a      	strb	r2, [r3, #0]
 80054b0:	e09f      	b.n	80055f2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	212c      	movs	r1, #44	; 0x2c
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	4413      	add	r3, r2
 80054be:	3361      	adds	r3, #97	; 0x61
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d109      	bne.n	80054da <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	212c      	movs	r1, #44	; 0x2c
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	4413      	add	r3, r2
 80054d2:	3360      	adds	r3, #96	; 0x60
 80054d4:	2202      	movs	r2, #2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	e08b      	b.n	80055f2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	212c      	movs	r1, #44	; 0x2c
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	4413      	add	r3, r2
 80054e6:	3361      	adds	r3, #97	; 0x61
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d109      	bne.n	8005502 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	212c      	movs	r1, #44	; 0x2c
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	4413      	add	r3, r2
 80054fa:	3360      	adds	r3, #96	; 0x60
 80054fc:	2202      	movs	r2, #2
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	e077      	b.n	80055f2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	212c      	movs	r1, #44	; 0x2c
 8005508:	fb01 f303 	mul.w	r3, r1, r3
 800550c:	4413      	add	r3, r2
 800550e:	3361      	adds	r3, #97	; 0x61
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b05      	cmp	r3, #5
 8005514:	d109      	bne.n	800552a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	212c      	movs	r1, #44	; 0x2c
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	4413      	add	r3, r2
 8005522:	3360      	adds	r3, #96	; 0x60
 8005524:	2205      	movs	r2, #5
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	e063      	b.n	80055f2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	212c      	movs	r1, #44	; 0x2c
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	4413      	add	r3, r2
 8005536:	3361      	adds	r3, #97	; 0x61
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b06      	cmp	r3, #6
 800553c:	d009      	beq.n	8005552 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	212c      	movs	r1, #44	; 0x2c
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	4413      	add	r3, r2
 800554a:	3361      	adds	r3, #97	; 0x61
 800554c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800554e:	2b08      	cmp	r3, #8
 8005550:	d14f      	bne.n	80055f2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	212c      	movs	r1, #44	; 0x2c
 8005558:	fb01 f303 	mul.w	r3, r1, r3
 800555c:	4413      	add	r3, r2
 800555e:	335c      	adds	r3, #92	; 0x5c
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	202c      	movs	r0, #44	; 0x2c
 800556a:	fb00 f303 	mul.w	r3, r0, r3
 800556e:	440b      	add	r3, r1
 8005570:	335c      	adds	r3, #92	; 0x5c
 8005572:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	212c      	movs	r1, #44	; 0x2c
 800557a:	fb01 f303 	mul.w	r3, r1, r3
 800557e:	4413      	add	r3, r2
 8005580:	335c      	adds	r3, #92	; 0x5c
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d912      	bls.n	80055ae <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	212c      	movs	r1, #44	; 0x2c
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	4413      	add	r3, r2
 8005594:	335c      	adds	r3, #92	; 0x5c
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	212c      	movs	r1, #44	; 0x2c
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	4413      	add	r3, r2
 80055a6:	3360      	adds	r3, #96	; 0x60
 80055a8:	2204      	movs	r2, #4
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e021      	b.n	80055f2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	212c      	movs	r1, #44	; 0x2c
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	4413      	add	r3, r2
 80055ba:	3360      	adds	r3, #96	; 0x60
 80055bc:	2202      	movs	r2, #2
 80055be:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055d6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055de:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ec:	461a      	mov	r2, r3
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fe:	461a      	mov	r2, r3
 8005600:	2302      	movs	r3, #2
 8005602:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	b2d9      	uxtb	r1, r3
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	202c      	movs	r0, #44	; 0x2c
 800560e:	fb00 f303 	mul.w	r3, r0, r3
 8005612:	4413      	add	r3, r2
 8005614:	3360      	adds	r3, #96	; 0x60
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f00c f93c 	bl	8011898 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005620:	bf00      	nop
 8005622:	3720      	adds	r7, #32
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	0c5b      	lsrs	r3, r3, #17
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	091b      	lsrs	r3, r3, #4
 8005658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800565c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d004      	beq.n	800566e <HCD_RXQLVL_IRQHandler+0x46>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2b05      	cmp	r3, #5
 8005668:	f000 80a9 	beq.w	80057be <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800566c:	e0aa      	b.n	80057c4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80a6 	beq.w	80057c2 <HCD_RXQLVL_IRQHandler+0x19a>
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	212c      	movs	r1, #44	; 0x2c
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	4413      	add	r3, r2
 8005682:	3344      	adds	r3, #68	; 0x44
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 809b 	beq.w	80057c2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	212c      	movs	r1, #44	; 0x2c
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	3350      	adds	r3, #80	; 0x50
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	441a      	add	r2, r3
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	202c      	movs	r0, #44	; 0x2c
 80056a6:	fb00 f303 	mul.w	r3, r0, r3
 80056aa:	440b      	add	r3, r1
 80056ac:	334c      	adds	r3, #76	; 0x4c
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d87a      	bhi.n	80057aa <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	212c      	movs	r1, #44	; 0x2c
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	4413      	add	r3, r2
 80056c4:	3344      	adds	r3, #68	; 0x44
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	b292      	uxth	r2, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	f003 f935 	bl	800893c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	212c      	movs	r1, #44	; 0x2c
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	3344      	adds	r3, #68	; 0x44
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	441a      	add	r2, r3
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	202c      	movs	r0, #44	; 0x2c
 80056ec:	fb00 f303 	mul.w	r3, r0, r3
 80056f0:	440b      	add	r3, r1
 80056f2:	3344      	adds	r3, #68	; 0x44
 80056f4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	212c      	movs	r1, #44	; 0x2c
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	4413      	add	r3, r2
 8005702:	3350      	adds	r3, #80	; 0x50
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	441a      	add	r2, r3
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	202c      	movs	r0, #44	; 0x2c
 8005710:	fb00 f303 	mul.w	r3, r0, r3
 8005714:	440b      	add	r3, r1
 8005716:	3350      	adds	r3, #80	; 0x50
 8005718:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	4413      	add	r3, r2
 8005722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	0cdb      	lsrs	r3, r3, #19
 800572a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800572e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	212c      	movs	r1, #44	; 0x2c
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	4413      	add	r3, r2
 800573c:	3340      	adds	r3, #64	; 0x40
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4293      	cmp	r3, r2
 8005746:	d13c      	bne.n	80057c2 <HCD_RXQLVL_IRQHandler+0x19a>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d039      	beq.n	80057c2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005764:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800576c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577a:	461a      	mov	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	212c      	movs	r1, #44	; 0x2c
 8005786:	fb01 f303 	mul.w	r3, r1, r3
 800578a:	4413      	add	r3, r2
 800578c:	3354      	adds	r3, #84	; 0x54
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	f083 0301 	eor.w	r3, r3, #1
 8005794:	b2d8      	uxtb	r0, r3
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	212c      	movs	r1, #44	; 0x2c
 800579c:	fb01 f303 	mul.w	r3, r1, r3
 80057a0:	4413      	add	r3, r2
 80057a2:	3354      	adds	r3, #84	; 0x54
 80057a4:	4602      	mov	r2, r0
 80057a6:	701a      	strb	r2, [r3, #0]
      break;
 80057a8:	e00b      	b.n	80057c2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	212c      	movs	r1, #44	; 0x2c
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	4413      	add	r3, r2
 80057b6:	3360      	adds	r3, #96	; 0x60
 80057b8:	2204      	movs	r2, #4
 80057ba:	701a      	strb	r2, [r3, #0]
      break;
 80057bc:	e001      	b.n	80057c2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80057be:	bf00      	nop
 80057c0:	e000      	b.n	80057c4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80057c2:	bf00      	nop
  }
}
 80057c4:	bf00      	nop
 80057c6:	3728      	adds	r7, #40	; 0x28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057f8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d10b      	bne.n	800581c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b01      	cmp	r3, #1
 800580c:	d102      	bne.n	8005814 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f00c f826 	bl	8011860 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f043 0302 	orr.w	r3, r3, #2
 800581a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b08      	cmp	r3, #8
 8005824:	d132      	bne.n	800588c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f043 0308 	orr.w	r3, r3, #8
 800582c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b04      	cmp	r3, #4
 8005836:	d126      	bne.n	8005886 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d113      	bne.n	8005868 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005846:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800584a:	d106      	bne.n	800585a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2102      	movs	r1, #2
 8005852:	4618      	mov	r0, r3
 8005854:	f003 f9d2 	bl	8008bfc <USB_InitFSLSPClkSel>
 8005858:	e011      	b.n	800587e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2101      	movs	r1, #1
 8005860:	4618      	mov	r0, r3
 8005862:	f003 f9cb 	bl	8008bfc <USB_InitFSLSPClkSel>
 8005866:	e00a      	b.n	800587e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d106      	bne.n	800587e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005876:	461a      	mov	r2, r3
 8005878:	f64e 2360 	movw	r3, #60000	; 0xea60
 800587c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f00c f818 	bl	80118b4 <HAL_HCD_PortEnabled_Callback>
 8005884:	e002      	b.n	800588c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f00c f822 	bl	80118d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b20      	cmp	r3, #32
 8005894:	d103      	bne.n	800589e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f043 0320 	orr.w	r3, r3, #32
 800589c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6013      	str	r3, [r2, #0]
}
 80058aa:	bf00      	nop
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e12b      	b.n	8005b1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fc fd0a 	bl	80022f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2224      	movs	r2, #36	; 0x24
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0201 	bic.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005918:	f002 fcb6 	bl	8008288 <HAL_RCC_GetPCLK1Freq>
 800591c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	4a81      	ldr	r2, [pc, #516]	; (8005b28 <HAL_I2C_Init+0x274>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d807      	bhi.n	8005938 <HAL_I2C_Init+0x84>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a80      	ldr	r2, [pc, #512]	; (8005b2c <HAL_I2C_Init+0x278>)
 800592c:	4293      	cmp	r3, r2
 800592e:	bf94      	ite	ls
 8005930:	2301      	movls	r3, #1
 8005932:	2300      	movhi	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e006      	b.n	8005946 <HAL_I2C_Init+0x92>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a7d      	ldr	r2, [pc, #500]	; (8005b30 <HAL_I2C_Init+0x27c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	bf94      	ite	ls
 8005940:	2301      	movls	r3, #1
 8005942:	2300      	movhi	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e0e7      	b.n	8005b1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a78      	ldr	r2, [pc, #480]	; (8005b34 <HAL_I2C_Init+0x280>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	0c9b      	lsrs	r3, r3, #18
 8005958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	4a6a      	ldr	r2, [pc, #424]	; (8005b28 <HAL_I2C_Init+0x274>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d802      	bhi.n	8005988 <HAL_I2C_Init+0xd4>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	3301      	adds	r3, #1
 8005986:	e009      	b.n	800599c <HAL_I2C_Init+0xe8>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800598e:	fb02 f303 	mul.w	r3, r2, r3
 8005992:	4a69      	ldr	r2, [pc, #420]	; (8005b38 <HAL_I2C_Init+0x284>)
 8005994:	fba2 2303 	umull	r2, r3, r2, r3
 8005998:	099b      	lsrs	r3, r3, #6
 800599a:	3301      	adds	r3, #1
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	495c      	ldr	r1, [pc, #368]	; (8005b28 <HAL_I2C_Init+0x274>)
 80059b8:	428b      	cmp	r3, r1
 80059ba:	d819      	bhi.n	80059f0 <HAL_I2C_Init+0x13c>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	1e59      	subs	r1, r3, #1
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ca:	1c59      	adds	r1, r3, #1
 80059cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059d0:	400b      	ands	r3, r1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_I2C_Init+0x138>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1e59      	subs	r1, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80059e4:	3301      	adds	r3, #1
 80059e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ea:	e051      	b.n	8005a90 <HAL_I2C_Init+0x1dc>
 80059ec:	2304      	movs	r3, #4
 80059ee:	e04f      	b.n	8005a90 <HAL_I2C_Init+0x1dc>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d111      	bne.n	8005a1c <HAL_I2C_Init+0x168>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1e58      	subs	r0, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6859      	ldr	r1, [r3, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	440b      	add	r3, r1
 8005a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	e012      	b.n	8005a42 <HAL_I2C_Init+0x18e>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	1e58      	subs	r0, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6859      	ldr	r1, [r3, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	0099      	lsls	r1, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a32:	3301      	adds	r3, #1
 8005a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2301      	moveq	r3, #1
 8005a3e:	2300      	movne	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_I2C_Init+0x196>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e022      	b.n	8005a90 <HAL_I2C_Init+0x1dc>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10e      	bne.n	8005a70 <HAL_I2C_Init+0x1bc>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1e58      	subs	r0, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6859      	ldr	r1, [r3, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	440b      	add	r3, r1
 8005a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a64:	3301      	adds	r3, #1
 8005a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6e:	e00f      	b.n	8005a90 <HAL_I2C_Init+0x1dc>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1e58      	subs	r0, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6859      	ldr	r1, [r3, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	0099      	lsls	r1, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a86:	3301      	adds	r3, #1
 8005a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	6809      	ldr	r1, [r1, #0]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69da      	ldr	r2, [r3, #28]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005abe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6911      	ldr	r1, [r2, #16]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	68d2      	ldr	r2, [r2, #12]
 8005aca:	4311      	orrs	r1, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	000186a0 	.word	0x000186a0
 8005b2c:	001e847f 	.word	0x001e847f
 8005b30:	003d08ff 	.word	0x003d08ff
 8005b34:	431bde83 	.word	0x431bde83
 8005b38:	10624dd3 	.word	0x10624dd3

08005b3c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e021      	b.n	8005b92 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2224      	movs	r2, #36	; 0x24
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0201 	bic.w	r2, r2, #1
 8005b64:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fc fc0c 	bl	8002384 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	817b      	strh	r3, [r7, #10]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	813b      	strh	r3, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bb6:	f7fd f8c3 	bl	8002d40 <HAL_GetTick>
 8005bba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	f040 80d9 	bne.w	8005d7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	2319      	movs	r3, #25
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	496d      	ldr	r1, [pc, #436]	; (8005d88 <HAL_I2C_Mem_Write+0x1ec>)
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fc8d 	bl	80064f4 <I2C_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
 8005be2:	e0cc      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_I2C_Mem_Write+0x56>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e0c5      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d007      	beq.n	8005c18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0201 	orr.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2221      	movs	r2, #33	; 0x21
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2240      	movs	r2, #64	; 0x40
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a3a      	ldr	r2, [r7, #32]
 8005c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4a4d      	ldr	r2, [pc, #308]	; (8005d8c <HAL_I2C_Mem_Write+0x1f0>)
 8005c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c5a:	88f8      	ldrh	r0, [r7, #6]
 8005c5c:	893a      	ldrh	r2, [r7, #8]
 8005c5e:	8979      	ldrh	r1, [r7, #10]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4603      	mov	r3, r0
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fac4 	bl	80061f8 <I2C_RequestMemoryWrite>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d052      	beq.n	8005d1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e081      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fd0e 	bl	80066a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d107      	bne.n	8005ca2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e06b      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	781a      	ldrb	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d11b      	bne.n	8005d1c <HAL_I2C_Mem_Write+0x180>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d017      	beq.n	8005d1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1aa      	bne.n	8005c7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fcfa 	bl	8006722 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00d      	beq.n	8005d50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d107      	bne.n	8005d4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e016      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e000      	b.n	8005d7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d7c:	2302      	movs	r3, #2
  }
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	00100002 	.word	0x00100002
 8005d8c:	ffff0000 	.word	0xffff0000

08005d90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08c      	sub	sp, #48	; 0x30
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4603      	mov	r3, r0
 8005da0:	817b      	strh	r3, [r7, #10]
 8005da2:	460b      	mov	r3, r1
 8005da4:	813b      	strh	r3, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005daa:	f7fc ffc9 	bl	8002d40 <HAL_GetTick>
 8005dae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	f040 8208 	bne.w	80061ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	2319      	movs	r3, #25
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	497b      	ldr	r1, [pc, #492]	; (8005fb4 <HAL_I2C_Mem_Read+0x224>)
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fb93 	bl	80064f4 <I2C_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e1fb      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_I2C_Mem_Read+0x56>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e1f4      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d007      	beq.n	8005e0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2222      	movs	r2, #34	; 0x22
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2240      	movs	r2, #64	; 0x40
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a5b      	ldr	r2, [pc, #364]	; (8005fb8 <HAL_I2C_Mem_Read+0x228>)
 8005e4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e4e:	88f8      	ldrh	r0, [r7, #6]
 8005e50:	893a      	ldrh	r2, [r7, #8]
 8005e52:	8979      	ldrh	r1, [r7, #10]
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fa60 	bl	8006324 <I2C_RequestMemoryRead>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e1b0      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d113      	bne.n	8005e9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e76:	2300      	movs	r3, #0
 8005e78:	623b      	str	r3, [r7, #32]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	623b      	str	r3, [r7, #32]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	623b      	str	r3, [r7, #32]
 8005e8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e184      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d11b      	bne.n	8005ede <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	61fb      	str	r3, [r7, #28]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	e164      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d11b      	bne.n	8005f1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	e144      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f34:	e138      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	f200 80f1 	bhi.w	8006122 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d123      	bne.n	8005f90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fc29 	bl	80067a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e139      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f8e:	e10b      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d14e      	bne.n	8006036 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	4906      	ldr	r1, [pc, #24]	; (8005fbc <HAL_I2C_Mem_Read+0x22c>)
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 faa6 	bl	80064f4 <I2C_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d008      	beq.n	8005fc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e10e      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
 8005fb2:	bf00      	nop
 8005fb4:	00100002 	.word	0x00100002
 8005fb8:	ffff0000 	.word	0xffff0000
 8005fbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006034:	e0b8      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	2200      	movs	r2, #0
 800603e:	4966      	ldr	r1, [pc, #408]	; (80061d8 <HAL_I2C_Mem_Read+0x448>)
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fa57 	bl	80064f4 <I2C_WaitOnFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0bf      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691a      	ldr	r2, [r3, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	2200      	movs	r2, #0
 800609a:	494f      	ldr	r1, [pc, #316]	; (80061d8 <HAL_I2C_Mem_Read+0x448>)
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 fa29 	bl	80064f4 <I2C_WaitOnFlagUntilTimeout>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e091      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006120:	e042      	b.n	80061a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006124:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fb3c 	bl	80067a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e04c      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b04      	cmp	r3, #4
 8006174:	d118      	bne.n	80061a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f aec2 	bne.w	8005f36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e000      	b.n	80061d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
  }
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3728      	adds	r7, #40	; 0x28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	00010004 	.word	0x00010004

080061dc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ea:	b2db      	uxtb	r3, r3
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	4608      	mov	r0, r1
 8006202:	4611      	mov	r1, r2
 8006204:	461a      	mov	r2, r3
 8006206:	4603      	mov	r3, r0
 8006208:	817b      	strh	r3, [r7, #10]
 800620a:	460b      	mov	r3, r1
 800620c:	813b      	strh	r3, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006220:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	2200      	movs	r2, #0
 800622a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f960 	bl	80064f4 <I2C_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00d      	beq.n	8006256 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006248:	d103      	bne.n	8006252 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006250:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e05f      	b.n	8006316 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006256:	897b      	ldrh	r3, [r7, #10]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006264:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	6a3a      	ldr	r2, [r7, #32]
 800626a:	492d      	ldr	r1, [pc, #180]	; (8006320 <I2C_RequestMemoryWrite+0x128>)
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f998 	bl	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e04c      	b.n	8006316 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006294:	6a39      	ldr	r1, [r7, #32]
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 fa02 	bl	80066a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00d      	beq.n	80062be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d107      	bne.n	80062ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e02b      	b.n	8006316 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d105      	bne.n	80062d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062c4:	893b      	ldrh	r3, [r7, #8]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	611a      	str	r2, [r3, #16]
 80062ce:	e021      	b.n	8006314 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062d0:	893b      	ldrh	r3, [r7, #8]
 80062d2:	0a1b      	lsrs	r3, r3, #8
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e0:	6a39      	ldr	r1, [r7, #32]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 f9dc 	bl	80066a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00d      	beq.n	800630a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d107      	bne.n	8006306 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006304:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e005      	b.n	8006316 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800630a:	893b      	ldrh	r3, [r7, #8]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	00010002 	.word	0x00010002

08006324 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	4608      	mov	r0, r1
 800632e:	4611      	mov	r1, r2
 8006330:	461a      	mov	r2, r3
 8006332:	4603      	mov	r3, r0
 8006334:	817b      	strh	r3, [r7, #10]
 8006336:	460b      	mov	r3, r1
 8006338:	813b      	strh	r3, [r7, #8]
 800633a:	4613      	mov	r3, r2
 800633c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800634c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800635c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	2200      	movs	r2, #0
 8006366:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f8c2 	bl	80064f4 <I2C_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006384:	d103      	bne.n	800638e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e0aa      	b.n	80064e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006392:	897b      	ldrh	r3, [r7, #10]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	6a3a      	ldr	r2, [r7, #32]
 80063a6:	4952      	ldr	r1, [pc, #328]	; (80064f0 <I2C_RequestMemoryRead+0x1cc>)
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f8fa 	bl	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e097      	b.n	80064e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d0:	6a39      	ldr	r1, [r7, #32]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f964 	bl	80066a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d107      	bne.n	80063f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e076      	b.n	80064e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d105      	bne.n	800640c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006400:	893b      	ldrh	r3, [r7, #8]
 8006402:	b2da      	uxtb	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	611a      	str	r2, [r3, #16]
 800640a:	e021      	b.n	8006450 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800640c:	893b      	ldrh	r3, [r7, #8]
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	b29b      	uxth	r3, r3
 8006412:	b2da      	uxtb	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800641a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641c:	6a39      	ldr	r1, [r7, #32]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 f93e 	bl	80066a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00d      	beq.n	8006446 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	2b04      	cmp	r3, #4
 8006430:	d107      	bne.n	8006442 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e050      	b.n	80064e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006446:	893b      	ldrh	r3, [r7, #8]
 8006448:	b2da      	uxtb	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006452:	6a39      	ldr	r1, [r7, #32]
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f923 	bl	80066a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00d      	beq.n	800647c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	2b04      	cmp	r3, #4
 8006466:	d107      	bne.n	8006478 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006476:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e035      	b.n	80064e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800648a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	2200      	movs	r2, #0
 8006494:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f82b 	bl	80064f4 <I2C_WaitOnFlagUntilTimeout>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00d      	beq.n	80064c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b2:	d103      	bne.n	80064bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e013      	b.n	80064e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80064c0:	897b      	ldrh	r3, [r7, #10]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	6a3a      	ldr	r2, [r7, #32]
 80064d4:	4906      	ldr	r1, [pc, #24]	; (80064f0 <I2C_RequestMemoryRead+0x1cc>)
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f863 	bl	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	00010002 	.word	0x00010002

080064f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006504:	e025      	b.n	8006552 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650c:	d021      	beq.n	8006552 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800650e:	f7fc fc17 	bl	8002d40 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d302      	bcc.n	8006524 <I2C_WaitOnFlagUntilTimeout+0x30>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d116      	bne.n	8006552 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f043 0220 	orr.w	r2, r3, #32
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e023      	b.n	800659a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	0c1b      	lsrs	r3, r3, #16
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d10d      	bne.n	8006578 <I2C_WaitOnFlagUntilTimeout+0x84>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	43da      	mvns	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4013      	ands	r3, r2
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	bf0c      	ite	eq
 800656e:	2301      	moveq	r3, #1
 8006570:	2300      	movne	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	461a      	mov	r2, r3
 8006576:	e00c      	b.n	8006592 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	43da      	mvns	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4013      	ands	r3, r2
 8006584:	b29b      	uxth	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	bf0c      	ite	eq
 800658a:	2301      	moveq	r3, #1
 800658c:	2300      	movne	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	461a      	mov	r2, r3
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	429a      	cmp	r2, r3
 8006596:	d0b6      	beq.n	8006506 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065b0:	e051      	b.n	8006656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c0:	d123      	bne.n	800660a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f043 0204 	orr.w	r2, r3, #4
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e046      	b.n	8006698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d021      	beq.n	8006656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006612:	f7fc fb95 	bl	8002d40 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	429a      	cmp	r2, r3
 8006620:	d302      	bcc.n	8006628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d116      	bne.n	8006656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e020      	b.n	8006698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	0c1b      	lsrs	r3, r3, #16
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10c      	bne.n	800667a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	43da      	mvns	r2, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4013      	ands	r3, r2
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	bf14      	ite	ne
 8006672:	2301      	movne	r3, #1
 8006674:	2300      	moveq	r3, #0
 8006676:	b2db      	uxtb	r3, r3
 8006678:	e00b      	b.n	8006692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	43da      	mvns	r2, r3
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	4013      	ands	r3, r2
 8006686:	b29b      	uxth	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	bf14      	ite	ne
 800668c:	2301      	movne	r3, #1
 800668e:	2300      	moveq	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d18d      	bne.n	80065b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066ac:	e02d      	b.n	800670a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f8ce 	bl	8006850 <I2C_IsAcknowledgeFailed>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e02d      	b.n	800671a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d021      	beq.n	800670a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c6:	f7fc fb3b 	bl	8002d40 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d302      	bcc.n	80066dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d116      	bne.n	800670a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f043 0220 	orr.w	r2, r3, #32
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e007      	b.n	800671a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006714:	2b80      	cmp	r3, #128	; 0x80
 8006716:	d1ca      	bne.n	80066ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800672e:	e02d      	b.n	800678c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f88d 	bl	8006850 <I2C_IsAcknowledgeFailed>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e02d      	b.n	800679c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006746:	d021      	beq.n	800678c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006748:	f7fc fafa 	bl	8002d40 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	429a      	cmp	r2, r3
 8006756:	d302      	bcc.n	800675e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d116      	bne.n	800678c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e007      	b.n	800679c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b04      	cmp	r3, #4
 8006798:	d1ca      	bne.n	8006730 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067b0:	e042      	b.n	8006838 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	f003 0310 	and.w	r3, r3, #16
 80067bc:	2b10      	cmp	r3, #16
 80067be:	d119      	bne.n	80067f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0210 	mvn.w	r2, #16
 80067c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e029      	b.n	8006848 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f4:	f7fc faa4 	bl	8002d40 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	429a      	cmp	r2, r3
 8006802:	d302      	bcc.n	800680a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d116      	bne.n	8006838 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	f043 0220 	orr.w	r2, r3, #32
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e007      	b.n	8006848 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d1b5      	bne.n	80067b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006866:	d11b      	bne.n	80068a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006870:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	f043 0204 	orr.w	r2, r3, #4
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
	...

080068b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e128      	b.n	8006b14 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a90      	ldr	r2, [pc, #576]	; (8006b1c <HAL_I2S_Init+0x26c>)
 80068da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fb fd73 	bl	80023c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80068f8:	f023 030f 	bic.w	r3, r3, #15
 80068fc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2202      	movs	r2, #2
 8006904:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d060      	beq.n	80069d0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006916:	2310      	movs	r3, #16
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	e001      	b.n	8006920 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800691c:	2320      	movs	r3, #32
 800691e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	2b20      	cmp	r3, #32
 8006926:	d802      	bhi.n	800692e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800692e:	2001      	movs	r0, #1
 8006930:	f001 fdcc 	bl	80084cc <HAL_RCCEx_GetPeriphCLKFreq>
 8006934:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800693e:	d125      	bne.n	800698c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d010      	beq.n	800696a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	461a      	mov	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	fbb2 f3f3 	udiv	r3, r2, r3
 8006964:	3305      	adds	r3, #5
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	e01f      	b.n	80069aa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	fbb2 f2f3 	udiv	r2, r2, r3
 8006974:	4613      	mov	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	461a      	mov	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	fbb2 f3f3 	udiv	r3, r2, r3
 8006986:	3305      	adds	r3, #5
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	e00e      	b.n	80069aa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	fbb2 f2f3 	udiv	r2, r2, r3
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	461a      	mov	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a6:	3305      	adds	r3, #5
 80069a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	4a5c      	ldr	r2, [pc, #368]	; (8006b20 <HAL_I2S_Init+0x270>)
 80069ae:	fba2 2303 	umull	r2, r3, r2, r3
 80069b2:	08db      	lsrs	r3, r3, #3
 80069b4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	021b      	lsls	r3, r3, #8
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	e003      	b.n	80069d8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80069d0:	2302      	movs	r3, #2
 80069d2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d902      	bls.n	80069e4 <HAL_I2S_Init+0x134>
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	2bff      	cmp	r3, #255	; 0xff
 80069e2:	d907      	bls.n	80069f4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e8:	f043 0210 	orr.w	r2, r3, #16
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e08f      	b.n	8006b14 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691a      	ldr	r2, [r3, #16]
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	ea42 0103 	orr.w	r1, r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006a12:	f023 030f 	bic.w	r3, r3, #15
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6851      	ldr	r1, [r2, #4]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6892      	ldr	r2, [r2, #8]
 8006a1e:	4311      	orrs	r1, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	68d2      	ldr	r2, [r2, #12]
 8006a24:	4311      	orrs	r1, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6992      	ldr	r2, [r2, #24]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a36:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d161      	bne.n	8006b04 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a38      	ldr	r2, [pc, #224]	; (8006b24 <HAL_I2S_Init+0x274>)
 8006a44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a37      	ldr	r2, [pc, #220]	; (8006b28 <HAL_I2S_Init+0x278>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d101      	bne.n	8006a54 <HAL_I2S_Init+0x1a4>
 8006a50:	4b36      	ldr	r3, [pc, #216]	; (8006b2c <HAL_I2S_Init+0x27c>)
 8006a52:	e001      	b.n	8006a58 <HAL_I2S_Init+0x1a8>
 8006a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	4932      	ldr	r1, [pc, #200]	; (8006b28 <HAL_I2S_Init+0x278>)
 8006a60:	428a      	cmp	r2, r1
 8006a62:	d101      	bne.n	8006a68 <HAL_I2S_Init+0x1b8>
 8006a64:	4a31      	ldr	r2, [pc, #196]	; (8006b2c <HAL_I2S_Init+0x27c>)
 8006a66:	e001      	b.n	8006a6c <HAL_I2S_Init+0x1bc>
 8006a68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006a6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006a70:	f023 030f 	bic.w	r3, r3, #15
 8006a74:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a2b      	ldr	r2, [pc, #172]	; (8006b28 <HAL_I2S_Init+0x278>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d101      	bne.n	8006a84 <HAL_I2S_Init+0x1d4>
 8006a80:	4b2a      	ldr	r3, [pc, #168]	; (8006b2c <HAL_I2S_Init+0x27c>)
 8006a82:	e001      	b.n	8006a88 <HAL_I2S_Init+0x1d8>
 8006a84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a88:	2202      	movs	r2, #2
 8006a8a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a25      	ldr	r2, [pc, #148]	; (8006b28 <HAL_I2S_Init+0x278>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d101      	bne.n	8006a9a <HAL_I2S_Init+0x1ea>
 8006a96:	4b25      	ldr	r3, [pc, #148]	; (8006b2c <HAL_I2S_Init+0x27c>)
 8006a98:	e001      	b.n	8006a9e <HAL_I2S_Init+0x1ee>
 8006a9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aaa:	d003      	beq.n	8006ab4 <HAL_I2S_Init+0x204>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d103      	bne.n	8006abc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	e001      	b.n	8006ac0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006aca:	4313      	orrs	r3, r2
 8006acc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	897b      	ldrh	r3, [r7, #10]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006aec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a0d      	ldr	r2, [pc, #52]	; (8006b28 <HAL_I2S_Init+0x278>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d101      	bne.n	8006afc <HAL_I2S_Init+0x24c>
 8006af8:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <HAL_I2S_Init+0x27c>)
 8006afa:	e001      	b.n	8006b00 <HAL_I2S_Init+0x250>
 8006afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b00:	897a      	ldrh	r2, [r7, #10]
 8006b02:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	080073b5 	.word	0x080073b5
 8006b20:	cccccccd 	.word	0xcccccccd
 8006b24:	0800753d 	.word	0x0800753d
 8006b28:	40003800 	.word	0x40003800
 8006b2c:	40003400 	.word	0x40003400

08006b30 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_I2S_Transmit_DMA+0x1a>
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e08e      	b.n	8006c6c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_I2S_Transmit_DMA+0x2e>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e086      	b.n	8006c6c <HAL_I2S_Transmit_DMA+0x13c>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d005      	beq.n	8006b7e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e076      	b.n	8006c6c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2203      	movs	r2, #3
 8006b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d002      	beq.n	8006baa <HAL_I2S_Transmit_DMA+0x7a>
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b05      	cmp	r3, #5
 8006ba8:	d10a      	bne.n	8006bc0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006baa:	88fb      	ldrh	r3, [r7, #6]
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006bb4:	88fb      	ldrh	r3, [r7, #6]
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bbe:	e005      	b.n	8006bcc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	88fa      	ldrh	r2, [r7, #6]
 8006bc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	88fa      	ldrh	r2, [r7, #6]
 8006bca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	4a28      	ldr	r2, [pc, #160]	; (8006c74 <HAL_I2S_Transmit_DMA+0x144>)
 8006bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	4a27      	ldr	r2, [pc, #156]	; (8006c78 <HAL_I2S_Transmit_DMA+0x148>)
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	4a26      	ldr	r2, [pc, #152]	; (8006c7c <HAL_I2S_Transmit_DMA+0x14c>)
 8006be2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006bec:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006bf4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006bfc:	f7fc faee 	bl	80031dc <HAL_DMA_Start_IT>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00f      	beq.n	8006c26 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0a:	f043 0208 	orr.w	r2, r3, #8
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e022      	b.n	8006c6c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d107      	bne.n	8006c44 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69da      	ldr	r2, [r3, #28]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c42:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d107      	bne.n	8006c62 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f042 0202 	orr.w	r2, r2, #2
 8006c60:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	08007293 	.word	0x08007293
 8006c78:	08007251 	.word	0x08007251
 8006c7c:	080072af 	.word	0x080072af

08006c80 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_I2S_DMAPause+0x18>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e04a      	b.n	8006d2e <HAL_I2S_DMAPause+0xae>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d108      	bne.n	8006cbe <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0202 	bic.w	r2, r2, #2
 8006cba:	605a      	str	r2, [r3, #4]
 8006cbc:	e032      	b.n	8006d24 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d108      	bne.n	8006cdc <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0201 	bic.w	r2, r2, #1
 8006cd8:	605a      	str	r2, [r3, #4]
 8006cda:	e023      	b.n	8006d24 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b05      	cmp	r3, #5
 8006ce6:	d11d      	bne.n	8006d24 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0203 	bic.w	r2, r2, #3
 8006cf6:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a0f      	ldr	r2, [pc, #60]	; (8006d3c <HAL_I2S_DMAPause+0xbc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d101      	bne.n	8006d06 <HAL_I2S_DMAPause+0x86>
 8006d02:	4b0f      	ldr	r3, [pc, #60]	; (8006d40 <HAL_I2S_DMAPause+0xc0>)
 8006d04:	e001      	b.n	8006d0a <HAL_I2S_DMAPause+0x8a>
 8006d06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	490a      	ldr	r1, [pc, #40]	; (8006d3c <HAL_I2S_DMAPause+0xbc>)
 8006d12:	428b      	cmp	r3, r1
 8006d14:	d101      	bne.n	8006d1a <HAL_I2S_DMAPause+0x9a>
 8006d16:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <HAL_I2S_DMAPause+0xc0>)
 8006d18:	e001      	b.n	8006d1e <HAL_I2S_DMAPause+0x9e>
 8006d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d1e:	f022 0203 	bic.w	r2, r2, #3
 8006d22:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40003800 	.word	0x40003800
 8006d40:	40003400 	.word	0x40003400

08006d44 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_I2S_DMAResume+0x18>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e07d      	b.n	8006e58 <HAL_I2S_DMAResume+0x114>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d108      	bne.n	8006d82 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f042 0202 	orr.w	r2, r2, #2
 8006d7e:	605a      	str	r2, [r3, #4]
 8006d80:	e056      	b.n	8006e30 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d108      	bne.n	8006da0 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f042 0201 	orr.w	r2, r2, #1
 8006d9c:	605a      	str	r2, [r3, #4]
 8006d9e:	e047      	b.n	8006e30 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b05      	cmp	r3, #5
 8006daa:	d141      	bne.n	8006e30 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0203 	orr.w	r2, r2, #3
 8006dba:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a28      	ldr	r2, [pc, #160]	; (8006e64 <HAL_I2S_DMAResume+0x120>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d101      	bne.n	8006dca <HAL_I2S_DMAResume+0x86>
 8006dc6:	4b28      	ldr	r3, [pc, #160]	; (8006e68 <HAL_I2S_DMAResume+0x124>)
 8006dc8:	e001      	b.n	8006dce <HAL_I2S_DMAResume+0x8a>
 8006dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4923      	ldr	r1, [pc, #140]	; (8006e64 <HAL_I2S_DMAResume+0x120>)
 8006dd6:	428b      	cmp	r3, r1
 8006dd8:	d101      	bne.n	8006dde <HAL_I2S_DMAResume+0x9a>
 8006dda:	4b23      	ldr	r3, [pc, #140]	; (8006e68 <HAL_I2S_DMAResume+0x124>)
 8006ddc:	e001      	b.n	8006de2 <HAL_I2S_DMAResume+0x9e>
 8006dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006de2:	f042 0203 	orr.w	r2, r2, #3
 8006de6:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <HAL_I2S_DMAResume+0x120>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d101      	bne.n	8006df6 <HAL_I2S_DMAResume+0xb2>
 8006df2:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <HAL_I2S_DMAResume+0x124>)
 8006df4:	e001      	b.n	8006dfa <HAL_I2S_DMAResume+0xb6>
 8006df6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d115      	bne.n	8006e30 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a16      	ldr	r2, [pc, #88]	; (8006e64 <HAL_I2S_DMAResume+0x120>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d101      	bne.n	8006e12 <HAL_I2S_DMAResume+0xce>
 8006e0e:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <HAL_I2S_DMAResume+0x124>)
 8006e10:	e001      	b.n	8006e16 <HAL_I2S_DMAResume+0xd2>
 8006e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4911      	ldr	r1, [pc, #68]	; (8006e64 <HAL_I2S_DMAResume+0x120>)
 8006e1e:	428b      	cmp	r3, r1
 8006e20:	d101      	bne.n	8006e26 <HAL_I2S_DMAResume+0xe2>
 8006e22:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <HAL_I2S_DMAResume+0x124>)
 8006e24:	e001      	b.n	8006e2a <HAL_I2S_DMAResume+0xe6>
 8006e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e2e:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d107      	bne.n	8006e4e <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69da      	ldr	r2, [r3, #28]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e4c:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	40003800 	.word	0x40003800
 8006e68:	40003400 	.word	0x40003400

08006e6c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e80:	d004      	beq.n	8006e8c <HAL_I2S_DMAStop+0x20>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f040 80d1 	bne.w	800702e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00f      	beq.n	8006eb4 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fc f9f7 	bl	800328c <HAL_DMA_Abort>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea8:	f043 0208 	orr.w	r2, r3, #8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006eb4:	2364      	movs	r3, #100	; 0x64
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	2102      	movs	r1, #2
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fb04 	bl	80074c8 <I2S_WaitFlagStateUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00b      	beq.n	8006ede <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eca:	f043 0201 	orr.w	r2, r3, #1
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006ede:	2364      	movs	r3, #100	; 0x64
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2180      	movs	r1, #128	; 0x80
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 faef 	bl	80074c8 <I2S_WaitFlagStateUntilTimeout>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef4:	f043 0201 	orr.w	r2, r3, #1
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69da      	ldr	r2, [r3, #28]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f16:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0202 	bic.w	r2, r2, #2
 8006f34:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b05      	cmp	r3, #5
 8006f40:	f040 8165 	bne.w	800720e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00f      	beq.n	8006f6c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fc f99b 	bl	800328c <HAL_DMA_Abort>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f60:	f043 0208 	orr.w	r2, r3, #8
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a8a      	ldr	r2, [pc, #552]	; (800719c <HAL_I2S_DMAStop+0x330>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d101      	bne.n	8006f7a <HAL_I2S_DMAStop+0x10e>
 8006f76:	4b8a      	ldr	r3, [pc, #552]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 8006f78:	e001      	b.n	8006f7e <HAL_I2S_DMAStop+0x112>
 8006f7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4985      	ldr	r1, [pc, #532]	; (800719c <HAL_I2S_DMAStop+0x330>)
 8006f86:	428b      	cmp	r3, r1
 8006f88:	d101      	bne.n	8006f8e <HAL_I2S_DMAStop+0x122>
 8006f8a:	4b85      	ldr	r3, [pc, #532]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 8006f8c:	e001      	b.n	8006f92 <HAL_I2S_DMAStop+0x126>
 8006f8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f96:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006f98:	2300      	movs	r3, #0
 8006f9a:	613b      	str	r3, [r7, #16]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a7e      	ldr	r2, [pc, #504]	; (800719c <HAL_I2S_DMAStop+0x330>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d101      	bne.n	8006faa <HAL_I2S_DMAStop+0x13e>
 8006fa6:	4b7e      	ldr	r3, [pc, #504]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 8006fa8:	e001      	b.n	8006fae <HAL_I2S_DMAStop+0x142>
 8006faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	613b      	str	r3, [r7, #16]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a79      	ldr	r2, [pc, #484]	; (800719c <HAL_I2S_DMAStop+0x330>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d101      	bne.n	8006fc0 <HAL_I2S_DMAStop+0x154>
 8006fbc:	4b78      	ldr	r3, [pc, #480]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 8006fbe:	e001      	b.n	8006fc4 <HAL_I2S_DMAStop+0x158>
 8006fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	613b      	str	r3, [r7, #16]
 8006fc8:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a73      	ldr	r2, [pc, #460]	; (800719c <HAL_I2S_DMAStop+0x330>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d101      	bne.n	8006fd8 <HAL_I2S_DMAStop+0x16c>
 8006fd4:	4b72      	ldr	r3, [pc, #456]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 8006fd6:	e001      	b.n	8006fdc <HAL_I2S_DMAStop+0x170>
 8006fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	496e      	ldr	r1, [pc, #440]	; (800719c <HAL_I2S_DMAStop+0x330>)
 8006fe4:	428b      	cmp	r3, r1
 8006fe6:	d101      	bne.n	8006fec <HAL_I2S_DMAStop+0x180>
 8006fe8:	4b6d      	ldr	r3, [pc, #436]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 8006fea:	e001      	b.n	8006ff0 <HAL_I2S_DMAStop+0x184>
 8006fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ff0:	f022 0201 	bic.w	r2, r2, #1
 8006ff4:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10c      	bne.n	8007018 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8007016:	e0fa      	b.n	800720e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a5f      	ldr	r2, [pc, #380]	; (800719c <HAL_I2S_DMAStop+0x330>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d101      	bne.n	8007026 <HAL_I2S_DMAStop+0x1ba>
 8007022:	4b5f      	ldr	r3, [pc, #380]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 8007024:	e001      	b.n	800702a <HAL_I2S_DMAStop+0x1be>
 8007026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800702a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800702c:	e0ef      	b.n	800720e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007036:	d005      	beq.n	8007044 <HAL_I2S_DMAStop+0x1d8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007040:	f040 80e5 	bne.w	800720e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00f      	beq.n	800706c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007050:	4618      	mov	r0, r3
 8007052:	f7fc f91b 	bl	800328c <HAL_DMA_Abort>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d007      	beq.n	800706c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007060:	f043 0208 	orr.w	r2, r3, #8
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b05      	cmp	r3, #5
 8007076:	f040 809a 	bne.w	80071ae <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00f      	beq.n	80070a2 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007086:	4618      	mov	r0, r3
 8007088:	f7fc f900 	bl	800328c <HAL_DMA_Abort>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d007      	beq.n	80070a2 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007096:	f043 0208 	orr.w	r2, r3, #8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80070a2:	f7fb fe4d 	bl	8002d40 <HAL_GetTick>
 80070a6:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80070a8:	e012      	b.n	80070d0 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80070aa:	f7fb fe49 	bl	8002d40 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b64      	cmp	r3, #100	; 0x64
 80070b6:	d90b      	bls.n	80070d0 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070bc:	f043 0201 	orr.w	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a31      	ldr	r2, [pc, #196]	; (800719c <HAL_I2S_DMAStop+0x330>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d101      	bne.n	80070de <HAL_I2S_DMAStop+0x272>
 80070da:	4b31      	ldr	r3, [pc, #196]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 80070dc:	e001      	b.n	80070e2 <HAL_I2S_DMAStop+0x276>
 80070de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d1de      	bne.n	80070aa <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80070ec:	e012      	b.n	8007114 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80070ee:	f7fb fe27 	bl	8002d40 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b64      	cmp	r3, #100	; 0x64
 80070fa:	d90b      	bls.n	8007114 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007100:	f043 0201 	orr.w	r2, r3, #1
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a20      	ldr	r2, [pc, #128]	; (800719c <HAL_I2S_DMAStop+0x330>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d101      	bne.n	8007122 <HAL_I2S_DMAStop+0x2b6>
 800711e:	4b20      	ldr	r3, [pc, #128]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 8007120:	e001      	b.n	8007126 <HAL_I2S_DMAStop+0x2ba>
 8007122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712c:	2b80      	cmp	r3, #128	; 0x80
 800712e:	d0de      	beq.n	80070ee <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a19      	ldr	r2, [pc, #100]	; (800719c <HAL_I2S_DMAStop+0x330>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d101      	bne.n	800713e <HAL_I2S_DMAStop+0x2d2>
 800713a:	4b19      	ldr	r3, [pc, #100]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 800713c:	e001      	b.n	8007142 <HAL_I2S_DMAStop+0x2d6>
 800713e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4914      	ldr	r1, [pc, #80]	; (800719c <HAL_I2S_DMAStop+0x330>)
 800714a:	428b      	cmp	r3, r1
 800714c:	d101      	bne.n	8007152 <HAL_I2S_DMAStop+0x2e6>
 800714e:	4b14      	ldr	r3, [pc, #80]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 8007150:	e001      	b.n	8007156 <HAL_I2S_DMAStop+0x2ea>
 8007152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800715a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a0d      	ldr	r2, [pc, #52]	; (800719c <HAL_I2S_DMAStop+0x330>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d101      	bne.n	800716e <HAL_I2S_DMAStop+0x302>
 800716a:	4b0d      	ldr	r3, [pc, #52]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 800716c:	e001      	b.n	8007172 <HAL_I2S_DMAStop+0x306>
 800716e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a07      	ldr	r2, [pc, #28]	; (800719c <HAL_I2S_DMAStop+0x330>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d101      	bne.n	8007186 <HAL_I2S_DMAStop+0x31a>
 8007182:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 8007184:	e001      	b.n	800718a <HAL_I2S_DMAStop+0x31e>
 8007186:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4902      	ldr	r1, [pc, #8]	; (800719c <HAL_I2S_DMAStop+0x330>)
 8007192:	428b      	cmp	r3, r1
 8007194:	d106      	bne.n	80071a4 <HAL_I2S_DMAStop+0x338>
 8007196:	4b02      	ldr	r3, [pc, #8]	; (80071a0 <HAL_I2S_DMAStop+0x334>)
 8007198:	e006      	b.n	80071a8 <HAL_I2S_DMAStop+0x33c>
 800719a:	bf00      	nop
 800719c:	40003800 	.word	0x40003800
 80071a0:	40003400 	.word	0x40003400
 80071a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071a8:	f022 0202 	bic.w	r2, r2, #2
 80071ac:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69da      	ldr	r2, [r3, #28]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071bc:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80071be:	2300      	movs	r3, #0
 80071c0:	60bb      	str	r3, [r7, #8]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	60bb      	str	r3, [r7, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ec:	d10c      	bne.n	8007208 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	77fb      	strb	r3, [r7, #31]
 8007206:	e002      	b.n	800720e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8007216:	7ffb      	ldrb	r3, [r7, #31]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3720      	adds	r7, #32
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007242:	b2db      	uxtb	r3, r3
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10e      	bne.n	8007284 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0202 	bic.w	r2, r2, #2
 8007274:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7f9 fa5b 	bl	8000740 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7f9 fa5f 	bl	8000764 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0203 	bic.w	r2, r2, #3
 80072ca:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e4:	f043 0208 	orr.w	r2, r3, #8
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f7f9 fba5 	bl	8000a3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	881a      	ldrh	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	1c9a      	adds	r2, r3, #2
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10e      	bne.n	800734e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800733e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7f9 f9f9 	bl	8000740 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	b292      	uxth	r2, r2
 800736a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	1c9a      	adds	r2, r3, #2
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10e      	bne.n	80073ac <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800739c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff ff3a 	bl	8007220 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d13a      	bne.n	8007446 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d109      	bne.n	80073ee <I2S_IRQHandler+0x3a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e4:	2b40      	cmp	r3, #64	; 0x40
 80073e6:	d102      	bne.n	80073ee <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff ffb4 	bl	8007356 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f4:	2b40      	cmp	r3, #64	; 0x40
 80073f6:	d126      	bne.n	8007446 <I2S_IRQHandler+0x92>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b20      	cmp	r3, #32
 8007404:	d11f      	bne.n	8007446 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007414:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007416:	2300      	movs	r3, #0
 8007418:	613b      	str	r3, [r7, #16]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	613b      	str	r3, [r7, #16]
 800742a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007438:	f043 0202 	orr.w	r2, r3, #2
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7f9 fafb 	bl	8000a3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b03      	cmp	r3, #3
 8007450:	d136      	bne.n	80074c0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b02      	cmp	r3, #2
 800745a:	d109      	bne.n	8007470 <I2S_IRQHandler+0xbc>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007466:	2b80      	cmp	r3, #128	; 0x80
 8007468:	d102      	bne.n	8007470 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff ff45 	bl	80072fa <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b08      	cmp	r3, #8
 8007478:	d122      	bne.n	80074c0 <I2S_IRQHandler+0x10c>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b20      	cmp	r3, #32
 8007486:	d11b      	bne.n	80074c0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007496:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	f043 0204 	orr.w	r2, r3, #4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7f9 fabe 	bl	8000a3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074c0:	bf00      	nop
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	4613      	mov	r3, r2
 80074d6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80074d8:	f7fb fc32 	bl	8002d40 <HAL_GetTick>
 80074dc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80074de:	e018      	b.n	8007512 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d014      	beq.n	8007512 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80074e8:	f7fb fc2a 	bl	8002d40 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d902      	bls.n	80074fe <I2S_WaitFlagStateUntilTimeout+0x36>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e00f      	b.n	8007532 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	4013      	ands	r3, r2
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	429a      	cmp	r2, r3
 8007520:	bf0c      	ite	eq
 8007522:	2301      	moveq	r3, #1
 8007524:	2300      	movne	r3, #0
 8007526:	b2db      	uxtb	r3, r3
 8007528:	461a      	mov	r2, r3
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	429a      	cmp	r2, r3
 800752e:	d1d7      	bne.n	80074e0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4aa2      	ldr	r2, [pc, #648]	; (80077dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d101      	bne.n	800755a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007556:	4ba2      	ldr	r3, [pc, #648]	; (80077e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007558:	e001      	b.n	800755e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800755a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a9b      	ldr	r2, [pc, #620]	; (80077dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d101      	bne.n	8007578 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007574:	4b9a      	ldr	r3, [pc, #616]	; (80077e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007576:	e001      	b.n	800757c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007588:	d004      	beq.n	8007594 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	f040 8099 	bne.w	80076c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b02      	cmp	r3, #2
 800759c:	d107      	bne.n	80075ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f925 	bl	80077f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d107      	bne.n	80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f9c8 	bl	8007958 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ce:	2b40      	cmp	r3, #64	; 0x40
 80075d0:	d13a      	bne.n	8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f003 0320 	and.w	r3, r3, #32
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d035      	beq.n	8007648 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a7e      	ldr	r2, [pc, #504]	; (80077dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d101      	bne.n	80075ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80075e6:	4b7e      	ldr	r3, [pc, #504]	; (80077e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80075e8:	e001      	b.n	80075ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80075ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4979      	ldr	r1, [pc, #484]	; (80077dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80075f6:	428b      	cmp	r3, r1
 80075f8:	d101      	bne.n	80075fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80075fa:	4b79      	ldr	r3, [pc, #484]	; (80077e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80075fc:	e001      	b.n	8007602 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80075fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007602:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007606:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007616:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763a:	f043 0202 	orr.w	r2, r3, #2
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7f9 f9fa 	bl	8000a3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b08      	cmp	r3, #8
 8007650:	f040 80be 	bne.w	80077d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 80b8 	beq.w	80077d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800766e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a59      	ldr	r2, [pc, #356]	; (80077dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d101      	bne.n	800767e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800767a:	4b59      	ldr	r3, [pc, #356]	; (80077e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800767c:	e001      	b.n	8007682 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800767e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4954      	ldr	r1, [pc, #336]	; (80077dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800768a:	428b      	cmp	r3, r1
 800768c:	d101      	bne.n	8007692 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800768e:	4b54      	ldr	r3, [pc, #336]	; (80077e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007690:	e001      	b.n	8007696 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007692:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007696:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800769a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800769c:	2300      	movs	r3, #0
 800769e:	60bb      	str	r3, [r7, #8]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	60bb      	str	r3, [r7, #8]
 80076a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b6:	f043 0204 	orr.w	r2, r3, #4
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7f9 f9bc 	bl	8000a3c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80076c4:	e084      	b.n	80077d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d107      	bne.n	80076e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f8be 	bl	800785c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d107      	bne.n	80076fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f8fd 	bl	80078f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	2b40      	cmp	r3, #64	; 0x40
 8007702:	d12f      	bne.n	8007764 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	d02a      	beq.n	8007764 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800771c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a2e      	ldr	r2, [pc, #184]	; (80077dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d101      	bne.n	800772c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007728:	4b2d      	ldr	r3, [pc, #180]	; (80077e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800772a:	e001      	b.n	8007730 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800772c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4929      	ldr	r1, [pc, #164]	; (80077dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007738:	428b      	cmp	r3, r1
 800773a:	d101      	bne.n	8007740 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800773c:	4b28      	ldr	r3, [pc, #160]	; (80077e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800773e:	e001      	b.n	8007744 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007740:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007744:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007748:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007756:	f043 0202 	orr.w	r2, r3, #2
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7f9 f96c 	bl	8000a3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	2b08      	cmp	r3, #8
 800776c:	d131      	bne.n	80077d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f003 0320 	and.w	r3, r3, #32
 8007774:	2b00      	cmp	r3, #0
 8007776:	d02c      	beq.n	80077d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a17      	ldr	r2, [pc, #92]	; (80077dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d101      	bne.n	8007786 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007782:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007784:	e001      	b.n	800778a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007786:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4912      	ldr	r1, [pc, #72]	; (80077dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007792:	428b      	cmp	r3, r1
 8007794:	d101      	bne.n	800779a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007796:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007798:	e001      	b.n	800779e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800779a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800779e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80077a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80077b2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c0:	f043 0204 	orr.w	r2, r3, #4
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7f9 f937 	bl	8000a3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077ce:	e000      	b.n	80077d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80077d0:	bf00      	nop
}
 80077d2:	bf00      	nop
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	40003800 	.word	0x40003800
 80077e0:	40003400 	.word	0x40003400

080077e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	1c99      	adds	r1, r3, #2
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6251      	str	r1, [r2, #36]	; 0x24
 800780a:	881a      	ldrh	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d113      	bne.n	8007852 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007838:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d106      	bne.n	8007852 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff ffc9 	bl	80077e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	1c99      	adds	r1, r3, #2
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	6251      	str	r1, [r2, #36]	; 0x24
 800786e:	8819      	ldrh	r1, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a1d      	ldr	r2, [pc, #116]	; (80078ec <I2SEx_TxISR_I2SExt+0x90>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d101      	bne.n	800787e <I2SEx_TxISR_I2SExt+0x22>
 800787a:	4b1d      	ldr	r3, [pc, #116]	; (80078f0 <I2SEx_TxISR_I2SExt+0x94>)
 800787c:	e001      	b.n	8007882 <I2SEx_TxISR_I2SExt+0x26>
 800787e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007882:	460a      	mov	r2, r1
 8007884:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788a:	b29b      	uxth	r3, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d121      	bne.n	80078e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a12      	ldr	r2, [pc, #72]	; (80078ec <I2SEx_TxISR_I2SExt+0x90>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d101      	bne.n	80078ac <I2SEx_TxISR_I2SExt+0x50>
 80078a8:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <I2SEx_TxISR_I2SExt+0x94>)
 80078aa:	e001      	b.n	80078b0 <I2SEx_TxISR_I2SExt+0x54>
 80078ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	490d      	ldr	r1, [pc, #52]	; (80078ec <I2SEx_TxISR_I2SExt+0x90>)
 80078b8:	428b      	cmp	r3, r1
 80078ba:	d101      	bne.n	80078c0 <I2SEx_TxISR_I2SExt+0x64>
 80078bc:	4b0c      	ldr	r3, [pc, #48]	; (80078f0 <I2SEx_TxISR_I2SExt+0x94>)
 80078be:	e001      	b.n	80078c4 <I2SEx_TxISR_I2SExt+0x68>
 80078c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ff81 	bl	80077e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	40003800 	.word	0x40003800
 80078f0:	40003400 	.word	0x40003400

080078f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68d8      	ldr	r0, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	1c99      	adds	r1, r3, #2
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800790c:	b282      	uxth	r2, r0
 800790e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007914:	b29b      	uxth	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	b29a      	uxth	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d113      	bne.n	8007950 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007936:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d106      	bne.n	8007950 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff ff4a 	bl	80077e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a20      	ldr	r2, [pc, #128]	; (80079e8 <I2SEx_RxISR_I2SExt+0x90>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d101      	bne.n	800796e <I2SEx_RxISR_I2SExt+0x16>
 800796a:	4b20      	ldr	r3, [pc, #128]	; (80079ec <I2SEx_RxISR_I2SExt+0x94>)
 800796c:	e001      	b.n	8007972 <I2SEx_RxISR_I2SExt+0x1a>
 800796e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007972:	68d8      	ldr	r0, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	1c99      	adds	r1, r3, #2
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800797e:	b282      	uxth	r2, r0
 8007980:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d121      	bne.n	80079de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a12      	ldr	r2, [pc, #72]	; (80079e8 <I2SEx_RxISR_I2SExt+0x90>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d101      	bne.n	80079a8 <I2SEx_RxISR_I2SExt+0x50>
 80079a4:	4b11      	ldr	r3, [pc, #68]	; (80079ec <I2SEx_RxISR_I2SExt+0x94>)
 80079a6:	e001      	b.n	80079ac <I2SEx_RxISR_I2SExt+0x54>
 80079a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	490d      	ldr	r1, [pc, #52]	; (80079e8 <I2SEx_RxISR_I2SExt+0x90>)
 80079b4:	428b      	cmp	r3, r1
 80079b6:	d101      	bne.n	80079bc <I2SEx_RxISR_I2SExt+0x64>
 80079b8:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <I2SEx_RxISR_I2SExt+0x94>)
 80079ba:	e001      	b.n	80079c0 <I2SEx_RxISR_I2SExt+0x68>
 80079bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80079c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d106      	bne.n	80079de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff ff03 	bl	80077e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	40003800 	.word	0x40003800
 80079ec:	40003400 	.word	0x40003400

080079f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e264      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d075      	beq.n	8007afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a0e:	4ba3      	ldr	r3, [pc, #652]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 030c 	and.w	r3, r3, #12
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	d00c      	beq.n	8007a34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a1a:	4ba0      	ldr	r3, [pc, #640]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a22:	2b08      	cmp	r3, #8
 8007a24:	d112      	bne.n	8007a4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a26:	4b9d      	ldr	r3, [pc, #628]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a32:	d10b      	bne.n	8007a4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a34:	4b99      	ldr	r3, [pc, #612]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d05b      	beq.n	8007af8 <HAL_RCC_OscConfig+0x108>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d157      	bne.n	8007af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e23f      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a54:	d106      	bne.n	8007a64 <HAL_RCC_OscConfig+0x74>
 8007a56:	4b91      	ldr	r3, [pc, #580]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a90      	ldr	r2, [pc, #576]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e01d      	b.n	8007aa0 <HAL_RCC_OscConfig+0xb0>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a6c:	d10c      	bne.n	8007a88 <HAL_RCC_OscConfig+0x98>
 8007a6e:	4b8b      	ldr	r3, [pc, #556]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a8a      	ldr	r2, [pc, #552]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	4b88      	ldr	r3, [pc, #544]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a87      	ldr	r2, [pc, #540]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	e00b      	b.n	8007aa0 <HAL_RCC_OscConfig+0xb0>
 8007a88:	4b84      	ldr	r3, [pc, #528]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a83      	ldr	r2, [pc, #524]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	4b81      	ldr	r3, [pc, #516]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a80      	ldr	r2, [pc, #512]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d013      	beq.n	8007ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa8:	f7fb f94a 	bl	8002d40 <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ab0:	f7fb f946 	bl	8002d40 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b64      	cmp	r3, #100	; 0x64
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e204      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ac2:	4b76      	ldr	r3, [pc, #472]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0f0      	beq.n	8007ab0 <HAL_RCC_OscConfig+0xc0>
 8007ace:	e014      	b.n	8007afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad0:	f7fb f936 	bl	8002d40 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ad8:	f7fb f932 	bl	8002d40 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b64      	cmp	r3, #100	; 0x64
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e1f0      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aea:	4b6c      	ldr	r3, [pc, #432]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1f0      	bne.n	8007ad8 <HAL_RCC_OscConfig+0xe8>
 8007af6:	e000      	b.n	8007afa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d063      	beq.n	8007bce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b06:	4b65      	ldr	r3, [pc, #404]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f003 030c 	and.w	r3, r3, #12
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b12:	4b62      	ldr	r3, [pc, #392]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d11c      	bne.n	8007b58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b1e:	4b5f      	ldr	r3, [pc, #380]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d116      	bne.n	8007b58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b2a:	4b5c      	ldr	r3, [pc, #368]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <HAL_RCC_OscConfig+0x152>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d001      	beq.n	8007b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e1c4      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b42:	4b56      	ldr	r3, [pc, #344]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	4952      	ldr	r1, [pc, #328]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b56:	e03a      	b.n	8007bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d020      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b60:	4b4f      	ldr	r3, [pc, #316]	; (8007ca0 <HAL_RCC_OscConfig+0x2b0>)
 8007b62:	2201      	movs	r2, #1
 8007b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b66:	f7fb f8eb 	bl	8002d40 <HAL_GetTick>
 8007b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b6c:	e008      	b.n	8007b80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b6e:	f7fb f8e7 	bl	8002d40 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e1a5      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b80:	4b46      	ldr	r3, [pc, #280]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0f0      	beq.n	8007b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b8c:	4b43      	ldr	r3, [pc, #268]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	4940      	ldr	r1, [pc, #256]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	600b      	str	r3, [r1, #0]
 8007ba0:	e015      	b.n	8007bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ba2:	4b3f      	ldr	r3, [pc, #252]	; (8007ca0 <HAL_RCC_OscConfig+0x2b0>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba8:	f7fb f8ca 	bl	8002d40 <HAL_GetTick>
 8007bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bae:	e008      	b.n	8007bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bb0:	f7fb f8c6 	bl	8002d40 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e184      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bc2:	4b36      	ldr	r3, [pc, #216]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1f0      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d030      	beq.n	8007c3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d016      	beq.n	8007c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007be2:	4b30      	ldr	r3, [pc, #192]	; (8007ca4 <HAL_RCC_OscConfig+0x2b4>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be8:	f7fb f8aa 	bl	8002d40 <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bee:	e008      	b.n	8007c02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bf0:	f7fb f8a6 	bl	8002d40 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e164      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c02:	4b26      	ldr	r3, [pc, #152]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0f0      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x200>
 8007c0e:	e015      	b.n	8007c3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c10:	4b24      	ldr	r3, [pc, #144]	; (8007ca4 <HAL_RCC_OscConfig+0x2b4>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c16:	f7fb f893 	bl	8002d40 <HAL_GetTick>
 8007c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c1c:	e008      	b.n	8007c30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c1e:	f7fb f88f 	bl	8002d40 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e14d      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c30:	4b1a      	ldr	r3, [pc, #104]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f0      	bne.n	8007c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 80a0 	beq.w	8007d8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c4e:	4b13      	ldr	r3, [pc, #76]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10f      	bne.n	8007c7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60bb      	str	r3, [r7, #8]
 8007c5e:	4b0f      	ldr	r3, [pc, #60]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	4a0e      	ldr	r2, [pc, #56]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c68:	6413      	str	r3, [r2, #64]	; 0x40
 8007c6a:	4b0c      	ldr	r3, [pc, #48]	; (8007c9c <HAL_RCC_OscConfig+0x2ac>)
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c72:	60bb      	str	r3, [r7, #8]
 8007c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <HAL_RCC_OscConfig+0x2b8>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d121      	bne.n	8007cca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c86:	4b08      	ldr	r3, [pc, #32]	; (8007ca8 <HAL_RCC_OscConfig+0x2b8>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a07      	ldr	r2, [pc, #28]	; (8007ca8 <HAL_RCC_OscConfig+0x2b8>)
 8007c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c92:	f7fb f855 	bl	8002d40 <HAL_GetTick>
 8007c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c98:	e011      	b.n	8007cbe <HAL_RCC_OscConfig+0x2ce>
 8007c9a:	bf00      	nop
 8007c9c:	40023800 	.word	0x40023800
 8007ca0:	42470000 	.word	0x42470000
 8007ca4:	42470e80 	.word	0x42470e80
 8007ca8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cac:	f7fb f848 	bl	8002d40 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e106      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cbe:	4b85      	ldr	r3, [pc, #532]	; (8007ed4 <HAL_RCC_OscConfig+0x4e4>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0f0      	beq.n	8007cac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d106      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x2f0>
 8007cd2:	4b81      	ldr	r3, [pc, #516]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	4a80      	ldr	r2, [pc, #512]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007cd8:	f043 0301 	orr.w	r3, r3, #1
 8007cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8007cde:	e01c      	b.n	8007d1a <HAL_RCC_OscConfig+0x32a>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	2b05      	cmp	r3, #5
 8007ce6:	d10c      	bne.n	8007d02 <HAL_RCC_OscConfig+0x312>
 8007ce8:	4b7b      	ldr	r3, [pc, #492]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cec:	4a7a      	ldr	r2, [pc, #488]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007cee:	f043 0304 	orr.w	r3, r3, #4
 8007cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8007cf4:	4b78      	ldr	r3, [pc, #480]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf8:	4a77      	ldr	r2, [pc, #476]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8007d00:	e00b      	b.n	8007d1a <HAL_RCC_OscConfig+0x32a>
 8007d02:	4b75      	ldr	r3, [pc, #468]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d06:	4a74      	ldr	r2, [pc, #464]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d0e:	4b72      	ldr	r3, [pc, #456]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d12:	4a71      	ldr	r2, [pc, #452]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007d14:	f023 0304 	bic.w	r3, r3, #4
 8007d18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d015      	beq.n	8007d4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d22:	f7fb f80d 	bl	8002d40 <HAL_GetTick>
 8007d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d28:	e00a      	b.n	8007d40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d2a:	f7fb f809 	bl	8002d40 <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d901      	bls.n	8007d40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e0c5      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d40:	4b65      	ldr	r3, [pc, #404]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d0ee      	beq.n	8007d2a <HAL_RCC_OscConfig+0x33a>
 8007d4c:	e014      	b.n	8007d78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d4e:	f7fa fff7 	bl	8002d40 <HAL_GetTick>
 8007d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d54:	e00a      	b.n	8007d6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d56:	f7fa fff3 	bl	8002d40 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d901      	bls.n	8007d6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e0af      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d6c:	4b5a      	ldr	r3, [pc, #360]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1ee      	bne.n	8007d56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d105      	bne.n	8007d8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d7e:	4b56      	ldr	r3, [pc, #344]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d82:	4a55      	ldr	r2, [pc, #340]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 809b 	beq.w	8007eca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d94:	4b50      	ldr	r3, [pc, #320]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f003 030c 	and.w	r3, r3, #12
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d05c      	beq.n	8007e5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d141      	bne.n	8007e2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007da8:	4b4c      	ldr	r3, [pc, #304]	; (8007edc <HAL_RCC_OscConfig+0x4ec>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dae:	f7fa ffc7 	bl	8002d40 <HAL_GetTick>
 8007db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007db4:	e008      	b.n	8007dc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007db6:	f7fa ffc3 	bl	8002d40 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e081      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dc8:	4b43      	ldr	r3, [pc, #268]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1f0      	bne.n	8007db6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	69da      	ldr	r2, [r3, #28]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	019b      	lsls	r3, r3, #6
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dea:	085b      	lsrs	r3, r3, #1
 8007dec:	3b01      	subs	r3, #1
 8007dee:	041b      	lsls	r3, r3, #16
 8007df0:	431a      	orrs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	061b      	lsls	r3, r3, #24
 8007df8:	4937      	ldr	r1, [pc, #220]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dfe:	4b37      	ldr	r3, [pc, #220]	; (8007edc <HAL_RCC_OscConfig+0x4ec>)
 8007e00:	2201      	movs	r2, #1
 8007e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e04:	f7fa ff9c 	bl	8002d40 <HAL_GetTick>
 8007e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e0c:	f7fa ff98 	bl	8002d40 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e056      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e1e:	4b2e      	ldr	r3, [pc, #184]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f0      	beq.n	8007e0c <HAL_RCC_OscConfig+0x41c>
 8007e2a:	e04e      	b.n	8007eca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e2c:	4b2b      	ldr	r3, [pc, #172]	; (8007edc <HAL_RCC_OscConfig+0x4ec>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e32:	f7fa ff85 	bl	8002d40 <HAL_GetTick>
 8007e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e38:	e008      	b.n	8007e4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e3a:	f7fa ff81 	bl	8002d40 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e03f      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e4c:	4b22      	ldr	r3, [pc, #136]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f0      	bne.n	8007e3a <HAL_RCC_OscConfig+0x44a>
 8007e58:	e037      	b.n	8007eca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d101      	bne.n	8007e66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e032      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e66:	4b1c      	ldr	r3, [pc, #112]	; (8007ed8 <HAL_RCC_OscConfig+0x4e8>)
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d028      	beq.n	8007ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d121      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d11a      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e96:	4013      	ands	r3, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d111      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	085b      	lsrs	r3, r3, #1
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d107      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d001      	beq.n	8007eca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	40007000 	.word	0x40007000
 8007ed8:	40023800 	.word	0x40023800
 8007edc:	42470060 	.word	0x42470060

08007ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e0cc      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ef4:	4b68      	ldr	r3, [pc, #416]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d90c      	bls.n	8007f1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f02:	4b65      	ldr	r3, [pc, #404]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f0a:	4b63      	ldr	r3, [pc, #396]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d001      	beq.n	8007f1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e0b8      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d020      	beq.n	8007f6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f34:	4b59      	ldr	r3, [pc, #356]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	4a58      	ldr	r2, [pc, #352]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0308 	and.w	r3, r3, #8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f4c:	4b53      	ldr	r3, [pc, #332]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	4a52      	ldr	r2, [pc, #328]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f58:	4b50      	ldr	r3, [pc, #320]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	494d      	ldr	r1, [pc, #308]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d044      	beq.n	8008000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d107      	bne.n	8007f8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f7e:	4b47      	ldr	r3, [pc, #284]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d119      	bne.n	8007fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e07f      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d003      	beq.n	8007f9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d107      	bne.n	8007fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f9e:	4b3f      	ldr	r3, [pc, #252]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d109      	bne.n	8007fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e06f      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fae:	4b3b      	ldr	r3, [pc, #236]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e067      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fbe:	4b37      	ldr	r3, [pc, #220]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f023 0203 	bic.w	r2, r3, #3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	4934      	ldr	r1, [pc, #208]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fd0:	f7fa feb6 	bl	8002d40 <HAL_GetTick>
 8007fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fd6:	e00a      	b.n	8007fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fd8:	f7fa feb2 	bl	8002d40 <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e04f      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fee:	4b2b      	ldr	r3, [pc, #172]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f003 020c 	and.w	r2, r3, #12
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d1eb      	bne.n	8007fd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008000:	4b25      	ldr	r3, [pc, #148]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d20c      	bcs.n	8008028 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800800e:	4b22      	ldr	r3, [pc, #136]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008016:	4b20      	ldr	r3, [pc, #128]	; (8008098 <HAL_RCC_ClockConfig+0x1b8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	d001      	beq.n	8008028 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e032      	b.n	800808e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d008      	beq.n	8008046 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008034:	4b19      	ldr	r3, [pc, #100]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	4916      	ldr	r1, [pc, #88]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8008042:	4313      	orrs	r3, r2
 8008044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008052:	4b12      	ldr	r3, [pc, #72]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	490e      	ldr	r1, [pc, #56]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 8008062:	4313      	orrs	r3, r2
 8008064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008066:	f000 f821 	bl	80080ac <HAL_RCC_GetSysClockFreq>
 800806a:	4602      	mov	r2, r0
 800806c:	4b0b      	ldr	r3, [pc, #44]	; (800809c <HAL_RCC_ClockConfig+0x1bc>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	091b      	lsrs	r3, r3, #4
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	490a      	ldr	r1, [pc, #40]	; (80080a0 <HAL_RCC_ClockConfig+0x1c0>)
 8008078:	5ccb      	ldrb	r3, [r1, r3]
 800807a:	fa22 f303 	lsr.w	r3, r2, r3
 800807e:	4a09      	ldr	r2, [pc, #36]	; (80080a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008082:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f7fa fe16 	bl	8002cb8 <HAL_InitTick>

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	40023c00 	.word	0x40023c00
 800809c:	40023800 	.word	0x40023800
 80080a0:	0801276c 	.word	0x0801276c
 80080a4:	20000040 	.word	0x20000040
 80080a8:	20000048 	.word	0x20000048

080080ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80080b0:	b084      	sub	sp, #16
 80080b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	607b      	str	r3, [r7, #4]
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	2300      	movs	r3, #0
 80080be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080c4:	4b67      	ldr	r3, [pc, #412]	; (8008264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f003 030c 	and.w	r3, r3, #12
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d00d      	beq.n	80080ec <HAL_RCC_GetSysClockFreq+0x40>
 80080d0:	2b08      	cmp	r3, #8
 80080d2:	f200 80bd 	bhi.w	8008250 <HAL_RCC_GetSysClockFreq+0x1a4>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <HAL_RCC_GetSysClockFreq+0x34>
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d003      	beq.n	80080e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80080de:	e0b7      	b.n	8008250 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080e0:	4b61      	ldr	r3, [pc, #388]	; (8008268 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80080e2:	60bb      	str	r3, [r7, #8]
       break;
 80080e4:	e0b7      	b.n	8008256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080e6:	4b61      	ldr	r3, [pc, #388]	; (800826c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80080e8:	60bb      	str	r3, [r7, #8]
      break;
 80080ea:	e0b4      	b.n	8008256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080ec:	4b5d      	ldr	r3, [pc, #372]	; (8008264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080f6:	4b5b      	ldr	r3, [pc, #364]	; (8008264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d04d      	beq.n	800819e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008102:	4b58      	ldr	r3, [pc, #352]	; (8008264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	099b      	lsrs	r3, r3, #6
 8008108:	461a      	mov	r2, r3
 800810a:	f04f 0300 	mov.w	r3, #0
 800810e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008112:	f04f 0100 	mov.w	r1, #0
 8008116:	ea02 0800 	and.w	r8, r2, r0
 800811a:	ea03 0901 	and.w	r9, r3, r1
 800811e:	4640      	mov	r0, r8
 8008120:	4649      	mov	r1, r9
 8008122:	f04f 0200 	mov.w	r2, #0
 8008126:	f04f 0300 	mov.w	r3, #0
 800812a:	014b      	lsls	r3, r1, #5
 800812c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008130:	0142      	lsls	r2, r0, #5
 8008132:	4610      	mov	r0, r2
 8008134:	4619      	mov	r1, r3
 8008136:	ebb0 0008 	subs.w	r0, r0, r8
 800813a:	eb61 0109 	sbc.w	r1, r1, r9
 800813e:	f04f 0200 	mov.w	r2, #0
 8008142:	f04f 0300 	mov.w	r3, #0
 8008146:	018b      	lsls	r3, r1, #6
 8008148:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800814c:	0182      	lsls	r2, r0, #6
 800814e:	1a12      	subs	r2, r2, r0
 8008150:	eb63 0301 	sbc.w	r3, r3, r1
 8008154:	f04f 0000 	mov.w	r0, #0
 8008158:	f04f 0100 	mov.w	r1, #0
 800815c:	00d9      	lsls	r1, r3, #3
 800815e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008162:	00d0      	lsls	r0, r2, #3
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	eb12 0208 	adds.w	r2, r2, r8
 800816c:	eb43 0309 	adc.w	r3, r3, r9
 8008170:	f04f 0000 	mov.w	r0, #0
 8008174:	f04f 0100 	mov.w	r1, #0
 8008178:	0259      	lsls	r1, r3, #9
 800817a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800817e:	0250      	lsls	r0, r2, #9
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4610      	mov	r0, r2
 8008186:	4619      	mov	r1, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	461a      	mov	r2, r3
 800818c:	f04f 0300 	mov.w	r3, #0
 8008190:	f7f8 f876 	bl	8000280 <__aeabi_uldivmod>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4613      	mov	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	e04a      	b.n	8008234 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800819e:	4b31      	ldr	r3, [pc, #196]	; (8008264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	099b      	lsrs	r3, r3, #6
 80081a4:	461a      	mov	r2, r3
 80081a6:	f04f 0300 	mov.w	r3, #0
 80081aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80081ae:	f04f 0100 	mov.w	r1, #0
 80081b2:	ea02 0400 	and.w	r4, r2, r0
 80081b6:	ea03 0501 	and.w	r5, r3, r1
 80081ba:	4620      	mov	r0, r4
 80081bc:	4629      	mov	r1, r5
 80081be:	f04f 0200 	mov.w	r2, #0
 80081c2:	f04f 0300 	mov.w	r3, #0
 80081c6:	014b      	lsls	r3, r1, #5
 80081c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80081cc:	0142      	lsls	r2, r0, #5
 80081ce:	4610      	mov	r0, r2
 80081d0:	4619      	mov	r1, r3
 80081d2:	1b00      	subs	r0, r0, r4
 80081d4:	eb61 0105 	sbc.w	r1, r1, r5
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	018b      	lsls	r3, r1, #6
 80081e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80081e6:	0182      	lsls	r2, r0, #6
 80081e8:	1a12      	subs	r2, r2, r0
 80081ea:	eb63 0301 	sbc.w	r3, r3, r1
 80081ee:	f04f 0000 	mov.w	r0, #0
 80081f2:	f04f 0100 	mov.w	r1, #0
 80081f6:	00d9      	lsls	r1, r3, #3
 80081f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081fc:	00d0      	lsls	r0, r2, #3
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	1912      	adds	r2, r2, r4
 8008204:	eb45 0303 	adc.w	r3, r5, r3
 8008208:	f04f 0000 	mov.w	r0, #0
 800820c:	f04f 0100 	mov.w	r1, #0
 8008210:	0299      	lsls	r1, r3, #10
 8008212:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008216:	0290      	lsls	r0, r2, #10
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4610      	mov	r0, r2
 800821e:	4619      	mov	r1, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	461a      	mov	r2, r3
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	f7f8 f82a 	bl	8000280 <__aeabi_uldivmod>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	4613      	mov	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008234:	4b0b      	ldr	r3, [pc, #44]	; (8008264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	0c1b      	lsrs	r3, r3, #16
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	3301      	adds	r3, #1
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	fbb2 f3f3 	udiv	r3, r2, r3
 800824c:	60bb      	str	r3, [r7, #8]
      break;
 800824e:	e002      	b.n	8008256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008250:	4b05      	ldr	r3, [pc, #20]	; (8008268 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008252:	60bb      	str	r3, [r7, #8]
      break;
 8008254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008256:	68bb      	ldr	r3, [r7, #8]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008262:	bf00      	nop
 8008264:	40023800 	.word	0x40023800
 8008268:	00f42400 	.word	0x00f42400
 800826c:	007a1200 	.word	0x007a1200

08008270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008274:	4b03      	ldr	r3, [pc, #12]	; (8008284 <HAL_RCC_GetHCLKFreq+0x14>)
 8008276:	681b      	ldr	r3, [r3, #0]
}
 8008278:	4618      	mov	r0, r3
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	20000040 	.word	0x20000040

08008288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800828c:	f7ff fff0 	bl	8008270 <HAL_RCC_GetHCLKFreq>
 8008290:	4602      	mov	r2, r0
 8008292:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	0a9b      	lsrs	r3, r3, #10
 8008298:	f003 0307 	and.w	r3, r3, #7
 800829c:	4903      	ldr	r1, [pc, #12]	; (80082ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800829e:	5ccb      	ldrb	r3, [r1, r3]
 80082a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	40023800 	.word	0x40023800
 80082ac:	0801277c 	.word	0x0801277c

080082b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d105      	bne.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d035      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80082d8:	4b62      	ldr	r3, [pc, #392]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082de:	f7fa fd2f 	bl	8002d40 <HAL_GetTick>
 80082e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082e4:	e008      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80082e6:	f7fa fd2b 	bl	8002d40 <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d901      	bls.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e0b0      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082f8:	4b5b      	ldr	r3, [pc, #364]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1f0      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	019a      	lsls	r2, r3, #6
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	071b      	lsls	r3, r3, #28
 8008310:	4955      	ldr	r1, [pc, #340]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008312:	4313      	orrs	r3, r2
 8008314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008318:	4b52      	ldr	r3, [pc, #328]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800831a:	2201      	movs	r2, #1
 800831c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800831e:	f7fa fd0f 	bl	8002d40 <HAL_GetTick>
 8008322:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008324:	e008      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008326:	f7fa fd0b 	bl	8002d40 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b02      	cmp	r3, #2
 8008332:	d901      	bls.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e090      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008338:	4b4b      	ldr	r3, [pc, #300]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0f0      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0302 	and.w	r3, r3, #2
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8083 	beq.w	8008458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	4b44      	ldr	r3, [pc, #272]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	4a43      	ldr	r2, [pc, #268]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800835c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008360:	6413      	str	r3, [r2, #64]	; 0x40
 8008362:	4b41      	ldr	r3, [pc, #260]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800836e:	4b3f      	ldr	r3, [pc, #252]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a3e      	ldr	r2, [pc, #248]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008378:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800837a:	f7fa fce1 	bl	8002d40 <HAL_GetTick>
 800837e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008380:	e008      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008382:	f7fa fcdd 	bl	8002d40 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2b02      	cmp	r3, #2
 800838e:	d901      	bls.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e062      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008394:	4b35      	ldr	r3, [pc, #212]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0f0      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083a0:	4b31      	ldr	r3, [pc, #196]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d02f      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d028      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083be:	4b2a      	ldr	r3, [pc, #168]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083c8:	4b29      	ldr	r3, [pc, #164]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80083ca:	2201      	movs	r2, #1
 80083cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083ce:	4b28      	ldr	r3, [pc, #160]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80083d4:	4a24      	ldr	r2, [pc, #144]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083da:	4b23      	ldr	r3, [pc, #140]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d114      	bne.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80083e6:	f7fa fcab 	bl	8002d40 <HAL_GetTick>
 80083ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ec:	e00a      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083ee:	f7fa fca7 	bl	8002d40 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d901      	bls.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e02a      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008404:	4b18      	ldr	r3, [pc, #96]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0ee      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800841c:	d10d      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800841e:	4b12      	ldr	r3, [pc, #72]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800842e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008432:	490d      	ldr	r1, [pc, #52]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008434:	4313      	orrs	r3, r2
 8008436:	608b      	str	r3, [r1, #8]
 8008438:	e005      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800843a:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	4a0a      	ldr	r2, [pc, #40]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008440:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008444:	6093      	str	r3, [r2, #8]
 8008446:	4b08      	ldr	r3, [pc, #32]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008448:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008452:	4905      	ldr	r1, [pc, #20]	; (8008468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008454:	4313      	orrs	r3, r2
 8008456:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	42470068 	.word	0x42470068
 8008468:	40023800 	.word	0x40023800
 800846c:	40007000 	.word	0x40007000
 8008470:	42470e40 	.word	0x42470e40

08008474 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2203      	movs	r2, #3
 8008480:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008482:	4b11      	ldr	r3, [pc, #68]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008488:	099b      	lsrs	r3, r3, #6
 800848a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008492:	4b0d      	ldr	r3, [pc, #52]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008498:	0f1b      	lsrs	r3, r3, #28
 800849a:	f003 0207 	and.w	r2, r3, #7
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80084a2:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80084aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80084ac:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80084ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80084bc:	bf00      	nop
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	40023800 	.word	0x40023800

080084cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80084dc:	2300      	movs	r3, #0
 80084de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d13e      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80084ea:	4b23      	ldr	r3, [pc, #140]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d005      	beq.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d12f      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008500:	4b1e      	ldr	r3, [pc, #120]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008502:	617b      	str	r3, [r7, #20]
          break;
 8008504:	e02f      	b.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008506:	4b1c      	ldr	r3, [pc, #112]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800850e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008512:	d108      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008514:	4b18      	ldr	r3, [pc, #96]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800851c:	4a18      	ldr	r2, [pc, #96]	; (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800851e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008522:	613b      	str	r3, [r7, #16]
 8008524:	e007      	b.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008526:	4b14      	ldr	r3, [pc, #80]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800852e:	4a15      	ldr	r2, [pc, #84]	; (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008530:	fbb2 f3f3 	udiv	r3, r2, r3
 8008534:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008536:	4b10      	ldr	r3, [pc, #64]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800853c:	099b      	lsrs	r3, r3, #6
 800853e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	fb02 f303 	mul.w	r3, r2, r3
 8008548:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800854a:	4b0b      	ldr	r3, [pc, #44]	; (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800854c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008550:	0f1b      	lsrs	r3, r3, #28
 8008552:	f003 0307 	and.w	r3, r3, #7
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	fbb2 f3f3 	udiv	r3, r2, r3
 800855c:	617b      	str	r3, [r7, #20]
          break;
 800855e:	e002      	b.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]
          break;
 8008564:	bf00      	nop
        }
      }
      break;
 8008566:	bf00      	nop
    }
  }
  return frequency;
 8008568:	697b      	ldr	r3, [r7, #20]
}
 800856a:	4618      	mov	r0, r3
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	40023800 	.word	0x40023800
 800857c:	00bb8000 	.word	0x00bb8000
 8008580:	007a1200 	.word	0x007a1200
 8008584:	00f42400 	.word	0x00f42400

08008588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e07b      	b.n	8008692 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d108      	bne.n	80085b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085aa:	d009      	beq.n	80085c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	61da      	str	r2, [r3, #28]
 80085b2:	e005      	b.n	80085c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f9 ffc2 	bl	8002564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008608:	431a      	orrs	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008612:	431a      	orrs	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	f003 0302 	and.w	r3, r3, #2
 800861c:	431a      	orrs	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	431a      	orrs	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008630:	431a      	orrs	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800863a:	431a      	orrs	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008644:	ea42 0103 	orr.w	r1, r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	0c1b      	lsrs	r3, r3, #16
 800865e:	f003 0104 	and.w	r1, r3, #4
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	f003 0210 	and.w	r2, r3, #16
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69da      	ldr	r2, [r3, #28]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008680:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800869a:	b084      	sub	sp, #16
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	f107 001c 	add.w	r0, r7, #28
 80086a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d122      	bne.n	80086f8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80086c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d105      	bne.n	80086ec <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f99f 	bl	8008a30 <USB_CoreReset>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73fb      	strb	r3, [r7, #15]
 80086f6:	e01a      	b.n	800872e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f993 	bl	8008a30 <USB_CoreReset>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800870e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	d106      	bne.n	8008722 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
 8008720:	e005      	b.n	800872e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008726:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	2b01      	cmp	r3, #1
 8008732:	d10b      	bne.n	800874c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f043 0206 	orr.w	r2, r3, #6
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f043 0220 	orr.w	r2, r3, #32
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800874c:	7bfb      	ldrb	r3, [r7, #15]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008758:	b004      	add	sp, #16
 800875a:	4770      	bx	lr

0800875c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f043 0201 	orr.w	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800877e:	b480      	push	{r7}
 8008780:	b083      	sub	sp, #12
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f023 0201 	bic.w	r2, r3, #1
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d115      	bne.n	80087ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80087ce:	2001      	movs	r0, #1
 80087d0:	f7fa fac2 	bl	8002d58 <HAL_Delay>
      ms++;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	3301      	adds	r3, #1
 80087d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f919 	bl	8008a12 <USB_GetMode>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d01e      	beq.n	8008824 <USB_SetCurrentMode+0x84>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b31      	cmp	r3, #49	; 0x31
 80087ea:	d9f0      	bls.n	80087ce <USB_SetCurrentMode+0x2e>
 80087ec:	e01a      	b.n	8008824 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d115      	bne.n	8008820 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008800:	2001      	movs	r0, #1
 8008802:	f7fa faa9 	bl	8002d58 <HAL_Delay>
      ms++;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3301      	adds	r3, #1
 800880a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f900 	bl	8008a12 <USB_GetMode>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <USB_SetCurrentMode+0x84>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b31      	cmp	r3, #49	; 0x31
 800881c:	d9f0      	bls.n	8008800 <USB_SetCurrentMode+0x60>
 800881e:	e001      	b.n	8008824 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e005      	b.n	8008830 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b32      	cmp	r3, #50	; 0x32
 8008828:	d101      	bne.n	800882e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e000      	b.n	8008830 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	019b      	lsls	r3, r3, #6
 800884a:	f043 0220 	orr.w	r2, r3, #32
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	60fb      	str	r3, [r7, #12]
 8008858:	4a08      	ldr	r2, [pc, #32]	; (800887c <USB_FlushTxFifo+0x44>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d901      	bls.n	8008862 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e006      	b.n	8008870 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b20      	cmp	r3, #32
 800886c:	d0f1      	beq.n	8008852 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	00030d40 	.word	0x00030d40

08008880 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2210      	movs	r2, #16
 8008890:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	4a08      	ldr	r2, [pc, #32]	; (80088bc <USB_FlushRxFifo+0x3c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d901      	bls.n	80088a2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e006      	b.n	80088b0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	f003 0310 	and.w	r3, r3, #16
 80088aa:	2b10      	cmp	r3, #16
 80088ac:	d0f1      	beq.n	8008892 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	00030d40 	.word	0x00030d40

080088c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b089      	sub	sp, #36	; 0x24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	460b      	mov	r3, r1
 80088d0:	71fb      	strb	r3, [r7, #7]
 80088d2:	4613      	mov	r3, r2
 80088d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80088de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d123      	bne.n	800892e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80088e6:	88bb      	ldrh	r3, [r7, #4]
 80088e8:	3303      	adds	r3, #3
 80088ea:	089b      	lsrs	r3, r3, #2
 80088ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088ee:	2300      	movs	r3, #0
 80088f0:	61bb      	str	r3, [r7, #24]
 80088f2:	e018      	b.n	8008926 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	031a      	lsls	r2, r3, #12
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008900:	461a      	mov	r2, r3
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	3301      	adds	r3, #1
 800890c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	3301      	adds	r3, #1
 8008912:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	3301      	adds	r3, #1
 8008918:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	3301      	adds	r3, #1
 800891e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	3301      	adds	r3, #1
 8008924:	61bb      	str	r3, [r7, #24]
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	429a      	cmp	r2, r3
 800892c:	d3e2      	bcc.n	80088f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3724      	adds	r7, #36	; 0x24
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800893c:	b480      	push	{r7}
 800893e:	b08b      	sub	sp, #44	; 0x2c
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	4613      	mov	r3, r2
 8008948:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008952:	88fb      	ldrh	r3, [r7, #6]
 8008954:	089b      	lsrs	r3, r3, #2
 8008956:	b29b      	uxth	r3, r3
 8008958:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	f003 0303 	and.w	r3, r3, #3
 8008960:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008962:	2300      	movs	r3, #0
 8008964:	623b      	str	r3, [r7, #32]
 8008966:	e014      	b.n	8008992 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	601a      	str	r2, [r3, #0]
    pDest++;
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	3301      	adds	r3, #1
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	3301      	adds	r3, #1
 800897e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	3301      	adds	r3, #1
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	3301      	adds	r3, #1
 800898a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	3301      	adds	r3, #1
 8008990:	623b      	str	r3, [r7, #32]
 8008992:	6a3a      	ldr	r2, [r7, #32]
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	429a      	cmp	r2, r3
 8008998:	d3e6      	bcc.n	8008968 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800899a:	8bfb      	ldrh	r3, [r7, #30]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01e      	beq.n	80089de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089aa:	461a      	mov	r2, r3
 80089ac:	f107 0310 	add.w	r3, r7, #16
 80089b0:	6812      	ldr	r2, [r2, #0]
 80089b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	fa22 f303 	lsr.w	r3, r2, r3
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	701a      	strb	r2, [r3, #0]
      i++;
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	3301      	adds	r3, #1
 80089ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	3301      	adds	r3, #1
 80089d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80089d2:	8bfb      	ldrh	r3, [r7, #30]
 80089d4:	3b01      	subs	r3, #1
 80089d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80089d8:	8bfb      	ldrh	r3, [r7, #30]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1ea      	bne.n	80089b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	372c      	adds	r7, #44	; 0x2c
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	4013      	ands	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a04:	68fb      	ldr	r3, [r7, #12]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
	...

08008a30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	4a13      	ldr	r2, [pc, #76]	; (8008a90 <USB_CoreReset+0x60>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d901      	bls.n	8008a4c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e01a      	b.n	8008a82 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	daf3      	bge.n	8008a3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f043 0201 	orr.w	r2, r3, #1
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3301      	adds	r3, #1
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	4a09      	ldr	r2, [pc, #36]	; (8008a90 <USB_CoreReset+0x60>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d901      	bls.n	8008a74 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e006      	b.n	8008a82 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d0f1      	beq.n	8008a64 <USB_CoreReset+0x34>

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	00030d40 	.word	0x00030d40

08008a94 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a94:	b084      	sub	sp, #16
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	f107 001c 	add.w	r0, r7, #28
 8008aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d018      	beq.n	8008b18 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d10a      	bne.n	8008b02 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008afa:	f043 0304 	orr.w	r3, r3, #4
 8008afe:	6013      	str	r3, [r2, #0]
 8008b00:	e014      	b.n	8008b2c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b10:	f023 0304 	bic.w	r3, r3, #4
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	e009      	b.n	8008b2c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b26:	f023 0304 	bic.w	r3, r3, #4
 8008b2a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008b2c:	2110      	movs	r1, #16
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff fe82 	bl	8008838 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff fea3 	bl	8008880 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	e015      	b.n	8008b6c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b52:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b60:	461a      	mov	r2, r3
 8008b62:	2300      	movs	r3, #0
 8008b64:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d3e5      	bcc.n	8008b40 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b80:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00b      	beq.n	8008ba6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b94:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a13      	ldr	r2, [pc, #76]	; (8008be8 <USB_HostInit+0x154>)
 8008b9a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a13      	ldr	r2, [pc, #76]	; (8008bec <USB_HostInit+0x158>)
 8008ba0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008ba4:	e009      	b.n	8008bba <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2280      	movs	r2, #128	; 0x80
 8008baa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a10      	ldr	r2, [pc, #64]	; (8008bf0 <USB_HostInit+0x15c>)
 8008bb0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a0f      	ldr	r2, [pc, #60]	; (8008bf4 <USB_HostInit+0x160>)
 8008bb6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d105      	bne.n	8008bcc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	f043 0210 	orr.w	r2, r3, #16
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	699a      	ldr	r2, [r3, #24]
 8008bd0:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <USB_HostInit+0x164>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008be4:	b004      	add	sp, #16
 8008be6:	4770      	bx	lr
 8008be8:	01000200 	.word	0x01000200
 8008bec:	00e00300 	.word	0x00e00300
 8008bf0:	00600080 	.word	0x00600080
 8008bf4:	004000e0 	.word	0x004000e0
 8008bf8:	a3200008 	.word	0xa3200008

08008bfc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c1a:	f023 0303 	bic.w	r3, r3, #3
 8008c1e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008c34:	4313      	orrs	r3, r2
 8008c36:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008c38:	78fb      	ldrb	r3, [r7, #3]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d107      	bne.n	8008c4e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c44:	461a      	mov	r2, r3
 8008c46:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008c4a:	6053      	str	r3, [r2, #4]
 8008c4c:	e009      	b.n	8008c62 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d106      	bne.n	8008c62 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008c60:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008c90:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008ca0:	2064      	movs	r0, #100	; 0x64
 8008ca2:	f7fa f859 	bl	8002d58 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008cae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cb2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008cb4:	200a      	movs	r0, #10
 8008cb6:	f7fa f84f 	bl	8002d58 <HAL_Delay>

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008ce8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <USB_DriveVbus+0x44>
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d106      	bne.n	8008d08 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d06:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d12:	d109      	bne.n	8008d28 <USB_DriveVbus+0x64>
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d26:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b085      	sub	sp, #20
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	0c5b      	lsrs	r3, r3, #17
 8008d54:	f003 0303 	and.w	r3, r3, #3
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	b29b      	uxth	r3, r3
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
	...

08008d88 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b088      	sub	sp, #32
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	4608      	mov	r0, r1
 8008d92:	4611      	mov	r1, r2
 8008d94:	461a      	mov	r2, r3
 8008d96:	4603      	mov	r3, r0
 8008d98:	70fb      	strb	r3, [r7, #3]
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	70bb      	strb	r3, [r7, #2]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db6:	461a      	mov	r2, r3
 8008db8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dbc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008dbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d87e      	bhi.n	8008ec4 <USB_HC_Init+0x13c>
 8008dc6:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <USB_HC_Init+0x44>)
 8008dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dcc:	08008ddd 	.word	0x08008ddd
 8008dd0:	08008e87 	.word	0x08008e87
 8008dd4:	08008ddd 	.word	0x08008ddd
 8008dd8:	08008e49 	.word	0x08008e49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de8:	461a      	mov	r2, r3
 8008dea:	f240 439d 	movw	r3, #1181	; 0x49d
 8008dee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008df0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	da10      	bge.n	8008e1a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	78fa      	ldrb	r2, [r7, #3]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e16:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008e18:	e057      	b.n	8008eca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d051      	beq.n	8008eca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008e26:	78fb      	ldrb	r3, [r7, #3]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	78fa      	ldrb	r2, [r7, #3]
 8008e36:	0151      	lsls	r1, r2, #5
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	440a      	add	r2, r1
 8008e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008e44:	60d3      	str	r3, [r2, #12]
      break;
 8008e46:	e040      	b.n	8008eca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e54:	461a      	mov	r2, r3
 8008e56:	f240 639d 	movw	r3, #1693	; 0x69d
 8008e5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008e5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	da34      	bge.n	8008ece <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	78fa      	ldrb	r2, [r7, #3]
 8008e74:	0151      	lsls	r1, r2, #5
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	440a      	add	r2, r1
 8008e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e82:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008e84:	e023      	b.n	8008ece <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e92:	461a      	mov	r2, r3
 8008e94:	f240 2325 	movw	r3, #549	; 0x225
 8008e98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008e9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	da17      	bge.n	8008ed2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008ea2:	78fb      	ldrb	r3, [r7, #3]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	78fa      	ldrb	r2, [r7, #3]
 8008eb2:	0151      	lsls	r1, r2, #5
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	440a      	add	r2, r1
 8008eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ebc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008ec0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008ec2:	e006      	b.n	8008ed2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	77fb      	strb	r3, [r7, #31]
      break;
 8008ec8:	e004      	b.n	8008ed4 <USB_HC_Init+0x14c>
      break;
 8008eca:	bf00      	nop
 8008ecc:	e002      	b.n	8008ed4 <USB_HC_Init+0x14c>
      break;
 8008ece:	bf00      	nop
 8008ed0:	e000      	b.n	8008ed4 <USB_HC_Init+0x14c>
      break;
 8008ed2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eda:	699a      	ldr	r2, [r3, #24]
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	f003 030f 	and.w	r3, r3, #15
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee8:	6939      	ldr	r1, [r7, #16]
 8008eea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008efe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	da03      	bge.n	8008f0e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f0a:	61bb      	str	r3, [r7, #24]
 8008f0c:	e001      	b.n	8008f12 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff ff0f 	bl	8008d36 <USB_GetHostSpeed>
 8008f18:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d106      	bne.n	8008f30 <USB_HC_Init+0x1a8>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d003      	beq.n	8008f30 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f2c:	617b      	str	r3, [r7, #20]
 8008f2e:	e001      	b.n	8008f34 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f34:	787b      	ldrb	r3, [r7, #1]
 8008f36:	059b      	lsls	r3, r3, #22
 8008f38:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008f3c:	78bb      	ldrb	r3, [r7, #2]
 8008f3e:	02db      	lsls	r3, r3, #11
 8008f40:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f44:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008f46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f4a:	049b      	lsls	r3, r3, #18
 8008f4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008f50:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008f52:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008f58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	0159      	lsls	r1, r3, #5
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	440b      	add	r3, r1
 8008f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f6a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f70:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008f72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d10f      	bne.n	8008f9a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	78fa      	ldrb	r2, [r7, #3]
 8008f8a:	0151      	lsls	r1, r2, #5
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	440a      	add	r2, r1
 8008f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f98:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008f9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08c      	sub	sp, #48	; 0x30
 8008fa8:	af02      	add	r7, sp, #8
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	785b      	ldrb	r3, [r3, #1]
 8008fba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fc0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d02d      	beq.n	800902a <USB_HC_StartXfer+0x86>
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	791b      	ldrb	r3, [r3, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d129      	bne.n	800902a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d117      	bne.n	800900c <USB_HC_StartXfer+0x68>
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	79db      	ldrb	r3, [r3, #7]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <USB_HC_StartXfer+0x48>
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	79db      	ldrb	r3, [r3, #7]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d10f      	bne.n	800900c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	0151      	lsls	r1, r2, #5
 8008ffe:	6a3a      	ldr	r2, [r7, #32]
 8009000:	440a      	add	r2, r1
 8009002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800900a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10b      	bne.n	800902a <USB_HC_StartXfer+0x86>
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	795b      	ldrb	r3, [r3, #5]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d107      	bne.n	800902a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	4619      	mov	r1, r3
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 fa2f 	bl	8009484 <USB_DoPing>
      return HAL_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	e0f8      	b.n	800921c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d018      	beq.n	8009064 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	8912      	ldrh	r2, [r2, #8]
 800903a:	4413      	add	r3, r2
 800903c:	3b01      	subs	r3, #1
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	8912      	ldrh	r2, [r2, #8]
 8009042:	fbb3 f3f2 	udiv	r3, r3, r2
 8009046:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009048:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800904a:	8b7b      	ldrh	r3, [r7, #26]
 800904c:	429a      	cmp	r2, r3
 800904e:	d90b      	bls.n	8009068 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009050:	8b7b      	ldrh	r3, [r7, #26]
 8009052:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009054:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	8912      	ldrh	r2, [r2, #8]
 800905a:	fb02 f203 	mul.w	r2, r2, r3
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	611a      	str	r2, [r3, #16]
 8009062:	e001      	b.n	8009068 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009064:	2301      	movs	r3, #1
 8009066:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	78db      	ldrb	r3, [r3, #3]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d007      	beq.n	8009080 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	8912      	ldrh	r2, [r2, #8]
 8009076:	fb02 f203 	mul.w	r2, r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	611a      	str	r2, [r3, #16]
 800907e:	e003      	b.n	8009088 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	695a      	ldr	r2, [r3, #20]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009090:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009092:	04d9      	lsls	r1, r3, #19
 8009094:	4b63      	ldr	r3, [pc, #396]	; (8009224 <USB_HC_StartXfer+0x280>)
 8009096:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009098:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	7a9b      	ldrb	r3, [r3, #10]
 800909e:	075b      	lsls	r3, r3, #29
 80090a0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80090a4:	69f9      	ldr	r1, [r7, #28]
 80090a6:	0148      	lsls	r0, r1, #5
 80090a8:	6a39      	ldr	r1, [r7, #32]
 80090aa:	4401      	add	r1, r0
 80090ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80090b0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80090b2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80090b4:	79fb      	ldrb	r3, [r7, #7]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d009      	beq.n	80090ce <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	68d9      	ldr	r1, [r3, #12]
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090ca:	460a      	mov	r2, r1
 80090cc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f003 0301 	and.w	r3, r3, #1
 80090da:	2b00      	cmp	r3, #0
 80090dc:	bf0c      	ite	eq
 80090de:	2301      	moveq	r3, #1
 80090e0:	2300      	movne	r3, #0
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	69fa      	ldr	r2, [r7, #28]
 80090f6:	0151      	lsls	r1, r2, #5
 80090f8:	6a3a      	ldr	r2, [r7, #32]
 80090fa:	440a      	add	r2, r1
 80090fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009100:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009104:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	4413      	add	r3, r2
 800910e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	7e7b      	ldrb	r3, [r7, #25]
 8009116:	075b      	lsls	r3, r3, #29
 8009118:	69f9      	ldr	r1, [r7, #28]
 800911a:	0148      	lsls	r0, r1, #5
 800911c:	6a39      	ldr	r1, [r7, #32]
 800911e:	4401      	add	r1, r0
 8009120:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009124:	4313      	orrs	r3, r2
 8009126:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	4413      	add	r3, r2
 8009130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800913e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	78db      	ldrb	r3, [r3, #3]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d004      	beq.n	8009152 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	e003      	b.n	800915a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009158:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009160:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	4413      	add	r3, r2
 800916a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800916e:	461a      	mov	r2, r3
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	e04e      	b.n	800921c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	78db      	ldrb	r3, [r3, #3]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d149      	bne.n	800921a <USB_HC_StartXfer+0x276>
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	695b      	ldr	r3, [r3, #20]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d045      	beq.n	800921a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	79db      	ldrb	r3, [r3, #7]
 8009192:	2b03      	cmp	r3, #3
 8009194:	d830      	bhi.n	80091f8 <USB_HC_StartXfer+0x254>
 8009196:	a201      	add	r2, pc, #4	; (adr r2, 800919c <USB_HC_StartXfer+0x1f8>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	080091ad 	.word	0x080091ad
 80091a0:	080091d1 	.word	0x080091d1
 80091a4:	080091ad 	.word	0x080091ad
 80091a8:	080091d1 	.word	0x080091d1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	3303      	adds	r3, #3
 80091b2:	089b      	lsrs	r3, r3, #2
 80091b4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80091b6:	8afa      	ldrh	r2, [r7, #22]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091bc:	b29b      	uxth	r3, r3
 80091be:	429a      	cmp	r2, r3
 80091c0:	d91c      	bls.n	80091fc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	f043 0220 	orr.w	r2, r3, #32
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	619a      	str	r2, [r3, #24]
        }
        break;
 80091ce:	e015      	b.n	80091fc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	3303      	adds	r3, #3
 80091d6:	089b      	lsrs	r3, r3, #2
 80091d8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80091da:	8afa      	ldrh	r2, [r7, #22]
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d90a      	bls.n	8009200 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80091f6:	e003      	b.n	8009200 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80091f8:	bf00      	nop
 80091fa:	e002      	b.n	8009202 <USB_HC_StartXfer+0x25e>
        break;
 80091fc:	bf00      	nop
 80091fe:	e000      	b.n	8009202 <USB_HC_StartXfer+0x25e>
        break;
 8009200:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	68d9      	ldr	r1, [r3, #12]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	785a      	ldrb	r2, [r3, #1]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	b29b      	uxth	r3, r3
 8009210:	2000      	movs	r0, #0
 8009212:	9000      	str	r0, [sp, #0]
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7ff fb53 	bl	80088c0 <USB_WritePacket>
  }

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3728      	adds	r7, #40	; 0x28
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	1ff80000 	.word	0x1ff80000

08009228 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	b29b      	uxth	r3, r3
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800924a:	b480      	push	{r7}
 800924c:	b089      	sub	sp, #36	; 0x24
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	460b      	mov	r3, r1
 8009254:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	4413      	add	r3, r2
 800926a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	0c9b      	lsrs	r3, r3, #18
 8009272:	f003 0303 	and.w	r3, r3, #3
 8009276:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	4413      	add	r3, r2
 8009280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	0fdb      	lsrs	r3, r3, #31
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b20      	cmp	r3, #32
 8009298:	d104      	bne.n	80092a4 <USB_HC_Halt+0x5a>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	e0e8      	b.n	8009476 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <USB_HC_Halt+0x66>
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d173      	bne.n	8009398 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	0151      	lsls	r1, r2, #5
 80092c2:	69ba      	ldr	r2, [r7, #24]
 80092c4:	440a      	add	r2, r1
 80092c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ce:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f040 80cb 	bne.w	8009474 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d143      	bne.n	8009372 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	0151      	lsls	r1, r2, #5
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	440a      	add	r2, r1
 8009300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009308:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	4413      	add	r3, r2
 8009312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	0151      	lsls	r1, r2, #5
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	440a      	add	r2, r1
 8009320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009328:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	015a      	lsls	r2, r3, #5
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	4413      	add	r3, r2
 8009332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	0151      	lsls	r1, r2, #5
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	440a      	add	r2, r1
 8009340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009344:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009348:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	3301      	adds	r3, #1
 800934e:	61fb      	str	r3, [r7, #28]
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009356:	d81d      	bhi.n	8009394 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	4413      	add	r3, r2
 8009360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800936a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800936e:	d0ec      	beq.n	800934a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009370:	e080      	b.n	8009474 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	015a      	lsls	r2, r3, #5
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	4413      	add	r3, r2
 800937a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	0151      	lsls	r1, r2, #5
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	440a      	add	r2, r1
 8009388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800938c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009390:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009392:	e06f      	b.n	8009474 <USB_HC_Halt+0x22a>
            break;
 8009394:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009396:	e06d      	b.n	8009474 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	0151      	lsls	r1, r2, #5
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	440a      	add	r2, r1
 80093ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093b6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d143      	bne.n	8009450 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	0151      	lsls	r1, r2, #5
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	440a      	add	r2, r1
 80093de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	69ba      	ldr	r2, [r7, #24]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009402:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009406:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	4413      	add	r3, r2
 8009410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	0151      	lsls	r1, r2, #5
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	440a      	add	r2, r1
 800941e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009422:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009426:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	3301      	adds	r3, #1
 800942c:	61fb      	str	r3, [r7, #28]
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009434:	d81d      	bhi.n	8009472 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	4413      	add	r3, r2
 800943e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800944c:	d0ec      	beq.n	8009428 <USB_HC_Halt+0x1de>
 800944e:	e011      	b.n	8009474 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	4413      	add	r3, r2
 8009458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	0151      	lsls	r1, r2, #5
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	440a      	add	r2, r1
 8009466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800946a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	e000      	b.n	8009474 <USB_HC_Halt+0x22a>
          break;
 8009472:	bf00      	nop
    }
  }

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3724      	adds	r7, #36	; 0x24
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
	...

08009484 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009498:	2301      	movs	r3, #1
 800949a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	04da      	lsls	r2, r3, #19
 80094a0:	4b15      	ldr	r3, [pc, #84]	; (80094f8 <USB_DoPing+0x74>)
 80094a2:	4013      	ands	r3, r2
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e2:	461a      	mov	r2, r3
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	1ff80000 	.word	0x1ff80000

080094fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff f936 	bl	800877e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009512:	2110      	movs	r1, #16
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7ff f98f 	bl	8008838 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff f9b0 	bl	8008880 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009520:	2300      	movs	r3, #0
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	e01f      	b.n	8009566 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	4413      	add	r3, r2
 800952e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800953c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009544:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800954c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	4413      	add	r3, r2
 8009556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800955a:	461a      	mov	r2, r3
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	3301      	adds	r3, #1
 8009564:	613b      	str	r3, [r7, #16]
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	2b0f      	cmp	r3, #15
 800956a:	d9dc      	bls.n	8009526 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800956c:	2300      	movs	r3, #0
 800956e:	613b      	str	r3, [r7, #16]
 8009570:	e034      	b.n	80095dc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009588:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009590:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009598:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a6:	461a      	mov	r2, r3
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	3301      	adds	r3, #1
 80095b0:	617b      	str	r3, [r7, #20]
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095b8:	d80c      	bhi.n	80095d4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095d0:	d0ec      	beq.n	80095ac <USB_StopHost+0xb0>
 80095d2:	e000      	b.n	80095d6 <USB_StopHost+0xda>
        break;
 80095d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	3301      	adds	r3, #1
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	2b0f      	cmp	r3, #15
 80095e0:	d9c7      	bls.n	8009572 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095e8:	461a      	mov	r2, r3
 80095ea:	f04f 33ff 	mov.w	r3, #4294967295
 80095ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f04f 32ff 	mov.w	r2, #4294967295
 80095f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff f8af 	bl	800875c <USB_EnableGlobalInt>

  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800960c:	4904      	ldr	r1, [pc, #16]	; (8009620 <MX_FATFS_Init+0x18>)
 800960e:	4805      	ldr	r0, [pc, #20]	; (8009624 <MX_FATFS_Init+0x1c>)
 8009610:	f007 ff82 	bl	8011518 <FATFS_LinkDriver>
 8009614:	4603      	mov	r3, r0
 8009616:	461a      	mov	r2, r3
 8009618:	4b03      	ldr	r3, [pc, #12]	; (8009628 <MX_FATFS_Init+0x20>)
 800961a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800961c:	bf00      	nop
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20012320 	.word	0x20012320
 8009624:	0801278c 	.word	0x0801278c
 8009628:	200143bc 	.word	0x200143bc

0800962c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800962c:	b480      	push	{r7}
 800962e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009630:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009632:	4618      	mov	r0, r3
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	4603      	mov	r3, r0
 800965c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009662:	79fb      	ldrb	r3, [r7, #7]
 8009664:	4619      	mov	r1, r3
 8009666:	4808      	ldr	r0, [pc, #32]	; (8009688 <USBH_status+0x34>)
 8009668:	f000 fe1a 	bl	800a2a0 <USBH_MSC_UnitIsReady>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <USBH_status+0x24>
  {
    res = RES_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
 8009676:	e001      	b.n	800967c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800967c:	7bfb      	ldrb	r3, [r7, #15]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	200143c0 	.word	0x200143c0

0800968c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b094      	sub	sp, #80	; 0x50
 8009690:	af02      	add	r7, sp, #8
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	603b      	str	r3, [r7, #0]
 8009698:	4603      	mov	r3, r0
 800969a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80096a2:	7bf9      	ldrb	r1, [r7, #15]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	4813      	ldr	r0, [pc, #76]	; (80096fc <USBH_read+0x70>)
 80096ae:	f000 fe41 	bl	800a334 <USBH_MSC_Read>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d103      	bne.n	80096c0 <USBH_read+0x34>
  {
    res = RES_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80096be:	e017      	b.n	80096f0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80096c0:	f107 0210 	add.w	r2, r7, #16
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	4619      	mov	r1, r3
 80096c8:	480c      	ldr	r0, [pc, #48]	; (80096fc <USBH_read+0x70>)
 80096ca:	f000 fe0f 	bl	800a2ec <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80096ce:	7f7b      	ldrb	r3, [r7, #29]
 80096d0:	2b3a      	cmp	r3, #58	; 0x3a
 80096d2:	d005      	beq.n	80096e0 <USBH_read+0x54>
 80096d4:	2b3a      	cmp	r3, #58	; 0x3a
 80096d6:	dc07      	bgt.n	80096e8 <USBH_read+0x5c>
 80096d8:	2b04      	cmp	r3, #4
 80096da:	d001      	beq.n	80096e0 <USBH_read+0x54>
 80096dc:	2b28      	cmp	r3, #40	; 0x28
 80096de:	d103      	bne.n	80096e8 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80096e0:	2303      	movs	r3, #3
 80096e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80096e6:	e003      	b.n	80096f0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80096ee:	bf00      	nop
    }
  }

  return res;
 80096f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3748      	adds	r7, #72	; 0x48
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	200143c0 	.word	0x200143c0

08009700 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b094      	sub	sp, #80	; 0x50
 8009704:	af02      	add	r7, sp, #8
 8009706:	60b9      	str	r1, [r7, #8]
 8009708:	607a      	str	r2, [r7, #4]
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	4603      	mov	r3, r0
 800970e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009716:	7bf9      	ldrb	r1, [r7, #15]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	4817      	ldr	r0, [pc, #92]	; (8009780 <USBH_write+0x80>)
 8009722:	f000 fe70 	bl	800a406 <USBH_MSC_Write>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d103      	bne.n	8009734 <USBH_write+0x34>
  {
    res = RES_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009732:	e01f      	b.n	8009774 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009734:	f107 0210 	add.w	r2, r7, #16
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4619      	mov	r1, r3
 800973c:	4810      	ldr	r0, [pc, #64]	; (8009780 <USBH_write+0x80>)
 800973e:	f000 fdd5 	bl	800a2ec <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009742:	7f7b      	ldrb	r3, [r7, #29]
 8009744:	2b3a      	cmp	r3, #58	; 0x3a
 8009746:	d00d      	beq.n	8009764 <USBH_write+0x64>
 8009748:	2b3a      	cmp	r3, #58	; 0x3a
 800974a:	dc0f      	bgt.n	800976c <USBH_write+0x6c>
 800974c:	2b28      	cmp	r3, #40	; 0x28
 800974e:	d009      	beq.n	8009764 <USBH_write+0x64>
 8009750:	2b28      	cmp	r3, #40	; 0x28
 8009752:	dc0b      	bgt.n	800976c <USBH_write+0x6c>
 8009754:	2b04      	cmp	r3, #4
 8009756:	d005      	beq.n	8009764 <USBH_write+0x64>
 8009758:	2b27      	cmp	r3, #39	; 0x27
 800975a:	d107      	bne.n	800976c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800975c:	2302      	movs	r3, #2
 800975e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009762:	e007      	b.n	8009774 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009764:	2303      	movs	r3, #3
 8009766:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800976a:	e003      	b.n	8009774 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009772:	bf00      	nop
    }
  }

  return res;
 8009774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009778:	4618      	mov	r0, r3
 800977a:	3748      	adds	r7, #72	; 0x48
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	200143c0 	.word	0x200143c0

08009784 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b090      	sub	sp, #64	; 0x40
 8009788:	af00      	add	r7, sp, #0
 800978a:	4603      	mov	r3, r0
 800978c:	603a      	str	r2, [r7, #0]
 800978e:	71fb      	strb	r3, [r7, #7]
 8009790:	460b      	mov	r3, r1
 8009792:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800979a:	79bb      	ldrb	r3, [r7, #6]
 800979c:	2b03      	cmp	r3, #3
 800979e:	d852      	bhi.n	8009846 <USBH_ioctl+0xc2>
 80097a0:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <USBH_ioctl+0x24>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097b9 	.word	0x080097b9
 80097ac:	080097c1 	.word	0x080097c1
 80097b0:	080097eb 	.word	0x080097eb
 80097b4:	08009817 	.word	0x08009817
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80097be:	e045      	b.n	800984c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80097c0:	f107 0208 	add.w	r2, r7, #8
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	4619      	mov	r1, r3
 80097c8:	4823      	ldr	r0, [pc, #140]	; (8009858 <USBH_ioctl+0xd4>)
 80097ca:	f000 fd8f 	bl	800a2ec <USBH_MSC_GetLUNInfo>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d106      	bne.n	80097e2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80097e0:	e034      	b.n	800984c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80097e8:	e030      	b.n	800984c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80097ea:	f107 0208 	add.w	r2, r7, #8
 80097ee:	79fb      	ldrb	r3, [r7, #7]
 80097f0:	4619      	mov	r1, r3
 80097f2:	4819      	ldr	r0, [pc, #100]	; (8009858 <USBH_ioctl+0xd4>)
 80097f4:	f000 fd7a 	bl	800a2ec <USBH_MSC_GetLUNInfo>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d107      	bne.n	800980e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80097fe:	8a3b      	ldrh	r3, [r7, #16]
 8009800:	461a      	mov	r2, r3
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800980c:	e01e      	b.n	800984c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009814:	e01a      	b.n	800984c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009816:	f107 0208 	add.w	r2, r7, #8
 800981a:	79fb      	ldrb	r3, [r7, #7]
 800981c:	4619      	mov	r1, r3
 800981e:	480e      	ldr	r0, [pc, #56]	; (8009858 <USBH_ioctl+0xd4>)
 8009820:	f000 fd64 	bl	800a2ec <USBH_MSC_GetLUNInfo>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d109      	bne.n	800983e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800982a:	8a3b      	ldrh	r3, [r7, #16]
 800982c:	0a5b      	lsrs	r3, r3, #9
 800982e:	b29b      	uxth	r3, r3
 8009830:	461a      	mov	r2, r3
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800983c:	e006      	b.n	800984c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009844:	e002      	b.n	800984c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009846:	2304      	movs	r3, #4
 8009848:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800984c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009850:	4618      	mov	r0, r3
 8009852:	3740      	adds	r7, #64	; 0x40
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	200143c0 	.word	0x200143c0

0800985c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800985c:	b590      	push	{r4, r7, lr}
 800985e:	b089      	sub	sp, #36	; 0x24
 8009860:	af04      	add	r7, sp, #16
 8009862:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800986a:	7919      	ldrb	r1, [r3, #4]
 800986c:	2350      	movs	r3, #80	; 0x50
 800986e:	2206      	movs	r2, #6
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 fc53 	bl	800b11c <USBH_FindInterface>
 8009876:	4603      	mov	r3, r0
 8009878:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	2bff      	cmp	r3, #255	; 0xff
 800987e:	d002      	beq.n	8009886 <USBH_MSC_InterfaceInit+0x2a>
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d901      	bls.n	800988a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009886:	2302      	movs	r3, #2
 8009888:	e0ef      	b.n	8009a6a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f001 fc28 	bl	800b0e4 <USBH_SelectInterface>
 8009894:	4603      	mov	r3, r0
 8009896:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800989e:	2302      	movs	r3, #2
 80098a0:	e0e3      	b.n	8009a6a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80098a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80098ac:	f008 fa6c 	bl	8011d88 <malloc>
 80098b0:	4603      	mov	r3, r0
 80098b2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80098c4:	2302      	movs	r3, #2
 80098c6:	e0d0      	b.n	8009a6a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80098c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098cc:	2100      	movs	r1, #0
 80098ce:	68b8      	ldr	r0, [r7, #8]
 80098d0:	f008 fa78 	bl	8011dc4 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	211a      	movs	r1, #26
 80098da:	fb01 f303 	mul.w	r3, r1, r3
 80098de:	4413      	add	r3, r2
 80098e0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	b25b      	sxtb	r3, r3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	da16      	bge.n	800991a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	211a      	movs	r1, #26
 80098f2:	fb01 f303 	mul.w	r3, r1, r3
 80098f6:	4413      	add	r3, r2
 80098f8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80098fc:	781a      	ldrb	r2, [r3, #0]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	211a      	movs	r1, #26
 8009908:	fb01 f303 	mul.w	r3, r1, r3
 800990c:	4413      	add	r3, r2
 800990e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009912:	881a      	ldrh	r2, [r3, #0]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	815a      	strh	r2, [r3, #10]
 8009918:	e015      	b.n	8009946 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800991a:	7bfb      	ldrb	r3, [r7, #15]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	211a      	movs	r1, #26
 8009920:	fb01 f303 	mul.w	r3, r1, r3
 8009924:	4413      	add	r3, r2
 8009926:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800992a:	781a      	ldrb	r2, [r3, #0]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009930:	7bfb      	ldrb	r3, [r7, #15]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	211a      	movs	r1, #26
 8009936:	fb01 f303 	mul.w	r3, r1, r3
 800993a:	4413      	add	r3, r2
 800993c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009940:	881a      	ldrh	r2, [r3, #0]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	211a      	movs	r1, #26
 800994c:	fb01 f303 	mul.w	r3, r1, r3
 8009950:	4413      	add	r3, r2
 8009952:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	b25b      	sxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	da16      	bge.n	800998c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	211a      	movs	r1, #26
 8009964:	fb01 f303 	mul.w	r3, r1, r3
 8009968:	4413      	add	r3, r2
 800996a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800996e:	781a      	ldrb	r2, [r3, #0]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	211a      	movs	r1, #26
 800997a:	fb01 f303 	mul.w	r3, r1, r3
 800997e:	4413      	add	r3, r2
 8009980:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009984:	881a      	ldrh	r2, [r3, #0]
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	815a      	strh	r2, [r3, #10]
 800998a:	e015      	b.n	80099b8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	211a      	movs	r1, #26
 8009992:	fb01 f303 	mul.w	r3, r1, r3
 8009996:	4413      	add	r3, r2
 8009998:	f203 3356 	addw	r3, r3, #854	; 0x356
 800999c:	781a      	ldrb	r2, [r3, #0]
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	211a      	movs	r1, #26
 80099a8:	fb01 f303 	mul.w	r3, r1, r3
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80099b2:	881a      	ldrh	r2, [r3, #0]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	2200      	movs	r2, #0
 80099bc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2200      	movs	r2, #0
 80099c2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	2200      	movs	r2, #0
 80099c8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	799b      	ldrb	r3, [r3, #6]
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f002 fdc4 	bl	800c55e <USBH_AllocPipe>
 80099d6:	4603      	mov	r3, r0
 80099d8:	461a      	mov	r2, r3
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	79db      	ldrb	r3, [r3, #7]
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f002 fdba 	bl	800c55e <USBH_AllocPipe>
 80099ea:	4603      	mov	r3, r0
 80099ec:	461a      	mov	r2, r3
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fdac 	bl	800a550 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	7959      	ldrb	r1, [r3, #5]
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	7998      	ldrb	r0, [r3, #6]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	8912      	ldrh	r2, [r2, #8]
 8009a10:	9202      	str	r2, [sp, #8]
 8009a12:	2202      	movs	r2, #2
 8009a14:	9201      	str	r2, [sp, #4]
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	4623      	mov	r3, r4
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f002 fd6f 	bl	800c500 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	7919      	ldrb	r1, [r3, #4]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	79d8      	ldrb	r0, [r3, #7]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	8952      	ldrh	r2, [r2, #10]
 8009a3a:	9202      	str	r2, [sp, #8]
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	9201      	str	r2, [sp, #4]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	4623      	mov	r3, r4
 8009a44:	4602      	mov	r2, r0
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f002 fd5a 	bl	800c500 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	791b      	ldrb	r3, [r3, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f008 f8b9 	bl	8011bcc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	795b      	ldrb	r3, [r3, #5]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f008 f8b2 	bl	8011bcc <USBH_LL_SetToggle>

  return USBH_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd90      	pop	{r4, r7, pc}

08009a72 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	795b      	ldrb	r3, [r3, #5]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00e      	beq.n	8009aaa <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	795b      	ldrb	r3, [r3, #5]
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f002 fd53 	bl	800c53e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	795b      	ldrb	r3, [r3, #5]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f002 fd7e 	bl	800c5a0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	791b      	ldrb	r3, [r3, #4]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00e      	beq.n	8009ad0 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	791b      	ldrb	r3, [r3, #4]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f002 fd40 	bl	800c53e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	791b      	ldrb	r3, [r3, #4]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f002 fd6b 	bl	800c5a0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00b      	beq.n	8009af4 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f008 f957 	bl	8011d98 <free>
    phost->pActiveClass->pData = 0U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009af0:	2200      	movs	r2, #0
 8009af2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b10:	2301      	movs	r3, #1
 8009b12:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	7b9b      	ldrb	r3, [r3, #14]
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d041      	beq.n	8009ba0 <USBH_MSC_ClassRequest+0xa2>
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	dc4b      	bgt.n	8009bb8 <USBH_MSC_ClassRequest+0xba>
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <USBH_MSC_ClassRequest+0x2a>
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d147      	bne.n	8009bb8 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fcf0 	bl	800a512 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009b32:	4603      	mov	r3, r0
 8009b34:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
 8009b38:	2b03      	cmp	r3, #3
 8009b3a:	d104      	bne.n	8009b46 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d137      	bne.n	8009bbc <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d804      	bhi.n	8009b5e <USBH_MSC_ClassRequest+0x60>
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	e000      	b.n	8009b60 <USBH_MSC_ClassRequest+0x62>
 8009b5e:	2202      	movs	r2, #2
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009b64:	2300      	movs	r3, #0
 8009b66:	73bb      	strb	r3, [r7, #14]
 8009b68:	e014      	b.n	8009b94 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009b6a:	7bbb      	ldrb	r3, [r7, #14]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	2134      	movs	r1, #52	; 0x34
 8009b70:	fb01 f303 	mul.w	r3, r1, r3
 8009b74:	4413      	add	r3, r2
 8009b76:	3392      	adds	r3, #146	; 0x92
 8009b78:	2202      	movs	r2, #2
 8009b7a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	2134      	movs	r1, #52	; 0x34
 8009b82:	fb01 f303 	mul.w	r3, r1, r3
 8009b86:	4413      	add	r3, r2
 8009b88:	33c1      	adds	r3, #193	; 0xc1
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	3301      	adds	r3, #1
 8009b92:	73bb      	strb	r3, [r7, #14]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	7bba      	ldrb	r2, [r7, #14]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d3e5      	bcc.n	8009b6a <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009b9e:	e00d      	b.n	8009bbc <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f002 f87b 	bl	800bc9e <USBH_ClrFeature>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d108      	bne.n	8009bc0 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	7bda      	ldrb	r2, [r3, #15]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009bb6:	e003      	b.n	8009bc0 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009bb8:	bf00      	nop
 8009bba:	e002      	b.n	8009bc2 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009bbc:	bf00      	nop
 8009bbe:	e000      	b.n	8009bc2 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009bc0:	bf00      	nop
  }

  return status;
 8009bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009bde:	2301      	movs	r3, #1
 8009be0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009be2:	2301      	movs	r3, #1
 8009be4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009be6:	2301      	movs	r3, #1
 8009be8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	7b1b      	ldrb	r3, [r3, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <USBH_MSC_Process+0x2e>
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	f000 8271 	beq.w	800a0da <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009bf8:	e272      	b.n	800a0e0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	429a      	cmp	r2, r3
 8009c08:	f080 824f 	bcs.w	800a0aa <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c12:	4619      	mov	r1, r3
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	2334      	movs	r3, #52	; 0x34
 8009c18:	fb03 f301 	mul.w	r3, r3, r1
 8009c1c:	4413      	add	r3, r2
 8009c1e:	3391      	adds	r3, #145	; 0x91
 8009c20:	2201      	movs	r2, #1
 8009c22:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	2334      	movs	r3, #52	; 0x34
 8009c30:	fb03 f301 	mul.w	r3, r3, r1
 8009c34:	4413      	add	r3, r2
 8009c36:	3390      	adds	r3, #144	; 0x90
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	2b08      	cmp	r3, #8
 8009c3c:	f200 8243 	bhi.w	800a0c6 <USBH_MSC_Process+0x4fa>
 8009c40:	a201      	add	r2, pc, #4	; (adr r2, 8009c48 <USBH_MSC_Process+0x7c>)
 8009c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c46:	bf00      	nop
 8009c48:	08009c6d 	.word	0x08009c6d
 8009c4c:	0800a0c7 	.word	0x0800a0c7
 8009c50:	08009d35 	.word	0x08009d35
 8009c54:	08009eb9 	.word	0x08009eb9
 8009c58:	08009c93 	.word	0x08009c93
 8009c5c:	08009f85 	.word	0x08009f85
 8009c60:	0800a0c7 	.word	0x0800a0c7
 8009c64:	0800a0c7 	.word	0x0800a0c7
 8009c68:	0800a099 	.word	0x0800a099
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c72:	4619      	mov	r1, r3
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	2334      	movs	r3, #52	; 0x34
 8009c78:	fb03 f301 	mul.w	r3, r3, r1
 8009c7c:	4413      	add	r3, r2
 8009c7e:	3390      	adds	r3, #144	; 0x90
 8009c80:	2204      	movs	r2, #4
 8009c82:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009c90:	e222      	b.n	800a0d8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c98:	b2d9      	uxtb	r1, r3
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	2334      	movs	r3, #52	; 0x34
 8009ca4:	fb03 f302 	mul.w	r3, r3, r2
 8009ca8:	3398      	adds	r3, #152	; 0x98
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	4413      	add	r3, r2
 8009cae:	3307      	adds	r3, #7
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 ff6a 	bl	800ab8c <USBH_MSC_SCSI_Inquiry>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10b      	bne.n	8009cda <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cc8:	4619      	mov	r1, r3
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	2334      	movs	r3, #52	; 0x34
 8009cce:	fb03 f301 	mul.w	r3, r3, r1
 8009cd2:	4413      	add	r3, r2
 8009cd4:	3390      	adds	r3, #144	; 0x90
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d10c      	bne.n	8009cfa <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	2334      	movs	r3, #52	; 0x34
 8009cec:	fb03 f301 	mul.w	r3, r3, r1
 8009cf0:	4413      	add	r3, r2
 8009cf2:	3390      	adds	r3, #144	; 0x90
 8009cf4:	2205      	movs	r2, #5
 8009cf6:	701a      	strb	r2, [r3, #0]
            break;
 8009cf8:	e1e7      	b.n	800a0ca <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	2b04      	cmp	r3, #4
 8009cfe:	f040 81e4 	bne.w	800a0ca <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d08:	4619      	mov	r1, r3
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	2334      	movs	r3, #52	; 0x34
 8009d0e:	fb03 f301 	mul.w	r3, r3, r1
 8009d12:	4413      	add	r3, r2
 8009d14:	3390      	adds	r3, #144	; 0x90
 8009d16:	2201      	movs	r2, #1
 8009d18:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d20:	4619      	mov	r1, r3
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	2334      	movs	r3, #52	; 0x34
 8009d26:	fb03 f301 	mul.w	r3, r3, r1
 8009d2a:	4413      	add	r3, r2
 8009d2c:	3391      	adds	r3, #145	; 0x91
 8009d2e:	2202      	movs	r2, #2
 8009d30:	701a      	strb	r2, [r3, #0]
            break;
 8009d32:	e1ca      	b.n	800a0ca <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fe66 	bl	800aa10 <USBH_MSC_SCSI_TestUnitReady>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009d48:	7bbb      	ldrb	r3, [r7, #14]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d149      	bne.n	8009de2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d54:	4619      	mov	r1, r3
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	2334      	movs	r3, #52	; 0x34
 8009d5a:	fb03 f301 	mul.w	r3, r3, r1
 8009d5e:	4413      	add	r3, r2
 8009d60:	3392      	adds	r3, #146	; 0x92
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00c      	beq.n	8009d82 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d6e:	4619      	mov	r1, r3
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	2334      	movs	r3, #52	; 0x34
 8009d74:	fb03 f301 	mul.w	r3, r3, r1
 8009d78:	4413      	add	r3, r2
 8009d7a:	33c1      	adds	r3, #193	; 0xc1
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	e00b      	b.n	8009d9a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d88:	4619      	mov	r1, r3
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	2334      	movs	r3, #52	; 0x34
 8009d8e:	fb03 f301 	mul.w	r3, r3, r1
 8009d92:	4413      	add	r3, r2
 8009d94:	33c1      	adds	r3, #193	; 0xc1
 8009d96:	2200      	movs	r2, #0
 8009d98:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009da0:	4619      	mov	r1, r3
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	2334      	movs	r3, #52	; 0x34
 8009da6:	fb03 f301 	mul.w	r3, r3, r1
 8009daa:	4413      	add	r3, r2
 8009dac:	3390      	adds	r3, #144	; 0x90
 8009dae:	2203      	movs	r2, #3
 8009db0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009db8:	4619      	mov	r1, r3
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	2334      	movs	r3, #52	; 0x34
 8009dbe:	fb03 f301 	mul.w	r3, r3, r1
 8009dc2:	4413      	add	r3, r2
 8009dc4:	3391      	adds	r3, #145	; 0x91
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	2334      	movs	r3, #52	; 0x34
 8009dd6:	fb03 f301 	mul.w	r3, r3, r1
 8009dda:	4413      	add	r3, r2
 8009ddc:	3392      	adds	r3, #146	; 0x92
 8009dde:	2200      	movs	r2, #0
 8009de0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d14a      	bne.n	8009e7e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dee:	4619      	mov	r1, r3
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	2334      	movs	r3, #52	; 0x34
 8009df4:	fb03 f301 	mul.w	r3, r3, r1
 8009df8:	4413      	add	r3, r2
 8009dfa:	3392      	adds	r3, #146	; 0x92
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d00c      	beq.n	8009e1c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e08:	4619      	mov	r1, r3
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	2334      	movs	r3, #52	; 0x34
 8009e0e:	fb03 f301 	mul.w	r3, r3, r1
 8009e12:	4413      	add	r3, r2
 8009e14:	33c1      	adds	r3, #193	; 0xc1
 8009e16:	2201      	movs	r2, #1
 8009e18:	701a      	strb	r2, [r3, #0]
 8009e1a:	e00b      	b.n	8009e34 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e22:	4619      	mov	r1, r3
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	2334      	movs	r3, #52	; 0x34
 8009e28:	fb03 f301 	mul.w	r3, r3, r1
 8009e2c:	4413      	add	r3, r2
 8009e2e:	33c1      	adds	r3, #193	; 0xc1
 8009e30:	2200      	movs	r2, #0
 8009e32:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	2334      	movs	r3, #52	; 0x34
 8009e40:	fb03 f301 	mul.w	r3, r3, r1
 8009e44:	4413      	add	r3, r2
 8009e46:	3390      	adds	r3, #144	; 0x90
 8009e48:	2205      	movs	r2, #5
 8009e4a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e52:	4619      	mov	r1, r3
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	2334      	movs	r3, #52	; 0x34
 8009e58:	fb03 f301 	mul.w	r3, r3, r1
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3391      	adds	r3, #145	; 0x91
 8009e60:	2201      	movs	r2, #1
 8009e62:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	2334      	movs	r3, #52	; 0x34
 8009e70:	fb03 f301 	mul.w	r3, r3, r1
 8009e74:	4413      	add	r3, r2
 8009e76:	3392      	adds	r3, #146	; 0x92
 8009e78:	2202      	movs	r2, #2
 8009e7a:	701a      	strb	r2, [r3, #0]
            break;
 8009e7c:	e127      	b.n	800a0ce <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009e7e:	7bbb      	ldrb	r3, [r7, #14]
 8009e80:	2b04      	cmp	r3, #4
 8009e82:	f040 8124 	bne.w	800a0ce <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	2334      	movs	r3, #52	; 0x34
 8009e92:	fb03 f301 	mul.w	r3, r3, r1
 8009e96:	4413      	add	r3, r2
 8009e98:	3390      	adds	r3, #144	; 0x90
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	2334      	movs	r3, #52	; 0x34
 8009eaa:	fb03 f301 	mul.w	r3, r3, r1
 8009eae:	4413      	add	r3, r2
 8009eb0:	3391      	adds	r3, #145	; 0x91
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	701a      	strb	r2, [r3, #0]
            break;
 8009eb6:	e10a      	b.n	800a0ce <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ebe:	b2d9      	uxtb	r1, r3
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	2334      	movs	r3, #52	; 0x34
 8009eca:	fb03 f302 	mul.w	r3, r3, r2
 8009ece:	3390      	adds	r3, #144	; 0x90
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fddc 	bl	800aa96 <USBH_MSC_SCSI_ReadCapacity>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d120      	bne.n	8009f2a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009eee:	4619      	mov	r1, r3
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	2334      	movs	r3, #52	; 0x34
 8009ef4:	fb03 f301 	mul.w	r3, r3, r1
 8009ef8:	4413      	add	r3, r2
 8009efa:	3390      	adds	r3, #144	; 0x90
 8009efc:	2201      	movs	r2, #1
 8009efe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f06:	4619      	mov	r1, r3
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	2334      	movs	r3, #52	; 0x34
 8009f0c:	fb03 f301 	mul.w	r3, r3, r1
 8009f10:	4413      	add	r3, r2
 8009f12:	3391      	adds	r3, #145	; 0x91
 8009f14:	2200      	movs	r2, #0
 8009f16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f1e:	3301      	adds	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009f28:	e0d3      	b.n	800a0d2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d10c      	bne.n	8009f4a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f36:	4619      	mov	r1, r3
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	2334      	movs	r3, #52	; 0x34
 8009f3c:	fb03 f301 	mul.w	r3, r3, r1
 8009f40:	4413      	add	r3, r2
 8009f42:	3390      	adds	r3, #144	; 0x90
 8009f44:	2205      	movs	r2, #5
 8009f46:	701a      	strb	r2, [r3, #0]
            break;
 8009f48:	e0c3      	b.n	800a0d2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	f040 80c0 	bne.w	800a0d2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f58:	4619      	mov	r1, r3
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	2334      	movs	r3, #52	; 0x34
 8009f5e:	fb03 f301 	mul.w	r3, r3, r1
 8009f62:	4413      	add	r3, r2
 8009f64:	3390      	adds	r3, #144	; 0x90
 8009f66:	2201      	movs	r2, #1
 8009f68:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f70:	4619      	mov	r1, r3
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	2334      	movs	r3, #52	; 0x34
 8009f76:	fb03 f301 	mul.w	r3, r3, r1
 8009f7a:	4413      	add	r3, r2
 8009f7c:	3391      	adds	r3, #145	; 0x91
 8009f7e:	2202      	movs	r2, #2
 8009f80:	701a      	strb	r2, [r3, #0]
            break;
 8009f82:	e0a6      	b.n	800a0d2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f8a:	b2d9      	uxtb	r1, r3
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f92:	461a      	mov	r2, r3
 8009f94:	2334      	movs	r3, #52	; 0x34
 8009f96:	fb03 f302 	mul.w	r3, r3, r2
 8009f9a:	3398      	adds	r3, #152	; 0x98
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fe96 	bl	800acd6 <USBH_MSC_SCSI_RequestSense>
 8009faa:	4603      	mov	r3, r0
 8009fac:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d145      	bne.n	800a040 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fba:	4619      	mov	r1, r3
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	2334      	movs	r3, #52	; 0x34
 8009fc0:	fb03 f301 	mul.w	r3, r3, r1
 8009fc4:	4413      	add	r3, r2
 8009fc6:	339c      	adds	r3, #156	; 0x9c
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	2b06      	cmp	r3, #6
 8009fcc:	d00c      	beq.n	8009fe8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	2334      	movs	r3, #52	; 0x34
 8009fda:	fb03 f301 	mul.w	r3, r3, r1
 8009fde:	4413      	add	r3, r2
 8009fe0:	339c      	adds	r3, #156	; 0x9c
 8009fe2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d117      	bne.n	800a018 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	f242 720f 	movw	r2, #9999	; 0x270f
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d80c      	bhi.n	800a018 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a004:	4619      	mov	r1, r3
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	2334      	movs	r3, #52	; 0x34
 800a00a:	fb03 f301 	mul.w	r3, r3, r1
 800a00e:	4413      	add	r3, r2
 800a010:	3390      	adds	r3, #144	; 0x90
 800a012:	2202      	movs	r2, #2
 800a014:	701a      	strb	r2, [r3, #0]
                  break;
 800a016:	e05f      	b.n	800a0d8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a01e:	4619      	mov	r1, r3
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	2334      	movs	r3, #52	; 0x34
 800a024:	fb03 f301 	mul.w	r3, r3, r1
 800a028:	4413      	add	r3, r2
 800a02a:	3390      	adds	r3, #144	; 0x90
 800a02c:	2201      	movs	r2, #1
 800a02e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a036:	3301      	adds	r3, #1
 800a038:	b29a      	uxth	r2, r3
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	2b02      	cmp	r3, #2
 800a044:	d10c      	bne.n	800a060 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a04c:	4619      	mov	r1, r3
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	2334      	movs	r3, #52	; 0x34
 800a052:	fb03 f301 	mul.w	r3, r3, r1
 800a056:	4413      	add	r3, r2
 800a058:	3390      	adds	r3, #144	; 0x90
 800a05a:	2208      	movs	r2, #8
 800a05c:	701a      	strb	r2, [r3, #0]
            break;
 800a05e:	e03a      	b.n	800a0d6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a060:	7bfb      	ldrb	r3, [r7, #15]
 800a062:	2b04      	cmp	r3, #4
 800a064:	d137      	bne.n	800a0d6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a06c:	4619      	mov	r1, r3
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	2334      	movs	r3, #52	; 0x34
 800a072:	fb03 f301 	mul.w	r3, r3, r1
 800a076:	4413      	add	r3, r2
 800a078:	3390      	adds	r3, #144	; 0x90
 800a07a:	2201      	movs	r2, #1
 800a07c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a084:	4619      	mov	r1, r3
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	2334      	movs	r3, #52	; 0x34
 800a08a:	fb03 f301 	mul.w	r3, r3, r1
 800a08e:	4413      	add	r3, r2
 800a090:	3391      	adds	r3, #145	; 0x91
 800a092:	2202      	movs	r2, #2
 800a094:	701a      	strb	r2, [r3, #0]
            break;
 800a096:	e01e      	b.n	800a0d6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a09e:	3301      	adds	r3, #1
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a0a8:	e016      	b.n	800a0d8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0be:	2102      	movs	r1, #2
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	4798      	blx	r3
      break;
 800a0c4:	e00c      	b.n	800a0e0 <USBH_MSC_Process+0x514>
            break;
 800a0c6:	bf00      	nop
 800a0c8:	e00a      	b.n	800a0e0 <USBH_MSC_Process+0x514>
            break;
 800a0ca:	bf00      	nop
 800a0cc:	e008      	b.n	800a0e0 <USBH_MSC_Process+0x514>
            break;
 800a0ce:	bf00      	nop
 800a0d0:	e006      	b.n	800a0e0 <USBH_MSC_Process+0x514>
            break;
 800a0d2:	bf00      	nop
 800a0d4:	e004      	b.n	800a0e0 <USBH_MSC_Process+0x514>
            break;
 800a0d6:	bf00      	nop
      break;
 800a0d8:	e002      	b.n	800a0e0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a0de:	bf00      	nop
  }
  return error;
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop

0800a0ec <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b088      	sub	sp, #32
 800a106:	af02      	add	r7, sp, #8
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a118:	2301      	movs	r3, #1
 800a11a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a11c:	2301      	movs	r3, #1
 800a11e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	2134      	movs	r1, #52	; 0x34
 800a126:	fb01 f303 	mul.w	r3, r1, r3
 800a12a:	4413      	add	r3, r2
 800a12c:	3390      	adds	r3, #144	; 0x90
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b07      	cmp	r3, #7
 800a132:	d03c      	beq.n	800a1ae <USBH_MSC_RdWrProcess+0xac>
 800a134:	2b07      	cmp	r3, #7
 800a136:	f300 80a7 	bgt.w	800a288 <USBH_MSC_RdWrProcess+0x186>
 800a13a:	2b05      	cmp	r3, #5
 800a13c:	d06c      	beq.n	800a218 <USBH_MSC_RdWrProcess+0x116>
 800a13e:	2b06      	cmp	r3, #6
 800a140:	f040 80a2 	bne.w	800a288 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a144:	78f9      	ldrb	r1, [r7, #3]
 800a146:	2300      	movs	r3, #0
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	2300      	movs	r3, #0
 800a14c:	2200      	movs	r2, #0
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fea5 	bl	800ae9e <USBH_MSC_SCSI_Read>
 800a154:	4603      	mov	r3, r0
 800a156:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a158:	7bfb      	ldrb	r3, [r7, #15]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10b      	bne.n	800a176 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a15e:	78fb      	ldrb	r3, [r7, #3]
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	2134      	movs	r1, #52	; 0x34
 800a164:	fb01 f303 	mul.w	r3, r1, r3
 800a168:	4413      	add	r3, r2
 800a16a:	3390      	adds	r3, #144	; 0x90
 800a16c:	2201      	movs	r2, #1
 800a16e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a174:	e08a      	b.n	800a28c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d109      	bne.n	800a190 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a17c:	78fb      	ldrb	r3, [r7, #3]
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	2134      	movs	r1, #52	; 0x34
 800a182:	fb01 f303 	mul.w	r3, r1, r3
 800a186:	4413      	add	r3, r2
 800a188:	3390      	adds	r3, #144	; 0x90
 800a18a:	2205      	movs	r2, #5
 800a18c:	701a      	strb	r2, [r3, #0]
      break;
 800a18e:	e07d      	b.n	800a28c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	2b04      	cmp	r3, #4
 800a194:	d17a      	bne.n	800a28c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a196:	78fb      	ldrb	r3, [r7, #3]
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	2134      	movs	r1, #52	; 0x34
 800a19c:	fb01 f303 	mul.w	r3, r1, r3
 800a1a0:	4413      	add	r3, r2
 800a1a2:	3390      	adds	r3, #144	; 0x90
 800a1a4:	2208      	movs	r2, #8
 800a1a6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ac:	e06e      	b.n	800a28c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a1ae:	78f9      	ldrb	r1, [r7, #3]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fe05 	bl	800adc8 <USBH_MSC_SCSI_Write>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10b      	bne.n	800a1e0 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a1c8:	78fb      	ldrb	r3, [r7, #3]
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	2134      	movs	r1, #52	; 0x34
 800a1ce:	fb01 f303 	mul.w	r3, r1, r3
 800a1d2:	4413      	add	r3, r2
 800a1d4:	3390      	adds	r3, #144	; 0x90
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a1de:	e057      	b.n	800a290 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d109      	bne.n	800a1fa <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a1e6:	78fb      	ldrb	r3, [r7, #3]
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	2134      	movs	r1, #52	; 0x34
 800a1ec:	fb01 f303 	mul.w	r3, r1, r3
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3390      	adds	r3, #144	; 0x90
 800a1f4:	2205      	movs	r2, #5
 800a1f6:	701a      	strb	r2, [r3, #0]
      break;
 800a1f8:	e04a      	b.n	800a290 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	d147      	bne.n	800a290 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a200:	78fb      	ldrb	r3, [r7, #3]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	2134      	movs	r1, #52	; 0x34
 800a206:	fb01 f303 	mul.w	r3, r1, r3
 800a20a:	4413      	add	r3, r2
 800a20c:	3390      	adds	r3, #144	; 0x90
 800a20e:	2208      	movs	r2, #8
 800a210:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a212:	2302      	movs	r3, #2
 800a214:	75fb      	strb	r3, [r7, #23]
      break;
 800a216:	e03b      	b.n	800a290 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a218:	78fb      	ldrb	r3, [r7, #3]
 800a21a:	2234      	movs	r2, #52	; 0x34
 800a21c:	fb02 f303 	mul.w	r3, r2, r3
 800a220:	3398      	adds	r3, #152	; 0x98
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	4413      	add	r3, r2
 800a226:	1d1a      	adds	r2, r3, #4
 800a228:	78fb      	ldrb	r3, [r7, #3]
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fd52 	bl	800acd6 <USBH_MSC_SCSI_RequestSense>
 800a232:	4603      	mov	r3, r0
 800a234:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d113      	bne.n	800a264 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	2134      	movs	r1, #52	; 0x34
 800a242:	fb01 f303 	mul.w	r3, r1, r3
 800a246:	4413      	add	r3, r2
 800a248:	3390      	adds	r3, #144	; 0x90
 800a24a:	2201      	movs	r2, #1
 800a24c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a24e:	78fb      	ldrb	r3, [r7, #3]
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	2134      	movs	r1, #52	; 0x34
 800a254:	fb01 f303 	mul.w	r3, r1, r3
 800a258:	4413      	add	r3, r2
 800a25a:	3391      	adds	r3, #145	; 0x91
 800a25c:	2202      	movs	r2, #2
 800a25e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a260:	2302      	movs	r3, #2
 800a262:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a264:	7bfb      	ldrb	r3, [r7, #15]
 800a266:	2b02      	cmp	r3, #2
 800a268:	d014      	beq.n	800a294 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	d111      	bne.n	800a294 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	693a      	ldr	r2, [r7, #16]
 800a274:	2134      	movs	r1, #52	; 0x34
 800a276:	fb01 f303 	mul.w	r3, r1, r3
 800a27a:	4413      	add	r3, r2
 800a27c:	3390      	adds	r3, #144	; 0x90
 800a27e:	2208      	movs	r2, #8
 800a280:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a282:	2302      	movs	r3, #2
 800a284:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a286:	e005      	b.n	800a294 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a288:	bf00      	nop
 800a28a:	e004      	b.n	800a296 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a28c:	bf00      	nop
 800a28e:	e002      	b.n	800a296 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a290:	bf00      	nop
 800a292:	e000      	b.n	800a296 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a294:	bf00      	nop

  }
  return error;
 800a296:	7dfb      	ldrb	r3, [r7, #23]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2b2:	69db      	ldr	r3, [r3, #28]
 800a2b4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b0b      	cmp	r3, #11
 800a2be:	d10c      	bne.n	800a2da <USBH_MSC_UnitIsReady+0x3a>
 800a2c0:	78fb      	ldrb	r3, [r7, #3]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	2134      	movs	r1, #52	; 0x34
 800a2c6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ca:	4413      	add	r3, r2
 800a2cc:	3391      	adds	r3, #145	; 0x91
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d102      	bne.n	800a2da <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	73fb      	strb	r3, [r7, #15]
 800a2d8:	e001      	b.n	800a2de <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	607a      	str	r2, [r7, #4]
 800a2f8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a300:	69db      	ldr	r3, [r3, #28]
 800a302:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b0b      	cmp	r3, #11
 800a30c:	d10d      	bne.n	800a32a <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a30e:	7afb      	ldrb	r3, [r7, #11]
 800a310:	2234      	movs	r2, #52	; 0x34
 800a312:	fb02 f303 	mul.w	r3, r2, r3
 800a316:	3390      	adds	r3, #144	; 0x90
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	4413      	add	r3, r2
 800a31c:	2234      	movs	r2, #52	; 0x34
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f007 fd41 	bl	8011da8 <memcpy>
    return USBH_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	e000      	b.n	800a32c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a32a:	2302      	movs	r3, #2
  }
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b088      	sub	sp, #32
 800a338:	af02      	add	r7, sp, #8
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	607a      	str	r2, [r7, #4]
 800a33e:	603b      	str	r3, [r7, #0]
 800a340:	460b      	mov	r3, r1
 800a342:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00e      	beq.n	800a378 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a360:	2b0b      	cmp	r3, #11
 800a362:	d109      	bne.n	800a378 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a364:	7afb      	ldrb	r3, [r7, #11]
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	2134      	movs	r1, #52	; 0x34
 800a36a:	fb01 f303 	mul.w	r3, r1, r3
 800a36e:	4413      	add	r3, r2
 800a370:	3390      	adds	r3, #144	; 0x90
 800a372:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a374:	2b01      	cmp	r3, #1
 800a376:	d001      	beq.n	800a37c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a378:	2302      	movs	r3, #2
 800a37a:	e040      	b.n	800a3fe <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2206      	movs	r2, #6
 800a380:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a382:	7afb      	ldrb	r3, [r7, #11]
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	2134      	movs	r1, #52	; 0x34
 800a388:	fb01 f303 	mul.w	r3, r1, r3
 800a38c:	4413      	add	r3, r2
 800a38e:	3390      	adds	r3, #144	; 0x90
 800a390:	2206      	movs	r2, #6
 800a392:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a394:	7afb      	ldrb	r3, [r7, #11]
 800a396:	b29a      	uxth	r2, r3
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a39e:	7af9      	ldrb	r1, [r7, #11]
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 fd78 	bl	800ae9e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a3b4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a3b6:	e016      	b.n	800a3e6 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	1ad2      	subs	r2, r2, r3
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	f242 7110 	movw	r1, #10000	; 0x2710
 800a3c8:	fb01 f303 	mul.w	r3, r1, r3
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d805      	bhi.n	800a3dc <USBH_MSC_Read+0xa8>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d104      	bne.n	800a3e6 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	e00b      	b.n	800a3fe <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a3e6:	7afb      	ldrb	r3, [r7, #11]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f7ff fe89 	bl	800a102 <USBH_MSC_RdWrProcess>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d0e0      	beq.n	800a3b8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b088      	sub	sp, #32
 800a40a:	af02      	add	r7, sp, #8
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
 800a412:	460b      	mov	r3, r1
 800a414:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a426:	b2db      	uxtb	r3, r3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00e      	beq.n	800a44a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a432:	2b0b      	cmp	r3, #11
 800a434:	d109      	bne.n	800a44a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a436:	7afb      	ldrb	r3, [r7, #11]
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	2134      	movs	r1, #52	; 0x34
 800a43c:	fb01 f303 	mul.w	r3, r1, r3
 800a440:	4413      	add	r3, r2
 800a442:	3390      	adds	r3, #144	; 0x90
 800a444:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a446:	2b01      	cmp	r3, #1
 800a448:	d001      	beq.n	800a44e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a44a:	2302      	movs	r3, #2
 800a44c:	e040      	b.n	800a4d0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	2207      	movs	r2, #7
 800a452:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a454:	7afb      	ldrb	r3, [r7, #11]
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	2134      	movs	r1, #52	; 0x34
 800a45a:	fb01 f303 	mul.w	r3, r1, r3
 800a45e:	4413      	add	r3, r2
 800a460:	3390      	adds	r3, #144	; 0x90
 800a462:	2207      	movs	r2, #7
 800a464:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a466:	7afb      	ldrb	r3, [r7, #11]
 800a468:	b29a      	uxth	r2, r3
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a470:	7af9      	ldrb	r1, [r7, #11]
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 fca4 	bl	800adc8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a486:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a488:	e016      	b.n	800a4b8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	1ad2      	subs	r2, r2, r3
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	f242 7110 	movw	r1, #10000	; 0x2710
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d805      	bhi.n	800a4ae <USBH_MSC_Write+0xa8>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d104      	bne.n	800a4b8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	e00b      	b.n	800a4d0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a4b8:	7afb      	ldrb	r3, [r7, #11]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f7ff fe20 	bl	800a102 <USBH_MSC_RdWrProcess>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d0e0      	beq.n	800a48a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3718      	adds	r7, #24
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2221      	movs	r2, #33	; 0x21
 800a4e4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	22ff      	movs	r2, #255	; 0xff
 800a4ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800a4fe:	2200      	movs	r2, #0
 800a500:	2100      	movs	r1, #0
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f001 fdab 	bl	800c05e <USBH_CtlReq>
 800a508:	4603      	mov	r3, r0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	22a1      	movs	r2, #161	; 0xa1
 800a520:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	22fe      	movs	r2, #254	; 0xfe
 800a526:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a53a:	2201      	movs	r2, #1
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f001 fd8d 	bl	800c05e <USBH_CtlReq>
 800a544:	4603      	mov	r3, r0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
	...

0800a550 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a55e:	69db      	ldr	r3, [r3, #28]
 800a560:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	4a09      	ldr	r2, [pc, #36]	; (800a58c <USBH_MSC_BOT_Init+0x3c>)
 800a566:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4a09      	ldr	r2, [pc, #36]	; (800a590 <USBH_MSC_BOT_Init+0x40>)
 800a56c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2201      	movs	r2, #1
 800a57a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	43425355 	.word	0x43425355
 800a590:	20304050 	.word	0x20304050

0800a594 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af02      	add	r7, sp, #8
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	2b0a      	cmp	r3, #10
 800a5c8:	f200 819e 	bhi.w	800a908 <USBH_MSC_BOT_Process+0x374>
 800a5cc:	a201      	add	r2, pc, #4	; (adr r2, 800a5d4 <USBH_MSC_BOT_Process+0x40>)
 800a5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d2:	bf00      	nop
 800a5d4:	0800a601 	.word	0x0800a601
 800a5d8:	0800a629 	.word	0x0800a629
 800a5dc:	0800a693 	.word	0x0800a693
 800a5e0:	0800a6b1 	.word	0x0800a6b1
 800a5e4:	0800a735 	.word	0x0800a735
 800a5e8:	0800a757 	.word	0x0800a757
 800a5ec:	0800a7ef 	.word	0x0800a7ef
 800a5f0:	0800a80b 	.word	0x0800a80b
 800a5f4:	0800a85d 	.word	0x0800a85d
 800a5f8:	0800a88d 	.word	0x0800a88d
 800a5fc:	0800a8ef 	.word	0x0800a8ef
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	78fa      	ldrb	r2, [r7, #3]
 800a604:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	2202      	movs	r2, #2
 800a60c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	795b      	ldrb	r3, [r3, #5]
 800a61a:	2201      	movs	r2, #1
 800a61c:	9200      	str	r2, [sp, #0]
 800a61e:	221f      	movs	r2, #31
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f001 ff2a 	bl	800c47a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a626:	e17e      	b.n	800a926 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	795b      	ldrb	r3, [r3, #5]
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f007 faa2 	bl	8011b78 <USBH_LL_GetURBState>
 800a634:	4603      	mov	r3, r0
 800a636:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a638:	7d3b      	ldrb	r3, [r7, #20]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d118      	bne.n	800a670 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00f      	beq.n	800a666 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a64c:	b25b      	sxtb	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	da04      	bge.n	800a65c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	2203      	movs	r2, #3
 800a656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a65a:	e157      	b.n	800a90c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	2205      	movs	r2, #5
 800a660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a664:	e152      	b.n	800a90c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	2207      	movs	r2, #7
 800a66a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a66e:	e14d      	b.n	800a90c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a670:	7d3b      	ldrb	r3, [r7, #20]
 800a672:	2b02      	cmp	r3, #2
 800a674:	d104      	bne.n	800a680 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a67e:	e145      	b.n	800a90c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a680:	7d3b      	ldrb	r3, [r7, #20]
 800a682:	2b05      	cmp	r3, #5
 800a684:	f040 8142 	bne.w	800a90c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	220a      	movs	r2, #10
 800a68c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a690:	e13c      	b.n	800a90c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	895a      	ldrh	r2, [r3, #10]
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	791b      	ldrb	r3, [r3, #4]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f001 ff0f 	bl	800c4c4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	2204      	movs	r2, #4
 800a6aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a6ae:	e13a      	b.n	800a926 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	791b      	ldrb	r3, [r3, #4]
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f007 fa5e 	bl	8011b78 <USBH_LL_GetURBState>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a6c0:	7d3b      	ldrb	r3, [r7, #20]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d12d      	bne.n	800a722 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ca:	693a      	ldr	r2, [r7, #16]
 800a6cc:	8952      	ldrh	r2, [r2, #10]
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d910      	bls.n	800a6f4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	8952      	ldrh	r2, [r2, #10]
 800a6dc:	441a      	add	r2, r3
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	8952      	ldrh	r2, [r2, #10]
 800a6ec:	1a9a      	subs	r2, r3, r2
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a6f2:	e002      	b.n	800a6fa <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00a      	beq.n	800a718 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	895a      	ldrh	r2, [r3, #10]
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	791b      	ldrb	r3, [r3, #4]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f001 fed7 	bl	800c4c4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a716:	e0fb      	b.n	800a910 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	2207      	movs	r2, #7
 800a71c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a720:	e0f6      	b.n	800a910 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a722:	7d3b      	ldrb	r3, [r7, #20]
 800a724:	2b05      	cmp	r3, #5
 800a726:	f040 80f3 	bne.w	800a910 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2209      	movs	r2, #9
 800a72e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a732:	e0ed      	b.n	800a910 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	891a      	ldrh	r2, [r3, #8]
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	795b      	ldrb	r3, [r3, #5]
 800a742:	2001      	movs	r0, #1
 800a744:	9000      	str	r0, [sp, #0]
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f001 fe97 	bl	800c47a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	2206      	movs	r2, #6
 800a750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a754:	e0e7      	b.n	800a926 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	795b      	ldrb	r3, [r3, #5]
 800a75a:	4619      	mov	r1, r3
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f007 fa0b 	bl	8011b78 <USBH_LL_GetURBState>
 800a762:	4603      	mov	r3, r0
 800a764:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a766:	7d3b      	ldrb	r3, [r7, #20]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d12f      	bne.n	800a7cc <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	8912      	ldrh	r2, [r2, #8]
 800a774:	4293      	cmp	r3, r2
 800a776:	d910      	bls.n	800a79a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	8912      	ldrh	r2, [r2, #8]
 800a782:	441a      	add	r2, r3
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	8912      	ldrh	r2, [r2, #8]
 800a792:	1a9a      	subs	r2, r3, r2
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	65da      	str	r2, [r3, #92]	; 0x5c
 800a798:	e002      	b.n	800a7a0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	2200      	movs	r2, #0
 800a79e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d00c      	beq.n	800a7c2 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	891a      	ldrh	r2, [r3, #8]
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	795b      	ldrb	r3, [r3, #5]
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	9000      	str	r0, [sp, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f001 fe5d 	bl	800c47a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a7c0:	e0a8      	b.n	800a914 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	2207      	movs	r2, #7
 800a7c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7ca:	e0a3      	b.n	800a914 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a7cc:	7d3b      	ldrb	r3, [r7, #20]
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d104      	bne.n	800a7dc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	2205      	movs	r2, #5
 800a7d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7da:	e09b      	b.n	800a914 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a7dc:	7d3b      	ldrb	r3, [r7, #20]
 800a7de:	2b05      	cmp	r3, #5
 800a7e0:	f040 8098 	bne.w	800a914 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	220a      	movs	r2, #10
 800a7e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7ec:	e092      	b.n	800a914 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	791b      	ldrb	r3, [r3, #4]
 800a7f8:	220d      	movs	r2, #13
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f001 fe62 	bl	800c4c4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	2208      	movs	r2, #8
 800a804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a808:	e08d      	b.n	800a926 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	791b      	ldrb	r3, [r3, #4]
 800a80e:	4619      	mov	r1, r3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f007 f9b1 	bl	8011b78 <USBH_LL_GetURBState>
 800a816:	4603      	mov	r3, r0
 800a818:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a81a:	7d3b      	ldrb	r3, [r7, #20]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d115      	bne.n	800a84c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 f8a9 	bl	800a988 <USBH_MSC_DecodeCSW>
 800a836:	4603      	mov	r3, r0
 800a838:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a83a:	7d7b      	ldrb	r3, [r7, #21]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d102      	bne.n	800a846 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a844:	e068      	b.n	800a918 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a846:	2302      	movs	r3, #2
 800a848:	75fb      	strb	r3, [r7, #23]
      break;
 800a84a:	e065      	b.n	800a918 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a84c:	7d3b      	ldrb	r3, [r7, #20]
 800a84e:	2b05      	cmp	r3, #5
 800a850:	d162      	bne.n	800a918 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	2209      	movs	r2, #9
 800a856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a85a:	e05d      	b.n	800a918 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	2200      	movs	r2, #0
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f864 	bl	800a930 <USBH_MSC_BOT_Abort>
 800a868:	4603      	mov	r3, r0
 800a86a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a86c:	7dbb      	ldrb	r3, [r7, #22]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d104      	bne.n	800a87c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2207      	movs	r2, #7
 800a876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a87a:	e04f      	b.n	800a91c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a87c:	7dbb      	ldrb	r3, [r7, #22]
 800a87e:	2b04      	cmp	r3, #4
 800a880:	d14c      	bne.n	800a91c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	220b      	movs	r2, #11
 800a886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a88a:	e047      	b.n	800a91c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a88c:	78fb      	ldrb	r3, [r7, #3]
 800a88e:	2201      	movs	r2, #1
 800a890:	4619      	mov	r1, r3
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f84c 	bl	800a930 <USBH_MSC_BOT_Abort>
 800a898:	4603      	mov	r3, r0
 800a89a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a89c:	7dbb      	ldrb	r3, [r7, #22]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d11d      	bne.n	800a8de <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	795b      	ldrb	r3, [r3, #5]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f007 f9bf 	bl	8011c2c <USBH_LL_GetToggle>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	7959      	ldrb	r1, [r3, #5]
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
 800a8b8:	f1c3 0301 	rsb	r3, r3, #1
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f007 f983 	bl	8011bcc <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	791b      	ldrb	r3, [r3, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f007 f97c 	bl	8011bcc <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	2209      	movs	r2, #9
 800a8d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a8dc:	e020      	b.n	800a920 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a8de:	7dbb      	ldrb	r3, [r7, #22]
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	d11d      	bne.n	800a920 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	220b      	movs	r2, #11
 800a8e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8ec:	e018      	b.n	800a920 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff fdf2 	bl	800a4d8 <USBH_MSC_BOT_REQ_Reset>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a8f8:	7dfb      	ldrb	r3, [r7, #23]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d112      	bne.n	800a924 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a906:	e00d      	b.n	800a924 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a908:	bf00      	nop
 800a90a:	e00c      	b.n	800a926 <USBH_MSC_BOT_Process+0x392>
      break;
 800a90c:	bf00      	nop
 800a90e:	e00a      	b.n	800a926 <USBH_MSC_BOT_Process+0x392>
      break;
 800a910:	bf00      	nop
 800a912:	e008      	b.n	800a926 <USBH_MSC_BOT_Process+0x392>
      break;
 800a914:	bf00      	nop
 800a916:	e006      	b.n	800a926 <USBH_MSC_BOT_Process+0x392>
      break;
 800a918:	bf00      	nop
 800a91a:	e004      	b.n	800a926 <USBH_MSC_BOT_Process+0x392>
      break;
 800a91c:	bf00      	nop
 800a91e:	e002      	b.n	800a926 <USBH_MSC_BOT_Process+0x392>
      break;
 800a920:	bf00      	nop
 800a922:	e000      	b.n	800a926 <USBH_MSC_BOT_Process+0x392>
      break;
 800a924:	bf00      	nop
  }
  return status;
 800a926:	7dfb      	ldrb	r3, [r7, #23]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	460b      	mov	r3, r1
 800a93a:	70fb      	strb	r3, [r7, #3]
 800a93c:	4613      	mov	r3, r2
 800a93e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a940:	2302      	movs	r3, #2
 800a942:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a94a:	69db      	ldr	r3, [r3, #28]
 800a94c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a94e:	78bb      	ldrb	r3, [r7, #2]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <USBH_MSC_BOT_Abort+0x2a>
 800a954:	2b01      	cmp	r3, #1
 800a956:	d009      	beq.n	800a96c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a958:	e011      	b.n	800a97e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	79db      	ldrb	r3, [r3, #7]
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f001 f99c 	bl	800bc9e <USBH_ClrFeature>
 800a966:	4603      	mov	r3, r0
 800a968:	73fb      	strb	r3, [r7, #15]
      break;
 800a96a:	e008      	b.n	800a97e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	799b      	ldrb	r3, [r3, #6]
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 f993 	bl	800bc9e <USBH_ClrFeature>
 800a978:	4603      	mov	r3, r0
 800a97a:	73fb      	strb	r3, [r7, #15]
      break;
 800a97c:	bf00      	nop
  }
  return status;
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3710      	adds	r7, #16
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a99a:	2301      	movs	r3, #1
 800a99c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	791b      	ldrb	r3, [r3, #4]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f007 f855 	bl	8011a54 <USBH_LL_GetLastXferSize>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b0d      	cmp	r3, #13
 800a9ae:	d002      	beq.n	800a9b6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	73fb      	strb	r3, [r7, #15]
 800a9b4:	e024      	b.n	800aa00 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ba:	4a14      	ldr	r2, [pc, #80]	; (800aa0c <USBH_MSC_DecodeCSW+0x84>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d11d      	bne.n	800a9fc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d119      	bne.n	800aa00 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d102      	bne.n	800a9dc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	73fb      	strb	r3, [r7, #15]
 800a9da:	e011      	b.n	800aa00 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d102      	bne.n	800a9ec <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	73fb      	strb	r3, [r7, #15]
 800a9ea:	e009      	b.n	800aa00 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d104      	bne.n	800aa00 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	73fb      	strb	r3, [r7, #15]
 800a9fa:	e001      	b.n	800aa00 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a9fc:	2302      	movs	r3, #2
 800a9fe:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	53425355 	.word	0x53425355

0800aa10 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d002      	beq.n	800aa3a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d021      	beq.n	800aa7c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800aa38:	e028      	b.n	800aa8c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	220a      	movs	r2, #10
 800aa4c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	3363      	adds	r3, #99	; 0x63
 800aa54:	2210      	movs	r2, #16
 800aa56:	2100      	movs	r1, #0
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f007 f9b3 	bl	8011dc4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	2202      	movs	r2, #2
 800aa72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800aa76:	2301      	movs	r3, #1
 800aa78:	73fb      	strb	r3, [r7, #15]
      break;
 800aa7a:	e007      	b.n	800aa8c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aa7c:	78fb      	ldrb	r3, [r7, #3]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff fd87 	bl	800a594 <USBH_MSC_BOT_Process>
 800aa86:	4603      	mov	r3, r0
 800aa88:	73fb      	strb	r3, [r7, #15]
      break;
 800aa8a:	bf00      	nop
  }

  return error;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b086      	sub	sp, #24
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	607a      	str	r2, [r7, #4]
 800aaa2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d002      	beq.n	800aac2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d027      	beq.n	800ab10 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800aac0:	e05f      	b.n	800ab82 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	2208      	movs	r2, #8
 800aac6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	2280      	movs	r2, #128	; 0x80
 800aacc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	220a      	movs	r2, #10
 800aad4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	3363      	adds	r3, #99	; 0x63
 800aadc:	2210      	movs	r2, #16
 800aade:	2100      	movs	r1, #0
 800aae0:	4618      	mov	r0, r3
 800aae2:	f007 f96f 	bl	8011dc4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	2225      	movs	r2, #37	; 0x25
 800aaea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	2202      	movs	r2, #2
 800aafa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	f103 0210 	add.w	r2, r3, #16
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab0e:	e038      	b.n	800ab82 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ab10:	7afb      	ldrb	r3, [r7, #11]
 800ab12:	4619      	mov	r1, r3
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f7ff fd3d 	bl	800a594 <USBH_MSC_BOT_Process>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d12d      	bne.n	800ab80 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab2a:	3303      	adds	r3, #3
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab36:	3302      	adds	r3, #2
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	021b      	lsls	r3, r3, #8
 800ab3c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab44:	3301      	adds	r3, #1
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ab4a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	061b      	lsls	r3, r3, #24
 800ab56:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab62:	3307      	adds	r3, #7
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab6e:	3306      	adds	r3, #6
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	021b      	lsls	r3, r3, #8
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	809a      	strh	r2, [r3, #4]
      break;
 800ab80:	bf00      	nop
  }

  return error;
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	460b      	mov	r3, r1
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aba4:	69db      	ldr	r3, [r3, #28]
 800aba6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d002      	beq.n	800abb8 <USBH_MSC_SCSI_Inquiry+0x2c>
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d03d      	beq.n	800ac32 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800abb6:	e089      	b.n	800accc <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	2224      	movs	r2, #36	; 0x24
 800abbc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	2280      	movs	r2, #128	; 0x80
 800abc2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	220a      	movs	r2, #10
 800abca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	3363      	adds	r3, #99	; 0x63
 800abd2:	220a      	movs	r2, #10
 800abd4:	2100      	movs	r1, #0
 800abd6:	4618      	mov	r0, r3
 800abd8:	f007 f8f4 	bl	8011dc4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	2212      	movs	r2, #18
 800abe0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800abe4:	7afb      	ldrb	r3, [r7, #11]
 800abe6:	015b      	lsls	r3, r3, #5
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	2224      	movs	r2, #36	; 0x24
 800ac04:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f103 0210 	add.w	r2, r3, #16
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac30:	e04c      	b.n	800accc <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac32:	7afb      	ldrb	r3, [r7, #11]
 800ac34:	4619      	mov	r1, r3
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f7ff fcac 	bl	800a594 <USBH_MSC_BOT_Process>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ac40:	7dfb      	ldrb	r3, [r7, #23]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d141      	bne.n	800acca <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800ac46:	2222      	movs	r2, #34	; 0x22
 800ac48:	2100      	movs	r1, #0
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f007 f8ba 	bl	8011dc4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	f003 031f 	and.w	r3, r3, #31
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	095b      	lsrs	r3, r3, #5
 800ac6c:	b2da      	uxtb	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac78:	3301      	adds	r3, #1
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	b25b      	sxtb	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	da03      	bge.n	800ac8a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	709a      	strb	r2, [r3, #2]
 800ac88:	e002      	b.n	800ac90 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	1cd8      	adds	r0, r3, #3
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac9a:	3308      	adds	r3, #8
 800ac9c:	2208      	movs	r2, #8
 800ac9e:	4619      	mov	r1, r3
 800aca0:	f007 f882 	bl	8011da8 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f103 000c 	add.w	r0, r3, #12
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acb0:	3310      	adds	r3, #16
 800acb2:	2210      	movs	r2, #16
 800acb4:	4619      	mov	r1, r3
 800acb6:	f007 f877 	bl	8011da8 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	331d      	adds	r3, #29
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800acc4:	3220      	adds	r2, #32
 800acc6:	6812      	ldr	r2, [r2, #0]
 800acc8:	601a      	str	r2, [r3, #0]
      break;
 800acca:	bf00      	nop
  }

  return error;
 800accc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b086      	sub	sp, #24
 800acda:	af00      	add	r7, sp, #0
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	460b      	mov	r3, r1
 800ace0:	607a      	str	r2, [r7, #4]
 800ace2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ace4:	2302      	movs	r3, #2
 800ace6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acee:	69db      	ldr	r3, [r3, #28]
 800acf0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d002      	beq.n	800ad02 <USBH_MSC_SCSI_RequestSense+0x2c>
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d03d      	beq.n	800ad7c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800ad00:	e05d      	b.n	800adbe <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	220e      	movs	r2, #14
 800ad06:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	2280      	movs	r2, #128	; 0x80
 800ad0c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	220a      	movs	r2, #10
 800ad14:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	3363      	adds	r3, #99	; 0x63
 800ad1c:	2210      	movs	r2, #16
 800ad1e:	2100      	movs	r1, #0
 800ad20:	4618      	mov	r0, r3
 800ad22:	f007 f84f 	bl	8011dc4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	2203      	movs	r2, #3
 800ad2a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ad2e:	7afb      	ldrb	r3, [r7, #11]
 800ad30:	015b      	lsls	r3, r3, #5
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	220e      	movs	r2, #14
 800ad4e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	2202      	movs	r2, #2
 800ad66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	f103 0210 	add.w	r2, r3, #16
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ad76:	2301      	movs	r3, #1
 800ad78:	75fb      	strb	r3, [r7, #23]
      break;
 800ad7a:	e020      	b.n	800adbe <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ad7c:	7afb      	ldrb	r3, [r7, #11]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f7ff fc07 	bl	800a594 <USBH_MSC_BOT_Process>
 800ad86:	4603      	mov	r3, r0
 800ad88:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d115      	bne.n	800adbc <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad96:	3302      	adds	r3, #2
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	f003 030f 	and.w	r3, r3, #15
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adaa:	7b1a      	ldrb	r2, [r3, #12]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adb6:	7b5a      	ldrb	r2, [r3, #13]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	709a      	strb	r2, [r3, #2]
      break;
 800adbc:	bf00      	nop
  }

  return error;
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	607a      	str	r2, [r7, #4]
 800add2:	603b      	str	r3, [r7, #0]
 800add4:	460b      	mov	r3, r1
 800add6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800add8:	2302      	movs	r3, #2
 800adda:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ade2:	69db      	ldr	r3, [r3, #28]
 800ade4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800adec:	2b01      	cmp	r3, #1
 800adee:	d002      	beq.n	800adf6 <USBH_MSC_SCSI_Write+0x2e>
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d047      	beq.n	800ae84 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800adf4:	e04e      	b.n	800ae94 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800adfc:	461a      	mov	r2, r3
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	fb03 f202 	mul.w	r2, r3, r2
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	220a      	movs	r2, #10
 800ae14:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	3363      	adds	r3, #99	; 0x63
 800ae1c:	2210      	movs	r2, #16
 800ae1e:	2100      	movs	r1, #0
 800ae20:	4618      	mov	r0, r3
 800ae22:	f006 ffcf 	bl	8011dc4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	222a      	movs	r2, #42	; 0x2a
 800ae2a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ae2e:	79fa      	ldrb	r2, [r7, #7]
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ae36:	79ba      	ldrb	r2, [r7, #6]
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ae3e:	797a      	ldrb	r2, [r7, #5]
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ae46:	1d3b      	adds	r3, r7, #4
 800ae48:	781a      	ldrb	r2, [r3, #0]
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ae50:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ae5a:	f107 0320 	add.w	r3, r7, #32
 800ae5e:	781a      	ldrb	r2, [r3, #0]
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2202      	movs	r2, #2
 800ae72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	75fb      	strb	r3, [r7, #23]
      break;
 800ae82:	e007      	b.n	800ae94 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae84:	7afb      	ldrb	r3, [r7, #11]
 800ae86:	4619      	mov	r1, r3
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f7ff fb83 	bl	800a594 <USBH_MSC_BOT_Process>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	75fb      	strb	r3, [r7, #23]
      break;
 800ae92:	bf00      	nop
  }

  return error;
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b086      	sub	sp, #24
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60f8      	str	r0, [r7, #12]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
 800aeaa:	460b      	mov	r3, r1
 800aeac:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aeae:	2302      	movs	r3, #2
 800aeb0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeb8:	69db      	ldr	r3, [r3, #28]
 800aeba:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d002      	beq.n	800aecc <USBH_MSC_SCSI_Read+0x2e>
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d047      	beq.n	800af5a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800aeca:	e04e      	b.n	800af6a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800aed2:	461a      	mov	r2, r3
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	fb03 f202 	mul.w	r2, r3, r2
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2280      	movs	r2, #128	; 0x80
 800aee2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	220a      	movs	r2, #10
 800aeea:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	3363      	adds	r3, #99	; 0x63
 800aef2:	2210      	movs	r2, #16
 800aef4:	2100      	movs	r1, #0
 800aef6:	4618      	mov	r0, r3
 800aef8:	f006 ff64 	bl	8011dc4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	2228      	movs	r2, #40	; 0x28
 800af00:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800af04:	79fa      	ldrb	r2, [r7, #7]
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800af0c:	79ba      	ldrb	r2, [r7, #6]
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800af14:	797a      	ldrb	r2, [r7, #5]
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800af1c:	1d3b      	adds	r3, r7, #4
 800af1e:	781a      	ldrb	r2, [r3, #0]
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800af26:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800af30:	f107 0320 	add.w	r3, r7, #32
 800af34:	781a      	ldrb	r2, [r3, #0]
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	2202      	movs	r2, #2
 800af48:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800af54:	2301      	movs	r3, #1
 800af56:	75fb      	strb	r3, [r7, #23]
      break;
 800af58:	e007      	b.n	800af6a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800af5a:	7afb      	ldrb	r3, [r7, #11]
 800af5c:	4619      	mov	r1, r3
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f7ff fb18 	bl	800a594 <USBH_MSC_BOT_Process>
 800af64:	4603      	mov	r3, r0
 800af66:	75fb      	strb	r3, [r7, #23]
      break;
 800af68:	bf00      	nop
  }

  return error;
 800af6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	4613      	mov	r3, r2
 800af80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800af88:	2302      	movs	r3, #2
 800af8a:	e029      	b.n	800afe0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	79fa      	ldrb	r2, [r7, #7]
 800af90:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f81f 	bl	800afe8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d003      	beq.n	800afd8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f006 fc87 	bl	80118ec <USBH_LL_Init>

  return USBH_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aff0:	2300      	movs	r3, #0
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aff4:	2300      	movs	r3, #0
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	e009      	b.n	800b00e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	33e0      	adds	r3, #224	; 0xe0
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	2200      	movs	r2, #0
 800b006:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3301      	adds	r3, #1
 800b00c:	60fb      	str	r3, [r7, #12]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b0e      	cmp	r3, #14
 800b012:	d9f2      	bls.n	800affa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b014:	2300      	movs	r3, #0
 800b016:	60fb      	str	r3, [r7, #12]
 800b018:	e009      	b.n	800b02e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b024:	2200      	movs	r2, #0
 800b026:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	3301      	adds	r3, #1
 800b02c:	60fb      	str	r3, [r7, #12]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b034:	d3f1      	bcc.n	800b01a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2201      	movs	r2, #1
 800b046:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2240      	movs	r2, #64	; 0x40
 800b05a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2201      	movs	r2, #1
 800b06e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d016      	beq.n	800b0d2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d10e      	bne.n	800b0cc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b0b4:	1c59      	adds	r1, r3, #1
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	33de      	adds	r3, #222	; 0xde
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	73fb      	strb	r3, [r7, #15]
 800b0ca:	e004      	b.n	800b0d6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	73fb      	strb	r3, [r7, #15]
 800b0d0:	e001      	b.n	800b0d6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3714      	adds	r7, #20
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b0fa:	78fa      	ldrb	r2, [r7, #3]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d204      	bcs.n	800b10a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	78fa      	ldrb	r2, [r7, #3]
 800b104:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b108:	e001      	b.n	800b10e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b10a:	2302      	movs	r3, #2
 800b10c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b087      	sub	sp, #28
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	4608      	mov	r0, r1
 800b126:	4611      	mov	r1, r2
 800b128:	461a      	mov	r2, r3
 800b12a:	4603      	mov	r3, r0
 800b12c:	70fb      	strb	r3, [r7, #3]
 800b12e:	460b      	mov	r3, r1
 800b130:	70bb      	strb	r3, [r7, #2]
 800b132:	4613      	mov	r3, r2
 800b134:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b144:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b146:	e025      	b.n	800b194 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b148:	7dfb      	ldrb	r3, [r7, #23]
 800b14a:	221a      	movs	r2, #26
 800b14c:	fb02 f303 	mul.w	r3, r2, r3
 800b150:	3308      	adds	r3, #8
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	4413      	add	r3, r2
 800b156:	3302      	adds	r3, #2
 800b158:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	795b      	ldrb	r3, [r3, #5]
 800b15e:	78fa      	ldrb	r2, [r7, #3]
 800b160:	429a      	cmp	r2, r3
 800b162:	d002      	beq.n	800b16a <USBH_FindInterface+0x4e>
 800b164:	78fb      	ldrb	r3, [r7, #3]
 800b166:	2bff      	cmp	r3, #255	; 0xff
 800b168:	d111      	bne.n	800b18e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b16e:	78ba      	ldrb	r2, [r7, #2]
 800b170:	429a      	cmp	r2, r3
 800b172:	d002      	beq.n	800b17a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b174:	78bb      	ldrb	r3, [r7, #2]
 800b176:	2bff      	cmp	r3, #255	; 0xff
 800b178:	d109      	bne.n	800b18e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b17e:	787a      	ldrb	r2, [r7, #1]
 800b180:	429a      	cmp	r2, r3
 800b182:	d002      	beq.n	800b18a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b184:	787b      	ldrb	r3, [r7, #1]
 800b186:	2bff      	cmp	r3, #255	; 0xff
 800b188:	d101      	bne.n	800b18e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b18a:	7dfb      	ldrb	r3, [r7, #23]
 800b18c:	e006      	b.n	800b19c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
 800b190:	3301      	adds	r3, #1
 800b192:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b194:	7dfb      	ldrb	r3, [r7, #23]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d9d6      	bls.n	800b148 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b19a:	23ff      	movs	r3, #255	; 0xff
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	371c      	adds	r7, #28
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f006 fbd7 	bl	8011964 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b1b6:	2101      	movs	r1, #1
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f006 fcf0 	bl	8011b9e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b088      	sub	sp, #32
 800b1cc:	af04      	add	r7, sp, #16
 800b1ce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b1d0:	2302      	movs	r3, #2
 800b1d2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d102      	bne.n	800b1ea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2203      	movs	r2, #3
 800b1e8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	2b0b      	cmp	r3, #11
 800b1f2:	f200 81b3 	bhi.w	800b55c <USBH_Process+0x394>
 800b1f6:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <USBH_Process+0x34>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b22d 	.word	0x0800b22d
 800b200:	0800b25f 	.word	0x0800b25f
 800b204:	0800b2c7 	.word	0x0800b2c7
 800b208:	0800b4f7 	.word	0x0800b4f7
 800b20c:	0800b55d 	.word	0x0800b55d
 800b210:	0800b36b 	.word	0x0800b36b
 800b214:	0800b49d 	.word	0x0800b49d
 800b218:	0800b3a1 	.word	0x0800b3a1
 800b21c:	0800b3c1 	.word	0x0800b3c1
 800b220:	0800b3e1 	.word	0x0800b3e1
 800b224:	0800b40f 	.word	0x0800b40f
 800b228:	0800b4df 	.word	0x0800b4df
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 8193 	beq.w	800b560 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b240:	20c8      	movs	r0, #200	; 0xc8
 800b242:	f006 fd23 	bl	8011c8c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f006 fbe9 	bl	8011a1e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b25c:	e180      	b.n	800b560 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b264:	2b01      	cmp	r3, #1
 800b266:	d107      	bne.n	800b278 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2202      	movs	r2, #2
 800b274:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b276:	e182      	b.n	800b57e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b27e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b282:	d914      	bls.n	800b2ae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b28a:	3301      	adds	r3, #1
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d903      	bls.n	800b2a6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	220d      	movs	r2, #13
 800b2a2:	701a      	strb	r2, [r3, #0]
      break;
 800b2a4:	e16b      	b.n	800b57e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	701a      	strb	r2, [r3, #0]
      break;
 800b2ac:	e167      	b.n	800b57e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b2b4:	f103 020a 	add.w	r2, r3, #10
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b2be:	200a      	movs	r0, #10
 800b2c0:	f006 fce4 	bl	8011c8c <USBH_Delay>
      break;
 800b2c4:	e15b      	b.n	800b57e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d005      	beq.n	800b2dc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2d6:	2104      	movs	r1, #4
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b2dc:	2064      	movs	r0, #100	; 0x64
 800b2de:	f006 fcd5 	bl	8011c8c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f006 fb74 	bl	80119d0 <USBH_LL_GetSpeed>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2205      	movs	r2, #5
 800b2f6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f001 f92f 	bl	800c55e <USBH_AllocPipe>
 800b300:	4603      	mov	r3, r0
 800b302:	461a      	mov	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b308:	2180      	movs	r1, #128	; 0x80
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f001 f927 	bl	800c55e <USBH_AllocPipe>
 800b310:	4603      	mov	r3, r0
 800b312:	461a      	mov	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	7919      	ldrb	r1, [r3, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b32c:	b292      	uxth	r2, r2
 800b32e:	9202      	str	r2, [sp, #8]
 800b330:	2200      	movs	r2, #0
 800b332:	9201      	str	r2, [sp, #4]
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	4603      	mov	r3, r0
 800b338:	2280      	movs	r2, #128	; 0x80
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f001 f8e0 	bl	800c500 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	7959      	ldrb	r1, [r3, #5]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b354:	b292      	uxth	r2, r2
 800b356:	9202      	str	r2, [sp, #8]
 800b358:	2200      	movs	r2, #0
 800b35a:	9201      	str	r2, [sp, #4]
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	4603      	mov	r3, r0
 800b360:	2200      	movs	r2, #0
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f001 f8cc 	bl	800c500 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b368:	e109      	b.n	800b57e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f90c 	bl	800b588 <USBH_HandleEnum>
 800b370:	4603      	mov	r3, r0
 800b372:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b374:	7bbb      	ldrb	r3, [r7, #14]
 800b376:	b2db      	uxtb	r3, r3
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f040 80f3 	bne.w	800b564 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d103      	bne.n	800b398 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2208      	movs	r2, #8
 800b394:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b396:	e0e5      	b.n	800b564 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2207      	movs	r2, #7
 800b39c:	701a      	strb	r2, [r3, #0]
      break;
 800b39e:	e0e1      	b.n	800b564 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f000 80de 	beq.w	800b568 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2208      	movs	r2, #8
 800b3bc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b3be:	e0d3      	b.n	800b568 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fc20 	bl	800bc10 <USBH_SetCfg>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f040 80ca 	bne.w	800b56c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2209      	movs	r2, #9
 800b3dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3de:	e0c5      	b.n	800b56c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b3e6:	f003 0320 	and.w	r3, r3, #32
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00b      	beq.n	800b406 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fc30 	bl	800bc56 <USBH_SetFeature>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f040 80b9 	bne.w	800b570 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	220a      	movs	r2, #10
 800b402:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b404:	e0b4      	b.n	800b570 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	220a      	movs	r2, #10
 800b40a:	701a      	strb	r2, [r3, #0]
      break;
 800b40c:	e0b0      	b.n	800b570 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b414:	2b00      	cmp	r3, #0
 800b416:	f000 80ad 	beq.w	800b574 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b422:	2300      	movs	r3, #0
 800b424:	73fb      	strb	r3, [r7, #15]
 800b426:	e016      	b.n	800b456 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b428:	7bfa      	ldrb	r2, [r7, #15]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	32de      	adds	r2, #222	; 0xde
 800b42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b432:	791a      	ldrb	r2, [r3, #4]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d108      	bne.n	800b450 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b43e:	7bfa      	ldrb	r2, [r7, #15]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	32de      	adds	r2, #222	; 0xde
 800b444:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b44e:	e005      	b.n	800b45c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	3301      	adds	r3, #1
 800b454:	73fb      	strb	r3, [r7, #15]
 800b456:	7bfb      	ldrb	r3, [r7, #15]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d0e5      	beq.n	800b428 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b462:	2b00      	cmp	r3, #0
 800b464:	d016      	beq.n	800b494 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	4798      	blx	r3
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d109      	bne.n	800b48c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2206      	movs	r2, #6
 800b47c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b484:	2103      	movs	r1, #3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b48a:	e073      	b.n	800b574 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	220d      	movs	r2, #13
 800b490:	701a      	strb	r2, [r3, #0]
      break;
 800b492:	e06f      	b.n	800b574 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	220d      	movs	r2, #13
 800b498:	701a      	strb	r2, [r3, #0]
      break;
 800b49a:	e06b      	b.n	800b574 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d017      	beq.n	800b4d6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	4798      	blx	r3
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d103      	bne.n	800b4c6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	220b      	movs	r2, #11
 800b4c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b4c4:	e058      	b.n	800b578 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b4c6:	7bbb      	ldrb	r3, [r7, #14]
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d154      	bne.n	800b578 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	220d      	movs	r2, #13
 800b4d2:	701a      	strb	r2, [r3, #0]
      break;
 800b4d4:	e050      	b.n	800b578 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	220d      	movs	r2, #13
 800b4da:	701a      	strb	r2, [r3, #0]
      break;
 800b4dc:	e04c      	b.n	800b578 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d049      	beq.n	800b57c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4ee:	695b      	ldr	r3, [r3, #20]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	4798      	blx	r3
      }
      break;
 800b4f4:	e042      	b.n	800b57c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f7ff fd72 	bl	800afe8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d009      	beq.n	800b522 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d005      	beq.n	800b538 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b532:	2105      	movs	r1, #5
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b01      	cmp	r3, #1
 800b542:	d107      	bne.n	800b554 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff fe2b 	bl	800b1a8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b552:	e014      	b.n	800b57e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f006 fa05 	bl	8011964 <USBH_LL_Start>
      break;
 800b55a:	e010      	b.n	800b57e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b55c:	bf00      	nop
 800b55e:	e00e      	b.n	800b57e <USBH_Process+0x3b6>
      break;
 800b560:	bf00      	nop
 800b562:	e00c      	b.n	800b57e <USBH_Process+0x3b6>
      break;
 800b564:	bf00      	nop
 800b566:	e00a      	b.n	800b57e <USBH_Process+0x3b6>
    break;
 800b568:	bf00      	nop
 800b56a:	e008      	b.n	800b57e <USBH_Process+0x3b6>
      break;
 800b56c:	bf00      	nop
 800b56e:	e006      	b.n	800b57e <USBH_Process+0x3b6>
      break;
 800b570:	bf00      	nop
 800b572:	e004      	b.n	800b57e <USBH_Process+0x3b6>
      break;
 800b574:	bf00      	nop
 800b576:	e002      	b.n	800b57e <USBH_Process+0x3b6>
      break;
 800b578:	bf00      	nop
 800b57a:	e000      	b.n	800b57e <USBH_Process+0x3b6>
      break;
 800b57c:	bf00      	nop
  }
  return USBH_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b088      	sub	sp, #32
 800b58c:	af04      	add	r7, sp, #16
 800b58e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b590:	2301      	movs	r3, #1
 800b592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b594:	2301      	movs	r3, #1
 800b596:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	785b      	ldrb	r3, [r3, #1]
 800b59c:	2b07      	cmp	r3, #7
 800b59e:	f200 81c1 	bhi.w	800b924 <USBH_HandleEnum+0x39c>
 800b5a2:	a201      	add	r2, pc, #4	; (adr r2, 800b5a8 <USBH_HandleEnum+0x20>)
 800b5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a8:	0800b5c9 	.word	0x0800b5c9
 800b5ac:	0800b687 	.word	0x0800b687
 800b5b0:	0800b6f1 	.word	0x0800b6f1
 800b5b4:	0800b77f 	.word	0x0800b77f
 800b5b8:	0800b7e9 	.word	0x0800b7e9
 800b5bc:	0800b859 	.word	0x0800b859
 800b5c0:	0800b89f 	.word	0x0800b89f
 800b5c4:	0800b8e5 	.word	0x0800b8e5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b5c8:	2108      	movs	r1, #8
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fa50 	bl	800ba70 <USBH_Get_DevDesc>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5d4:	7bbb      	ldrb	r3, [r7, #14]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d130      	bne.n	800b63c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	7919      	ldrb	r1, [r3, #4]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b5fe:	b292      	uxth	r2, r2
 800b600:	9202      	str	r2, [sp, #8]
 800b602:	2200      	movs	r2, #0
 800b604:	9201      	str	r2, [sp, #4]
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	4603      	mov	r3, r0
 800b60a:	2280      	movs	r2, #128	; 0x80
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 ff77 	bl	800c500 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	7959      	ldrb	r1, [r3, #5]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b626:	b292      	uxth	r2, r2
 800b628:	9202      	str	r2, [sp, #8]
 800b62a:	2200      	movs	r2, #0
 800b62c:	9201      	str	r2, [sp, #4]
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	4603      	mov	r3, r0
 800b632:	2200      	movs	r2, #0
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 ff63 	bl	800c500 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b63a:	e175      	b.n	800b928 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	2b03      	cmp	r3, #3
 800b640:	f040 8172 	bne.w	800b928 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b64a:	3301      	adds	r3, #1
 800b64c:	b2da      	uxtb	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b65a:	2b03      	cmp	r3, #3
 800b65c:	d903      	bls.n	800b666 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	220d      	movs	r2, #13
 800b662:	701a      	strb	r2, [r3, #0]
      break;
 800b664:	e160      	b.n	800b928 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	795b      	ldrb	r3, [r3, #5]
 800b66a:	4619      	mov	r1, r3
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 ff97 	bl	800c5a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	791b      	ldrb	r3, [r3, #4]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 ff91 	bl	800c5a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	701a      	strb	r2, [r3, #0]
      break;
 800b684:	e150      	b.n	800b928 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b686:	2112      	movs	r1, #18
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f9f1 	bl	800ba70 <USBH_Get_DevDesc>
 800b68e:	4603      	mov	r3, r0
 800b690:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b692:	7bbb      	ldrb	r3, [r7, #14]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d103      	bne.n	800b6a0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2202      	movs	r2, #2
 800b69c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b69e:	e145      	b.n	800b92c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6a0:	7bbb      	ldrb	r3, [r7, #14]
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	f040 8142 	bne.w	800b92c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b6be:	2b03      	cmp	r3, #3
 800b6c0:	d903      	bls.n	800b6ca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	220d      	movs	r2, #13
 800b6c6:	701a      	strb	r2, [r3, #0]
      break;
 800b6c8:	e130      	b.n	800b92c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	795b      	ldrb	r3, [r3, #5]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 ff65 	bl	800c5a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	791b      	ldrb	r3, [r3, #4]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 ff5f 	bl	800c5a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	701a      	strb	r2, [r3, #0]
      break;
 800b6ee:	e11d      	b.n	800b92c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fa68 	bl	800bbc8 <USBH_SetAddress>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6fc:	7bbb      	ldrb	r3, [r7, #14]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d132      	bne.n	800b768 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b702:	2002      	movs	r0, #2
 800b704:	f006 fac2 	bl	8011c8c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2203      	movs	r2, #3
 800b714:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	7919      	ldrb	r1, [r3, #4]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b72a:	b292      	uxth	r2, r2
 800b72c:	9202      	str	r2, [sp, #8]
 800b72e:	2200      	movs	r2, #0
 800b730:	9201      	str	r2, [sp, #4]
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	4603      	mov	r3, r0
 800b736:	2280      	movs	r2, #128	; 0x80
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fee1 	bl	800c500 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	7959      	ldrb	r1, [r3, #5]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b752:	b292      	uxth	r2, r2
 800b754:	9202      	str	r2, [sp, #8]
 800b756:	2200      	movs	r2, #0
 800b758:	9201      	str	r2, [sp, #4]
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	4603      	mov	r3, r0
 800b75e:	2200      	movs	r2, #0
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 fecd 	bl	800c500 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b766:	e0e3      	b.n	800b930 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	f040 80e0 	bne.w	800b930 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	220d      	movs	r2, #13
 800b774:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	705a      	strb	r2, [r3, #1]
      break;
 800b77c:	e0d8      	b.n	800b930 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b77e:	2109      	movs	r1, #9
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f99d 	bl	800bac0 <USBH_Get_CfgDesc>
 800b786:	4603      	mov	r3, r0
 800b788:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b78a:	7bbb      	ldrb	r3, [r7, #14]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d103      	bne.n	800b798 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2204      	movs	r2, #4
 800b794:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b796:	e0cd      	b.n	800b934 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b798:	7bbb      	ldrb	r3, [r7, #14]
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	f040 80ca 	bne.w	800b934 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7b6:	2b03      	cmp	r3, #3
 800b7b8:	d903      	bls.n	800b7c2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	220d      	movs	r2, #13
 800b7be:	701a      	strb	r2, [r3, #0]
      break;
 800b7c0:	e0b8      	b.n	800b934 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	795b      	ldrb	r3, [r3, #5]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fee9 	bl	800c5a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	791b      	ldrb	r3, [r3, #4]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fee3 	bl	800c5a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	701a      	strb	r2, [r3, #0]
      break;
 800b7e6:	e0a5      	b.n	800b934 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f965 	bl	800bac0 <USBH_Get_CfgDesc>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b7fa:	7bbb      	ldrb	r3, [r7, #14]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d103      	bne.n	800b808 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2205      	movs	r2, #5
 800b804:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b806:	e097      	b.n	800b938 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b808:	7bbb      	ldrb	r3, [r7, #14]
 800b80a:	2b03      	cmp	r3, #3
 800b80c:	f040 8094 	bne.w	800b938 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b816:	3301      	adds	r3, #1
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b826:	2b03      	cmp	r3, #3
 800b828:	d903      	bls.n	800b832 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	220d      	movs	r2, #13
 800b82e:	701a      	strb	r2, [r3, #0]
      break;
 800b830:	e082      	b.n	800b938 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	795b      	ldrb	r3, [r3, #5]
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 feb1 	bl	800c5a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	791b      	ldrb	r3, [r3, #4]
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 feab 	bl	800c5a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	701a      	strb	r2, [r3, #0]
      break;
 800b856:	e06f      	b.n	800b938 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d019      	beq.n	800b896 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b86e:	23ff      	movs	r3, #255	; 0xff
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f949 	bl	800bb08 <USBH_Get_StringDesc>
 800b876:	4603      	mov	r3, r0
 800b878:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b87a:	7bbb      	ldrb	r3, [r7, #14]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d103      	bne.n	800b888 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2206      	movs	r2, #6
 800b884:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b886:	e059      	b.n	800b93c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b888:	7bbb      	ldrb	r3, [r7, #14]
 800b88a:	2b03      	cmp	r3, #3
 800b88c:	d156      	bne.n	800b93c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2206      	movs	r2, #6
 800b892:	705a      	strb	r2, [r3, #1]
      break;
 800b894:	e052      	b.n	800b93c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2206      	movs	r2, #6
 800b89a:	705a      	strb	r2, [r3, #1]
      break;
 800b89c:	e04e      	b.n	800b93c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d019      	beq.n	800b8dc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b8b4:	23ff      	movs	r3, #255	; 0xff
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f926 	bl	800bb08 <USBH_Get_StringDesc>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d103      	bne.n	800b8ce <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2207      	movs	r2, #7
 800b8ca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b8cc:	e038      	b.n	800b940 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
 800b8d0:	2b03      	cmp	r3, #3
 800b8d2:	d135      	bne.n	800b940 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2207      	movs	r2, #7
 800b8d8:	705a      	strb	r2, [r3, #1]
      break;
 800b8da:	e031      	b.n	800b940 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2207      	movs	r2, #7
 800b8e0:	705a      	strb	r2, [r3, #1]
      break;
 800b8e2:	e02d      	b.n	800b940 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d017      	beq.n	800b91e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b8fa:	23ff      	movs	r3, #255	; 0xff
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f903 	bl	800bb08 <USBH_Get_StringDesc>
 800b902:	4603      	mov	r3, r0
 800b904:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b906:	7bbb      	ldrb	r3, [r7, #14]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b90c:	2300      	movs	r3, #0
 800b90e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b910:	e018      	b.n	800b944 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b912:	7bbb      	ldrb	r3, [r7, #14]
 800b914:	2b03      	cmp	r3, #3
 800b916:	d115      	bne.n	800b944 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	73fb      	strb	r3, [r7, #15]
      break;
 800b91c:	e012      	b.n	800b944 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]
      break;
 800b922:	e00f      	b.n	800b944 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b924:	bf00      	nop
 800b926:	e00e      	b.n	800b946 <USBH_HandleEnum+0x3be>
      break;
 800b928:	bf00      	nop
 800b92a:	e00c      	b.n	800b946 <USBH_HandleEnum+0x3be>
      break;
 800b92c:	bf00      	nop
 800b92e:	e00a      	b.n	800b946 <USBH_HandleEnum+0x3be>
      break;
 800b930:	bf00      	nop
 800b932:	e008      	b.n	800b946 <USBH_HandleEnum+0x3be>
      break;
 800b934:	bf00      	nop
 800b936:	e006      	b.n	800b946 <USBH_HandleEnum+0x3be>
      break;
 800b938:	bf00      	nop
 800b93a:	e004      	b.n	800b946 <USBH_HandleEnum+0x3be>
      break;
 800b93c:	bf00      	nop
 800b93e:	e002      	b.n	800b946 <USBH_HandleEnum+0x3be>
      break;
 800b940:	bf00      	nop
 800b942:	e000      	b.n	800b946 <USBH_HandleEnum+0x3be>
      break;
 800b944:	bf00      	nop
  }
  return Status;
 800b946:	7bfb      	ldrb	r3, [r7, #15]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3710      	adds	r7, #16
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	683a      	ldr	r2, [r7, #0]
 800b95e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b962:	bf00      	nop
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b97c:	1c5a      	adds	r2, r3, #1
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f804 	bl	800b992 <USBH_HandleSof>
}
 800b98a:	bf00      	nop
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	2b0b      	cmp	r3, #11
 800b9a2:	d10a      	bne.n	800b9ba <USBH_HandleSof+0x28>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d005      	beq.n	800b9ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9b4:	699b      	ldr	r3, [r3, #24]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	4798      	blx	r3
  }
}
 800b9ba:	bf00      	nop
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b083      	sub	sp, #12
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b9d2:	bf00      	nop
}
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b9ee:	bf00      	nop
}
 800b9f0:	370c      	adds	r7, #12
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b083      	sub	sp, #12
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f005 ffa6 	bl	801199a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	791b      	ldrb	r3, [r3, #4]
 800ba52:	4619      	mov	r1, r3
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fda3 	bl	800c5a0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	795b      	ldrb	r3, [r3, #5]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fd9d 	bl	800c5a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af02      	add	r7, sp, #8
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ba82:	78fb      	ldrb	r3, [r7, #3]
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba8e:	2100      	movs	r1, #0
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f864 	bl	800bb5e <USBH_GetDescriptor>
 800ba96:	4603      	mov	r3, r0
 800ba98:	73fb      	strb	r3, [r7, #15]
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800baac:	78fa      	ldrb	r2, [r7, #3]
 800baae:	b292      	uxth	r2, r2
 800bab0:	4619      	mov	r1, r3
 800bab2:	f000 f918 	bl	800bce6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af02      	add	r7, sp, #8
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	331c      	adds	r3, #28
 800bad0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bad2:	887b      	ldrh	r3, [r7, #2]
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800badc:	2100      	movs	r1, #0
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f83d 	bl	800bb5e <USBH_GetDescriptor>
 800bae4:	4603      	mov	r3, r0
 800bae6:	72fb      	strb	r3, [r7, #11]
 800bae8:	7afb      	ldrb	r3, [r7, #11]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d107      	bne.n	800bafe <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800baf4:	887a      	ldrh	r2, [r7, #2]
 800baf6:	68f9      	ldr	r1, [r7, #12]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f000 f964 	bl	800bdc6 <USBH_ParseCfgDesc>
  }

  return status;
 800bafe:	7afb      	ldrb	r3, [r7, #11]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b088      	sub	sp, #32
 800bb0c:	af02      	add	r7, sp, #8
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	607a      	str	r2, [r7, #4]
 800bb12:	461a      	mov	r2, r3
 800bb14:	460b      	mov	r3, r1
 800bb16:	72fb      	strb	r3, [r7, #11]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800bb1c:	7afb      	ldrb	r3, [r7, #11]
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bb24:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bb2c:	893b      	ldrh	r3, [r7, #8]
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	460b      	mov	r3, r1
 800bb32:	2100      	movs	r1, #0
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 f812 	bl	800bb5e <USBH_GetDescriptor>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	75fb      	strb	r3, [r7, #23]
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d107      	bne.n	800bb54 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bb4a:	893a      	ldrh	r2, [r7, #8]
 800bb4c:	6879      	ldr	r1, [r7, #4]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f000 fa37 	bl	800bfc2 <USBH_ParseStringDesc>
  }

  return status;
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	60f8      	str	r0, [r7, #12]
 800bb66:	607b      	str	r3, [r7, #4]
 800bb68:	460b      	mov	r3, r1
 800bb6a:	72fb      	strb	r3, [r7, #11]
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	789b      	ldrb	r3, [r3, #2]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d11c      	bne.n	800bbb2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bb78:	7afb      	ldrb	r3, [r7, #11]
 800bb7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2206      	movs	r2, #6
 800bb88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	893a      	ldrh	r2, [r7, #8]
 800bb8e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bb90:	893b      	ldrh	r3, [r7, #8]
 800bb92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb9a:	d104      	bne.n	800bba6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f240 4209 	movw	r2, #1033	; 0x409
 800bba2:	829a      	strh	r2, [r3, #20]
 800bba4:	e002      	b.n	800bbac <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	8b3a      	ldrh	r2, [r7, #24]
 800bbb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bbb2:	8b3b      	ldrh	r3, [r7, #24]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	6879      	ldr	r1, [r7, #4]
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 fa50 	bl	800c05e <USBH_CtlReq>
 800bbbe:	4603      	mov	r3, r0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	789b      	ldrb	r3, [r3, #2]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d10f      	bne.n	800bbfc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2205      	movs	r2, #5
 800bbe6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bbe8:	78fb      	ldrb	r3, [r7, #3]
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	2100      	movs	r1, #0
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fa2c 	bl	800c05e <USBH_CtlReq>
 800bc06:	4603      	mov	r3, r0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	789b      	ldrb	r3, [r3, #2]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d10e      	bne.n	800bc42 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2209      	movs	r2, #9
 800bc2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	887a      	ldrh	r2, [r7, #2]
 800bc34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bc42:	2200      	movs	r2, #0
 800bc44:	2100      	movs	r1, #0
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fa09 	bl	800c05e <USBH_CtlReq>
 800bc4c:	4603      	mov	r3, r0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b082      	sub	sp, #8
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	460b      	mov	r3, r1
 800bc60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	789b      	ldrb	r3, [r3, #2]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d10f      	bne.n	800bc8a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2203      	movs	r2, #3
 800bc74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bc76:	78fb      	ldrb	r3, [r7, #3]
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 f9e5 	bl	800c05e <USBH_CtlReq>
 800bc94:	4603      	mov	r3, r0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	789b      	ldrb	r3, [r3, #2]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d10f      	bne.n	800bcd2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2202      	movs	r2, #2
 800bcb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bcc4:	78fb      	ldrb	r3, [r7, #3]
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f9c1 	bl	800c05e <USBH_CtlReq>
 800bcdc:	4603      	mov	r3, r0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bce6:	b480      	push	{r7}
 800bce8:	b085      	sub	sp, #20
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	60f8      	str	r0, [r7, #12]
 800bcee:	60b9      	str	r1, [r7, #8]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	781a      	ldrb	r2, [r3, #0]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	785a      	ldrb	r2, [r3, #1]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	3302      	adds	r3, #2
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	3303      	adds	r3, #3
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	021b      	lsls	r3, r3, #8
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	791a      	ldrb	r2, [r3, #4]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	795a      	ldrb	r2, [r3, #5]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	799a      	ldrb	r2, [r3, #6]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	79da      	ldrb	r2, [r3, #7]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bd40:	88fb      	ldrh	r3, [r7, #6]
 800bd42:	2b08      	cmp	r3, #8
 800bd44:	d939      	bls.n	800bdba <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	3308      	adds	r3, #8
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	3309      	adds	r3, #9
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	021b      	lsls	r3, r3, #8
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	330a      	adds	r3, #10
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	330b      	adds	r3, #11
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	021b      	lsls	r3, r3, #8
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	4313      	orrs	r3, r2
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	330c      	adds	r3, #12
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	330d      	adds	r3, #13
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	021b      	lsls	r3, r3, #8
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	4313      	orrs	r3, r2
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	7b9a      	ldrb	r2, [r3, #14]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	7bda      	ldrb	r2, [r3, #15]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	7c1a      	ldrb	r2, [r3, #16]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	7c5a      	ldrb	r2, [r3, #17]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	745a      	strb	r2, [r3, #17]
  }
}
 800bdba:	bf00      	nop
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr

0800bdc6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b08a      	sub	sp, #40	; 0x28
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bdde:	2300      	movs	r3, #0
 800bde0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	781a      	ldrb	r2, [r3, #0]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	785a      	ldrb	r2, [r3, #1]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	3302      	adds	r3, #2
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	3303      	adds	r3, #3
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	b29b      	uxth	r3, r3
 800be08:	021b      	lsls	r3, r3, #8
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	4313      	orrs	r3, r2
 800be0e:	b29a      	uxth	r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	791a      	ldrb	r2, [r3, #4]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	795a      	ldrb	r2, [r3, #5]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	799a      	ldrb	r2, [r3, #6]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	79da      	ldrb	r2, [r3, #7]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	7a1a      	ldrb	r2, [r3, #8]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800be3c:	88fb      	ldrh	r3, [r7, #6]
 800be3e:	2b09      	cmp	r3, #9
 800be40:	d95f      	bls.n	800bf02 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800be42:	2309      	movs	r3, #9
 800be44:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800be46:	2300      	movs	r3, #0
 800be48:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800be4a:	e051      	b.n	800bef0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800be4c:	f107 0316 	add.w	r3, r7, #22
 800be50:	4619      	mov	r1, r3
 800be52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be54:	f000 f8e8 	bl	800c028 <USBH_GetNextDesc>
 800be58:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	2b04      	cmp	r3, #4
 800be60:	d146      	bne.n	800bef0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800be62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be66:	221a      	movs	r2, #26
 800be68:	fb02 f303 	mul.w	r3, r2, r3
 800be6c:	3308      	adds	r3, #8
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4413      	add	r3, r2
 800be72:	3302      	adds	r3, #2
 800be74:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800be76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be78:	69f8      	ldr	r0, [r7, #28]
 800be7a:	f000 f846 	bl	800bf0a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800be7e:	2300      	movs	r3, #0
 800be80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800be84:	2300      	movs	r3, #0
 800be86:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800be88:	e022      	b.n	800bed0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800be8a:	f107 0316 	add.w	r3, r7, #22
 800be8e:	4619      	mov	r1, r3
 800be90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be92:	f000 f8c9 	bl	800c028 <USBH_GetNextDesc>
 800be96:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9a:	785b      	ldrb	r3, [r3, #1]
 800be9c:	2b05      	cmp	r3, #5
 800be9e:	d117      	bne.n	800bed0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bea4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bea8:	3201      	adds	r2, #1
 800beaa:	00d2      	lsls	r2, r2, #3
 800beac:	211a      	movs	r1, #26
 800beae:	fb01 f303 	mul.w	r3, r1, r3
 800beb2:	4413      	add	r3, r2
 800beb4:	3308      	adds	r3, #8
 800beb6:	68fa      	ldr	r2, [r7, #12]
 800beb8:	4413      	add	r3, r2
 800beba:	3304      	adds	r3, #4
 800bebc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bec0:	69b8      	ldr	r0, [r7, #24]
 800bec2:	f000 f851 	bl	800bf68 <USBH_ParseEPDesc>
            ep_ix++;
 800bec6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800beca:	3301      	adds	r3, #1
 800becc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	791b      	ldrb	r3, [r3, #4]
 800bed4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bed8:	429a      	cmp	r2, r3
 800beda:	d204      	bcs.n	800bee6 <USBH_ParseCfgDesc+0x120>
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	885a      	ldrh	r2, [r3, #2]
 800bee0:	8afb      	ldrh	r3, [r7, #22]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d8d1      	bhi.n	800be8a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bee6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800beea:	3301      	adds	r3, #1
 800beec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d804      	bhi.n	800bf02 <USBH_ParseCfgDesc+0x13c>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	885a      	ldrh	r2, [r3, #2]
 800befc:	8afb      	ldrh	r3, [r7, #22]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d8a4      	bhi.n	800be4c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bf02:	bf00      	nop
 800bf04:	3728      	adds	r7, #40	; 0x28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bf0a:	b480      	push	{r7}
 800bf0c:	b083      	sub	sp, #12
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	781a      	ldrb	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	785a      	ldrb	r2, [r3, #1]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	789a      	ldrb	r2, [r3, #2]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	78da      	ldrb	r2, [r3, #3]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	791a      	ldrb	r2, [r3, #4]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	795a      	ldrb	r2, [r3, #5]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	799a      	ldrb	r2, [r3, #6]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	79da      	ldrb	r2, [r3, #7]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	7a1a      	ldrb	r2, [r3, #8]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	721a      	strb	r2, [r3, #8]
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	781a      	ldrb	r2, [r3, #0]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	785a      	ldrb	r2, [r3, #1]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	789a      	ldrb	r2, [r3, #2]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	78da      	ldrb	r2, [r3, #3]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	3304      	adds	r3, #4
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	3305      	adds	r3, #5
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	021b      	lsls	r3, r3, #8
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	799a      	ldrb	r2, [r3, #6]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	719a      	strb	r2, [r3, #6]
}
 800bfb6:	bf00      	nop
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b087      	sub	sp, #28
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	60f8      	str	r0, [r7, #12]
 800bfca:	60b9      	str	r1, [r7, #8]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	d120      	bne.n	800c01c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	1e9a      	subs	r2, r3, #2
 800bfe0:	88fb      	ldrh	r3, [r7, #6]
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	bf28      	it	cs
 800bfe6:	4613      	movcs	r3, r2
 800bfe8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	3302      	adds	r3, #2
 800bfee:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bff0:	2300      	movs	r3, #0
 800bff2:	82fb      	strh	r3, [r7, #22]
 800bff4:	e00b      	b.n	800c00e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bff6:	8afb      	ldrh	r3, [r7, #22]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	4413      	add	r3, r2
 800bffc:	781a      	ldrb	r2, [r3, #0]
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	3301      	adds	r3, #1
 800c006:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c008:	8afb      	ldrh	r3, [r7, #22]
 800c00a:	3302      	adds	r3, #2
 800c00c:	82fb      	strh	r3, [r7, #22]
 800c00e:	8afa      	ldrh	r2, [r7, #22]
 800c010:	8abb      	ldrh	r3, [r7, #20]
 800c012:	429a      	cmp	r2, r3
 800c014:	d3ef      	bcc.n	800bff6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2200      	movs	r2, #0
 800c01a:	701a      	strb	r2, [r3, #0]
  }
}
 800c01c:	bf00      	nop
 800c01e:	371c      	adds	r7, #28
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	881a      	ldrh	r2, [r3, #0]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	4413      	add	r3, r2
 800c03e:	b29a      	uxth	r2, r3
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4413      	add	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c050:	68fb      	ldr	r3, [r7, #12]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3714      	adds	r7, #20
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr

0800c05e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b086      	sub	sp, #24
 800c062:	af00      	add	r7, sp, #0
 800c064:	60f8      	str	r0, [r7, #12]
 800c066:	60b9      	str	r1, [r7, #8]
 800c068:	4613      	mov	r3, r2
 800c06a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c06c:	2301      	movs	r3, #1
 800c06e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	789b      	ldrb	r3, [r3, #2]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d002      	beq.n	800c07e <USBH_CtlReq+0x20>
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d00f      	beq.n	800c09c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c07c:	e027      	b.n	800c0ce <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	88fa      	ldrh	r2, [r7, #6]
 800c088:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2201      	movs	r2, #1
 800c08e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2202      	movs	r2, #2
 800c094:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c096:	2301      	movs	r3, #1
 800c098:	75fb      	strb	r3, [r7, #23]
      break;
 800c09a:	e018      	b.n	800c0ce <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f000 f81b 	bl	800c0d8 <USBH_HandleControl>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c0a6:	7dfb      	ldrb	r3, [r7, #23]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d002      	beq.n	800c0b2 <USBH_CtlReq+0x54>
 800c0ac:	7dfb      	ldrb	r3, [r7, #23]
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d106      	bne.n	800c0c0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	761a      	strb	r2, [r3, #24]
      break;
 800c0be:	e005      	b.n	800c0cc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c0c0:	7dfb      	ldrb	r3, [r7, #23]
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d102      	bne.n	800c0cc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	709a      	strb	r2, [r3, #2]
      break;
 800c0cc:	bf00      	nop
  }
  return status;
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3718      	adds	r7, #24
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af02      	add	r7, sp, #8
 800c0de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	7e1b      	ldrb	r3, [r3, #24]
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	2b0a      	cmp	r3, #10
 800c0f0:	f200 8156 	bhi.w	800c3a0 <USBH_HandleControl+0x2c8>
 800c0f4:	a201      	add	r2, pc, #4	; (adr r2, 800c0fc <USBH_HandleControl+0x24>)
 800c0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0fa:	bf00      	nop
 800c0fc:	0800c129 	.word	0x0800c129
 800c100:	0800c143 	.word	0x0800c143
 800c104:	0800c1ad 	.word	0x0800c1ad
 800c108:	0800c1d3 	.word	0x0800c1d3
 800c10c:	0800c20b 	.word	0x0800c20b
 800c110:	0800c235 	.word	0x0800c235
 800c114:	0800c287 	.word	0x0800c287
 800c118:	0800c2a9 	.word	0x0800c2a9
 800c11c:	0800c2e5 	.word	0x0800c2e5
 800c120:	0800c30b 	.word	0x0800c30b
 800c124:	0800c349 	.word	0x0800c349
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f103 0110 	add.w	r1, r3, #16
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	795b      	ldrb	r3, [r3, #5]
 800c132:	461a      	mov	r2, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f943 	bl	800c3c0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2202      	movs	r2, #2
 800c13e:	761a      	strb	r2, [r3, #24]
      break;
 800c140:	e139      	b.n	800c3b6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	795b      	ldrb	r3, [r3, #5]
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f005 fd15 	bl	8011b78 <USBH_LL_GetURBState>
 800c14e:	4603      	mov	r3, r0
 800c150:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c152:	7bbb      	ldrb	r3, [r7, #14]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d11e      	bne.n	800c196 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	7c1b      	ldrb	r3, [r3, #16]
 800c15c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c160:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	8adb      	ldrh	r3, [r3, #22]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00a      	beq.n	800c180 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c16a:	7b7b      	ldrb	r3, [r7, #13]
 800c16c:	2b80      	cmp	r3, #128	; 0x80
 800c16e:	d103      	bne.n	800c178 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2203      	movs	r2, #3
 800c174:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c176:	e115      	b.n	800c3a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2205      	movs	r2, #5
 800c17c:	761a      	strb	r2, [r3, #24]
      break;
 800c17e:	e111      	b.n	800c3a4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c180:	7b7b      	ldrb	r3, [r7, #13]
 800c182:	2b80      	cmp	r3, #128	; 0x80
 800c184:	d103      	bne.n	800c18e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2209      	movs	r2, #9
 800c18a:	761a      	strb	r2, [r3, #24]
      break;
 800c18c:	e10a      	b.n	800c3a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2207      	movs	r2, #7
 800c192:	761a      	strb	r2, [r3, #24]
      break;
 800c194:	e106      	b.n	800c3a4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c196:	7bbb      	ldrb	r3, [r7, #14]
 800c198:	2b04      	cmp	r3, #4
 800c19a:	d003      	beq.n	800c1a4 <USBH_HandleControl+0xcc>
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	f040 8100 	bne.w	800c3a4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	220b      	movs	r2, #11
 800c1a8:	761a      	strb	r2, [r3, #24]
      break;
 800c1aa:	e0fb      	b.n	800c3a4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6899      	ldr	r1, [r3, #8]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	899a      	ldrh	r2, [r3, #12]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	791b      	ldrb	r3, [r3, #4]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f93a 	bl	800c43e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2204      	movs	r2, #4
 800c1ce:	761a      	strb	r2, [r3, #24]
      break;
 800c1d0:	e0f1      	b.n	800c3b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	791b      	ldrb	r3, [r3, #4]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f005 fccd 	bl	8011b78 <USBH_LL_GetURBState>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d102      	bne.n	800c1ee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2209      	movs	r2, #9
 800c1ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c1ee:	7bbb      	ldrb	r3, [r7, #14]
 800c1f0:	2b05      	cmp	r3, #5
 800c1f2:	d102      	bne.n	800c1fa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c1f8:	e0d6      	b.n	800c3a8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c1fa:	7bbb      	ldrb	r3, [r7, #14]
 800c1fc:	2b04      	cmp	r3, #4
 800c1fe:	f040 80d3 	bne.w	800c3a8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	220b      	movs	r2, #11
 800c206:	761a      	strb	r2, [r3, #24]
      break;
 800c208:	e0ce      	b.n	800c3a8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6899      	ldr	r1, [r3, #8]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	899a      	ldrh	r2, [r3, #12]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	795b      	ldrb	r3, [r3, #5]
 800c216:	2001      	movs	r0, #1
 800c218:	9000      	str	r0, [sp, #0]
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f8ea 	bl	800c3f4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c226:	b29a      	uxth	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2206      	movs	r2, #6
 800c230:	761a      	strb	r2, [r3, #24]
      break;
 800c232:	e0c0      	b.n	800c3b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	795b      	ldrb	r3, [r3, #5]
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f005 fc9c 	bl	8011b78 <USBH_LL_GetURBState>
 800c240:	4603      	mov	r3, r0
 800c242:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c244:	7bbb      	ldrb	r3, [r7, #14]
 800c246:	2b01      	cmp	r3, #1
 800c248:	d103      	bne.n	800c252 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2207      	movs	r2, #7
 800c24e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c250:	e0ac      	b.n	800c3ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c252:	7bbb      	ldrb	r3, [r7, #14]
 800c254:	2b05      	cmp	r3, #5
 800c256:	d105      	bne.n	800c264 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	220c      	movs	r2, #12
 800c25c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c25e:	2303      	movs	r3, #3
 800c260:	73fb      	strb	r3, [r7, #15]
      break;
 800c262:	e0a3      	b.n	800c3ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c264:	7bbb      	ldrb	r3, [r7, #14]
 800c266:	2b02      	cmp	r3, #2
 800c268:	d103      	bne.n	800c272 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2205      	movs	r2, #5
 800c26e:	761a      	strb	r2, [r3, #24]
      break;
 800c270:	e09c      	b.n	800c3ac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c272:	7bbb      	ldrb	r3, [r7, #14]
 800c274:	2b04      	cmp	r3, #4
 800c276:	f040 8099 	bne.w	800c3ac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	220b      	movs	r2, #11
 800c27e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c280:	2302      	movs	r3, #2
 800c282:	73fb      	strb	r3, [r7, #15]
      break;
 800c284:	e092      	b.n	800c3ac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	791b      	ldrb	r3, [r3, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	2100      	movs	r1, #0
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f8d5 	bl	800c43e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c29a:	b29a      	uxth	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2208      	movs	r2, #8
 800c2a4:	761a      	strb	r2, [r3, #24]

      break;
 800c2a6:	e086      	b.n	800c3b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	791b      	ldrb	r3, [r3, #4]
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f005 fc62 	bl	8011b78 <USBH_LL_GetURBState>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d105      	bne.n	800c2ca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	220d      	movs	r2, #13
 800c2c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c2c8:	e072      	b.n	800c3b0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c2ca:	7bbb      	ldrb	r3, [r7, #14]
 800c2cc:	2b04      	cmp	r3, #4
 800c2ce:	d103      	bne.n	800c2d8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	220b      	movs	r2, #11
 800c2d4:	761a      	strb	r2, [r3, #24]
      break;
 800c2d6:	e06b      	b.n	800c3b0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
 800c2da:	2b05      	cmp	r3, #5
 800c2dc:	d168      	bne.n	800c3b0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c2de:	2303      	movs	r3, #3
 800c2e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c2e2:	e065      	b.n	800c3b0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	795b      	ldrb	r3, [r3, #5]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	9200      	str	r2, [sp, #0]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 f87f 	bl	800c3f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	220a      	movs	r2, #10
 800c306:	761a      	strb	r2, [r3, #24]
      break;
 800c308:	e055      	b.n	800c3b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	795b      	ldrb	r3, [r3, #5]
 800c30e:	4619      	mov	r1, r3
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f005 fc31 	bl	8011b78 <USBH_LL_GetURBState>
 800c316:	4603      	mov	r3, r0
 800c318:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c31a:	7bbb      	ldrb	r3, [r7, #14]
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d105      	bne.n	800c32c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	220d      	movs	r2, #13
 800c328:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c32a:	e043      	b.n	800c3b4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c32c:	7bbb      	ldrb	r3, [r7, #14]
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d103      	bne.n	800c33a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2209      	movs	r2, #9
 800c336:	761a      	strb	r2, [r3, #24]
      break;
 800c338:	e03c      	b.n	800c3b4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c33a:	7bbb      	ldrb	r3, [r7, #14]
 800c33c:	2b04      	cmp	r3, #4
 800c33e:	d139      	bne.n	800c3b4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	220b      	movs	r2, #11
 800c344:	761a      	strb	r2, [r3, #24]
      break;
 800c346:	e035      	b.n	800c3b4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	7e5b      	ldrb	r3, [r3, #25]
 800c34c:	3301      	adds	r3, #1
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	765a      	strb	r2, [r3, #25]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	7e5b      	ldrb	r3, [r3, #25]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d806      	bhi.n	800c36a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2201      	movs	r2, #1
 800c366:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c368:	e025      	b.n	800c3b6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c370:	2106      	movs	r1, #6
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	795b      	ldrb	r3, [r3, #5]
 800c380:	4619      	mov	r1, r3
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 f90c 	bl	800c5a0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	791b      	ldrb	r3, [r3, #4]
 800c38c:	4619      	mov	r1, r3
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 f906 	bl	800c5a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c39a:	2302      	movs	r3, #2
 800c39c:	73fb      	strb	r3, [r7, #15]
      break;
 800c39e:	e00a      	b.n	800c3b6 <USBH_HandleControl+0x2de>

    default:
      break;
 800c3a0:	bf00      	nop
 800c3a2:	e008      	b.n	800c3b6 <USBH_HandleControl+0x2de>
      break;
 800c3a4:	bf00      	nop
 800c3a6:	e006      	b.n	800c3b6 <USBH_HandleControl+0x2de>
      break;
 800c3a8:	bf00      	nop
 800c3aa:	e004      	b.n	800c3b6 <USBH_HandleControl+0x2de>
      break;
 800c3ac:	bf00      	nop
 800c3ae:	e002      	b.n	800c3b6 <USBH_HandleControl+0x2de>
      break;
 800c3b0:	bf00      	nop
 800c3b2:	e000      	b.n	800c3b6 <USBH_HandleControl+0x2de>
      break;
 800c3b4:	bf00      	nop
  }

  return status;
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b088      	sub	sp, #32
 800c3c4:	af04      	add	r7, sp, #16
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c3ce:	79f9      	ldrb	r1, [r7, #7]
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	9303      	str	r3, [sp, #12]
 800c3d4:	2308      	movs	r3, #8
 800c3d6:	9302      	str	r3, [sp, #8]
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	9301      	str	r3, [sp, #4]
 800c3dc:	2300      	movs	r3, #0
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f005 fb96 	bl	8011b16 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b088      	sub	sp, #32
 800c3f8:	af04      	add	r7, sp, #16
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	4611      	mov	r1, r2
 800c400:	461a      	mov	r2, r3
 800c402:	460b      	mov	r3, r1
 800c404:	80fb      	strh	r3, [r7, #6]
 800c406:	4613      	mov	r3, r2
 800c408:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c410:	2b00      	cmp	r3, #0
 800c412:	d001      	beq.n	800c418 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c414:	2300      	movs	r3, #0
 800c416:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c418:	7979      	ldrb	r1, [r7, #5]
 800c41a:	7e3b      	ldrb	r3, [r7, #24]
 800c41c:	9303      	str	r3, [sp, #12]
 800c41e:	88fb      	ldrh	r3, [r7, #6]
 800c420:	9302      	str	r3, [sp, #8]
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	9301      	str	r3, [sp, #4]
 800c426:	2301      	movs	r3, #1
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	2300      	movs	r3, #0
 800c42c:	2200      	movs	r2, #0
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f005 fb71 	bl	8011b16 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b088      	sub	sp, #32
 800c442:	af04      	add	r7, sp, #16
 800c444:	60f8      	str	r0, [r7, #12]
 800c446:	60b9      	str	r1, [r7, #8]
 800c448:	4611      	mov	r1, r2
 800c44a:	461a      	mov	r2, r3
 800c44c:	460b      	mov	r3, r1
 800c44e:	80fb      	strh	r3, [r7, #6]
 800c450:	4613      	mov	r3, r2
 800c452:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c454:	7979      	ldrb	r1, [r7, #5]
 800c456:	2300      	movs	r3, #0
 800c458:	9303      	str	r3, [sp, #12]
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	9302      	str	r3, [sp, #8]
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	9301      	str	r3, [sp, #4]
 800c462:	2301      	movs	r3, #1
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	2300      	movs	r3, #0
 800c468:	2201      	movs	r2, #1
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f005 fb53 	bl	8011b16 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c470:	2300      	movs	r3, #0

}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b088      	sub	sp, #32
 800c47e:	af04      	add	r7, sp, #16
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	60b9      	str	r1, [r7, #8]
 800c484:	4611      	mov	r1, r2
 800c486:	461a      	mov	r2, r3
 800c488:	460b      	mov	r3, r1
 800c48a:	80fb      	strh	r3, [r7, #6]
 800c48c:	4613      	mov	r3, r2
 800c48e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c49a:	2300      	movs	r3, #0
 800c49c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c49e:	7979      	ldrb	r1, [r7, #5]
 800c4a0:	7e3b      	ldrb	r3, [r7, #24]
 800c4a2:	9303      	str	r3, [sp, #12]
 800c4a4:	88fb      	ldrh	r3, [r7, #6]
 800c4a6:	9302      	str	r3, [sp, #8]
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	9301      	str	r3, [sp, #4]
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f005 fb2e 	bl	8011b16 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af04      	add	r7, sp, #16
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	4611      	mov	r1, r2
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	80fb      	strh	r3, [r7, #6]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c4da:	7979      	ldrb	r1, [r7, #5]
 800c4dc:	2300      	movs	r3, #0
 800c4de:	9303      	str	r3, [sp, #12]
 800c4e0:	88fb      	ldrh	r3, [r7, #6]
 800c4e2:	9302      	str	r3, [sp, #8]
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	9301      	str	r3, [sp, #4]
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	2302      	movs	r3, #2
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f005 fb10 	bl	8011b16 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af04      	add	r7, sp, #16
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	4608      	mov	r0, r1
 800c50a:	4611      	mov	r1, r2
 800c50c:	461a      	mov	r2, r3
 800c50e:	4603      	mov	r3, r0
 800c510:	70fb      	strb	r3, [r7, #3]
 800c512:	460b      	mov	r3, r1
 800c514:	70bb      	strb	r3, [r7, #2]
 800c516:	4613      	mov	r3, r2
 800c518:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c51a:	7878      	ldrb	r0, [r7, #1]
 800c51c:	78ba      	ldrb	r2, [r7, #2]
 800c51e:	78f9      	ldrb	r1, [r7, #3]
 800c520:	8b3b      	ldrh	r3, [r7, #24]
 800c522:	9302      	str	r3, [sp, #8]
 800c524:	7d3b      	ldrb	r3, [r7, #20]
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	7c3b      	ldrb	r3, [r7, #16]
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	4603      	mov	r3, r0
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f005 faa3 	bl	8011a7a <USBH_LL_OpenPipe>

  return USBH_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b082      	sub	sp, #8
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	460b      	mov	r3, r1
 800c548:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c54a:	78fb      	ldrb	r3, [r7, #3]
 800c54c:	4619      	mov	r1, r3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f005 fac2 	bl	8011ad8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3708      	adds	r7, #8
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b084      	sub	sp, #16
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	460b      	mov	r3, r1
 800c568:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 f836 	bl	800c5dc <USBH_GetFreePipe>
 800c570:	4603      	mov	r3, r0
 800c572:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c574:	89fb      	ldrh	r3, [r7, #14]
 800c576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d00a      	beq.n	800c594 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c57e:	78fa      	ldrb	r2, [r7, #3]
 800c580:	89fb      	ldrh	r3, [r7, #14]
 800c582:	f003 030f 	and.w	r3, r3, #15
 800c586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c58a:	6879      	ldr	r1, [r7, #4]
 800c58c:	33e0      	adds	r3, #224	; 0xe0
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	440b      	add	r3, r1
 800c592:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c594:	89fb      	ldrh	r3, [r7, #14]
 800c596:	b2db      	uxtb	r3, r3
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c5ac:	78fb      	ldrb	r3, [r7, #3]
 800c5ae:	2b0a      	cmp	r3, #10
 800c5b0:	d80d      	bhi.n	800c5ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c5b2:	78fb      	ldrb	r3, [r7, #3]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	33e0      	adds	r3, #224	; 0xe0
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	78fb      	ldrb	r3, [r7, #3]
 800c5c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	33e0      	adds	r3, #224	; 0xe0
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	440b      	add	r3, r1
 800c5cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	73fb      	strb	r3, [r7, #15]
 800c5ec:	e00f      	b.n	800c60e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c5ee:	7bfb      	ldrb	r3, [r7, #15]
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	33e0      	adds	r3, #224	; 0xe0
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d102      	bne.n	800c608 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	b29b      	uxth	r3, r3
 800c606:	e007      	b.n	800c618 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	3301      	adds	r3, #1
 800c60c:	73fb      	strb	r3, [r7, #15]
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b0a      	cmp	r3, #10
 800c612:	d9ec      	bls.n	800c5ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c614:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c62e:	79fb      	ldrb	r3, [r7, #7]
 800c630:	4a08      	ldr	r2, [pc, #32]	; (800c654 <disk_status+0x30>)
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4413      	add	r3, r2
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	79fa      	ldrb	r2, [r7, #7]
 800c63c:	4905      	ldr	r1, [pc, #20]	; (800c654 <disk_status+0x30>)
 800c63e:	440a      	add	r2, r1
 800c640:	7a12      	ldrb	r2, [r2, #8]
 800c642:	4610      	mov	r0, r2
 800c644:	4798      	blx	r3
 800c646:	4603      	mov	r3, r0
 800c648:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	20010658 	.word	0x20010658

0800c658 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	4603      	mov	r3, r0
 800c660:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c662:	2300      	movs	r3, #0
 800c664:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c666:	79fb      	ldrb	r3, [r7, #7]
 800c668:	4a0d      	ldr	r2, [pc, #52]	; (800c6a0 <disk_initialize+0x48>)
 800c66a:	5cd3      	ldrb	r3, [r2, r3]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d111      	bne.n	800c694 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c670:	79fb      	ldrb	r3, [r7, #7]
 800c672:	4a0b      	ldr	r2, [pc, #44]	; (800c6a0 <disk_initialize+0x48>)
 800c674:	2101      	movs	r1, #1
 800c676:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c678:	79fb      	ldrb	r3, [r7, #7]
 800c67a:	4a09      	ldr	r2, [pc, #36]	; (800c6a0 <disk_initialize+0x48>)
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4413      	add	r3, r2
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	79fa      	ldrb	r2, [r7, #7]
 800c686:	4906      	ldr	r1, [pc, #24]	; (800c6a0 <disk_initialize+0x48>)
 800c688:	440a      	add	r2, r1
 800c68a:	7a12      	ldrb	r2, [r2, #8]
 800c68c:	4610      	mov	r0, r2
 800c68e:	4798      	blx	r3
 800c690:	4603      	mov	r3, r0
 800c692:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c694:	7bfb      	ldrb	r3, [r7, #15]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	20010658 	.word	0x20010658

0800c6a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c6a4:	b590      	push	{r4, r7, lr}
 800c6a6:	b087      	sub	sp, #28
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60b9      	str	r1, [r7, #8]
 800c6ac:	607a      	str	r2, [r7, #4]
 800c6ae:	603b      	str	r3, [r7, #0]
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
 800c6b6:	4a0a      	ldr	r2, [pc, #40]	; (800c6e0 <disk_read+0x3c>)
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	689c      	ldr	r4, [r3, #8]
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
 800c6c2:	4a07      	ldr	r2, [pc, #28]	; (800c6e0 <disk_read+0x3c>)
 800c6c4:	4413      	add	r3, r2
 800c6c6:	7a18      	ldrb	r0, [r3, #8]
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	68b9      	ldr	r1, [r7, #8]
 800c6ce:	47a0      	blx	r4
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	371c      	adds	r7, #28
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd90      	pop	{r4, r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	20010658 	.word	0x20010658

0800c6e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c6e4:	b590      	push	{r4, r7, lr}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60b9      	str	r1, [r7, #8]
 800c6ec:	607a      	str	r2, [r7, #4]
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
 800c6f6:	4a0a      	ldr	r2, [pc, #40]	; (800c720 <disk_write+0x3c>)
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	68dc      	ldr	r4, [r3, #12]
 800c700:	7bfb      	ldrb	r3, [r7, #15]
 800c702:	4a07      	ldr	r2, [pc, #28]	; (800c720 <disk_write+0x3c>)
 800c704:	4413      	add	r3, r2
 800c706:	7a18      	ldrb	r0, [r3, #8]
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	68b9      	ldr	r1, [r7, #8]
 800c70e:	47a0      	blx	r4
 800c710:	4603      	mov	r3, r0
 800c712:	75fb      	strb	r3, [r7, #23]
  return res;
 800c714:	7dfb      	ldrb	r3, [r7, #23]
}
 800c716:	4618      	mov	r0, r3
 800c718:	371c      	adds	r7, #28
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd90      	pop	{r4, r7, pc}
 800c71e:	bf00      	nop
 800c720:	20010658 	.word	0x20010658

0800c724 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	4603      	mov	r3, r0
 800c72c:	603a      	str	r2, [r7, #0]
 800c72e:	71fb      	strb	r3, [r7, #7]
 800c730:	460b      	mov	r3, r1
 800c732:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c734:	79fb      	ldrb	r3, [r7, #7]
 800c736:	4a09      	ldr	r2, [pc, #36]	; (800c75c <disk_ioctl+0x38>)
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	4413      	add	r3, r2
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	79fa      	ldrb	r2, [r7, #7]
 800c742:	4906      	ldr	r1, [pc, #24]	; (800c75c <disk_ioctl+0x38>)
 800c744:	440a      	add	r2, r1
 800c746:	7a10      	ldrb	r0, [r2, #8]
 800c748:	79b9      	ldrb	r1, [r7, #6]
 800c74a:	683a      	ldr	r2, [r7, #0]
 800c74c:	4798      	blx	r3
 800c74e:	4603      	mov	r3, r0
 800c750:	73fb      	strb	r3, [r7, #15]
  return res;
 800c752:	7bfb      	ldrb	r3, [r7, #15]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	20010658 	.word	0x20010658

0800c760 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	3301      	adds	r3, #1
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c770:	89fb      	ldrh	r3, [r7, #14]
 800c772:	021b      	lsls	r3, r3, #8
 800c774:	b21a      	sxth	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	b21b      	sxth	r3, r3
 800c77c:	4313      	orrs	r3, r2
 800c77e:	b21b      	sxth	r3, r3
 800c780:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c782:	89fb      	ldrh	r3, [r7, #14]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	3303      	adds	r3, #3
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	021b      	lsls	r3, r3, #8
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	3202      	adds	r2, #2
 800c7a8:	7812      	ldrb	r2, [r2, #0]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	021b      	lsls	r3, r3, #8
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	3201      	adds	r2, #1
 800c7b6:	7812      	ldrb	r2, [r2, #0]
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	021b      	lsls	r3, r3, #8
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	7812      	ldrb	r2, [r2, #0]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	60fb      	str	r3, [r7, #12]
	return rv;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800c7d6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c7da:	b08d      	sub	sp, #52	; 0x34
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 800c7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e2:	3307      	adds	r3, #7
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	f04f 0300 	mov.w	r3, #0
 800c7ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 800c7f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c7f4:	f04f 0000 	mov.w	r0, #0
 800c7f8:	f04f 0100 	mov.w	r1, #0
 800c7fc:	0219      	lsls	r1, r3, #8
 800c7fe:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c802:	0210      	lsls	r0, r2, #8
 800c804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c806:	3306      	adds	r3, #6
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	f04f 0300 	mov.w	r3, #0
 800c810:	ea40 0402 	orr.w	r4, r0, r2
 800c814:	ea41 0503 	orr.w	r5, r1, r3
 800c818:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 800c81c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c820:	f04f 0000 	mov.w	r0, #0
 800c824:	f04f 0100 	mov.w	r1, #0
 800c828:	0219      	lsls	r1, r3, #8
 800c82a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c82e:	0210      	lsls	r0, r2, #8
 800c830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c832:	3305      	adds	r3, #5
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	b2da      	uxtb	r2, r3
 800c838:	f04f 0300 	mov.w	r3, #0
 800c83c:	ea40 0802 	orr.w	r8, r0, r2
 800c840:	ea41 0903 	orr.w	r9, r1, r3
 800c844:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 800c848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c84c:	f04f 0000 	mov.w	r0, #0
 800c850:	f04f 0100 	mov.w	r1, #0
 800c854:	0219      	lsls	r1, r3, #8
 800c856:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c85a:	0210      	lsls	r0, r2, #8
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	3304      	adds	r3, #4
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	b2da      	uxtb	r2, r3
 800c864:	f04f 0300 	mov.w	r3, #0
 800c868:	ea40 0402 	orr.w	r4, r0, r2
 800c86c:	61bc      	str	r4, [r7, #24]
 800c86e:	430b      	orrs	r3, r1
 800c870:	61fb      	str	r3, [r7, #28]
 800c872:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c876:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 800c87a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c87e:	f04f 0200 	mov.w	r2, #0
 800c882:	f04f 0300 	mov.w	r3, #0
 800c886:	020b      	lsls	r3, r1, #8
 800c888:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c88c:	0202      	lsls	r2, r0, #8
 800c88e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c890:	3103      	adds	r1, #3
 800c892:	7809      	ldrb	r1, [r1, #0]
 800c894:	b2c8      	uxtb	r0, r1
 800c896:	f04f 0100 	mov.w	r1, #0
 800c89a:	ea42 0400 	orr.w	r4, r2, r0
 800c89e:	613c      	str	r4, [r7, #16]
 800c8a0:	430b      	orrs	r3, r1
 800c8a2:	617b      	str	r3, [r7, #20]
 800c8a4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c8a8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 800c8ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c8b0:	f04f 0200 	mov.w	r2, #0
 800c8b4:	f04f 0300 	mov.w	r3, #0
 800c8b8:	020b      	lsls	r3, r1, #8
 800c8ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c8be:	0202      	lsls	r2, r0, #8
 800c8c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8c2:	3102      	adds	r1, #2
 800c8c4:	7809      	ldrb	r1, [r1, #0]
 800c8c6:	b2c8      	uxtb	r0, r1
 800c8c8:	f04f 0100 	mov.w	r1, #0
 800c8cc:	ea42 0400 	orr.w	r4, r2, r0
 800c8d0:	60bc      	str	r4, [r7, #8]
 800c8d2:	430b      	orrs	r3, r1
 800c8d4:	60fb      	str	r3, [r7, #12]
 800c8d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c8da:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 800c8de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c8e2:	f04f 0200 	mov.w	r2, #0
 800c8e6:	f04f 0300 	mov.w	r3, #0
 800c8ea:	020b      	lsls	r3, r1, #8
 800c8ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c8f0:	0202      	lsls	r2, r0, #8
 800c8f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8f4:	3101      	adds	r1, #1
 800c8f6:	7809      	ldrb	r1, [r1, #0]
 800c8f8:	b2c8      	uxtb	r0, r1
 800c8fa:	f04f 0100 	mov.w	r1, #0
 800c8fe:	ea42 0400 	orr.w	r4, r2, r0
 800c902:	603c      	str	r4, [r7, #0]
 800c904:	430b      	orrs	r3, r1
 800c906:	607b      	str	r3, [r7, #4]
 800c908:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c90c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 800c910:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c914:	f04f 0200 	mov.w	r2, #0
 800c918:	f04f 0300 	mov.w	r3, #0
 800c91c:	020b      	lsls	r3, r1, #8
 800c91e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c922:	0202      	lsls	r2, r0, #8
 800c924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c926:	7809      	ldrb	r1, [r1, #0]
 800c928:	b2c8      	uxtb	r0, r1
 800c92a:	f04f 0100 	mov.w	r1, #0
 800c92e:	ea42 0a00 	orr.w	sl, r2, r0
 800c932:	ea43 0b01 	orr.w	fp, r3, r1
 800c936:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 800c93a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800c93e:	4610      	mov	r0, r2
 800c940:	4619      	mov	r1, r3
 800c942:	3734      	adds	r7, #52	; 0x34
 800c944:	46bd      	mov	sp, r7
 800c946:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c94a:	4770      	bx	lr

0800c94c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	460b      	mov	r3, r1
 800c956:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	1c5a      	adds	r2, r3, #1
 800c95c:	607a      	str	r2, [r7, #4]
 800c95e:	887a      	ldrh	r2, [r7, #2]
 800c960:	b2d2      	uxtb	r2, r2
 800c962:	701a      	strb	r2, [r3, #0]
 800c964:	887b      	ldrh	r3, [r7, #2]
 800c966:	0a1b      	lsrs	r3, r3, #8
 800c968:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	1c5a      	adds	r2, r3, #1
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	887a      	ldrh	r2, [r7, #2]
 800c972:	b2d2      	uxtb	r2, r2
 800c974:	701a      	strb	r2, [r3, #0]
}
 800c976:	bf00      	nop
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	1c5a      	adds	r2, r3, #1
 800c990:	607a      	str	r2, [r7, #4]
 800c992:	683a      	ldr	r2, [r7, #0]
 800c994:	b2d2      	uxtb	r2, r2
 800c996:	701a      	strb	r2, [r3, #0]
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	0a1b      	lsrs	r3, r3, #8
 800c99c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	1c5a      	adds	r2, r3, #1
 800c9a2:	607a      	str	r2, [r7, #4]
 800c9a4:	683a      	ldr	r2, [r7, #0]
 800c9a6:	b2d2      	uxtb	r2, r2
 800c9a8:	701a      	strb	r2, [r3, #0]
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	0a1b      	lsrs	r3, r3, #8
 800c9ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	1c5a      	adds	r2, r3, #1
 800c9b4:	607a      	str	r2, [r7, #4]
 800c9b6:	683a      	ldr	r2, [r7, #0]
 800c9b8:	b2d2      	uxtb	r2, r2
 800c9ba:	701a      	strb	r2, [r3, #0]
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	0a1b      	lsrs	r3, r3, #8
 800c9c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	1c5a      	adds	r2, r3, #1
 800c9c6:	607a      	str	r2, [r7, #4]
 800c9c8:	683a      	ldr	r2, [r7, #0]
 800c9ca:	b2d2      	uxtb	r2, r2
 800c9cc:	701a      	strb	r2, [r3, #0]
}
 800c9ce:	bf00      	nop
 800c9d0:	370c      	adds	r7, #12
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr

0800c9da <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800c9da:	b480      	push	{r7}
 800c9dc:	b085      	sub	sp, #20
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	60f8      	str	r0, [r7, #12]
 800c9e2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	1c5a      	adds	r2, r3, #1
 800c9ea:	60fa      	str	r2, [r7, #12]
 800c9ec:	783a      	ldrb	r2, [r7, #0]
 800c9ee:	701a      	strb	r2, [r3, #0]
 800c9f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9f4:	f04f 0200 	mov.w	r2, #0
 800c9f8:	f04f 0300 	mov.w	r3, #0
 800c9fc:	0a02      	lsrs	r2, r0, #8
 800c9fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ca02:	0a0b      	lsrs	r3, r1, #8
 800ca04:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	1c5a      	adds	r2, r3, #1
 800ca0c:	60fa      	str	r2, [r7, #12]
 800ca0e:	783a      	ldrb	r2, [r7, #0]
 800ca10:	701a      	strb	r2, [r3, #0]
 800ca12:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca16:	f04f 0200 	mov.w	r2, #0
 800ca1a:	f04f 0300 	mov.w	r3, #0
 800ca1e:	0a02      	lsrs	r2, r0, #8
 800ca20:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ca24:	0a0b      	lsrs	r3, r1, #8
 800ca26:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	1c5a      	adds	r2, r3, #1
 800ca2e:	60fa      	str	r2, [r7, #12]
 800ca30:	783a      	ldrb	r2, [r7, #0]
 800ca32:	701a      	strb	r2, [r3, #0]
 800ca34:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca38:	f04f 0200 	mov.w	r2, #0
 800ca3c:	f04f 0300 	mov.w	r3, #0
 800ca40:	0a02      	lsrs	r2, r0, #8
 800ca42:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ca46:	0a0b      	lsrs	r3, r1, #8
 800ca48:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	1c5a      	adds	r2, r3, #1
 800ca50:	60fa      	str	r2, [r7, #12]
 800ca52:	783a      	ldrb	r2, [r7, #0]
 800ca54:	701a      	strb	r2, [r3, #0]
 800ca56:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca5a:	f04f 0200 	mov.w	r2, #0
 800ca5e:	f04f 0300 	mov.w	r3, #0
 800ca62:	0a02      	lsrs	r2, r0, #8
 800ca64:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ca68:	0a0b      	lsrs	r3, r1, #8
 800ca6a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	60fa      	str	r2, [r7, #12]
 800ca74:	783a      	ldrb	r2, [r7, #0]
 800ca76:	701a      	strb	r2, [r3, #0]
 800ca78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca7c:	f04f 0200 	mov.w	r2, #0
 800ca80:	f04f 0300 	mov.w	r3, #0
 800ca84:	0a02      	lsrs	r2, r0, #8
 800ca86:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ca8a:	0a0b      	lsrs	r3, r1, #8
 800ca8c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	60fa      	str	r2, [r7, #12]
 800ca96:	783a      	ldrb	r2, [r7, #0]
 800ca98:	701a      	strb	r2, [r3, #0]
 800ca9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca9e:	f04f 0200 	mov.w	r2, #0
 800caa2:	f04f 0300 	mov.w	r3, #0
 800caa6:	0a02      	lsrs	r2, r0, #8
 800caa8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800caac:	0a0b      	lsrs	r3, r1, #8
 800caae:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	60fa      	str	r2, [r7, #12]
 800cab8:	783a      	ldrb	r2, [r7, #0]
 800caba:	701a      	strb	r2, [r3, #0]
 800cabc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cac0:	f04f 0200 	mov.w	r2, #0
 800cac4:	f04f 0300 	mov.w	r3, #0
 800cac8:	0a02      	lsrs	r2, r0, #8
 800caca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cace:	0a0b      	lsrs	r3, r1, #8
 800cad0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	60fa      	str	r2, [r7, #12]
 800cada:	783a      	ldrb	r2, [r7, #0]
 800cadc:	701a      	strb	r2, [r3, #0]
}
 800cade:	bf00      	nop
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800caea:	b480      	push	{r7}
 800caec:	b087      	sub	sp, #28
 800caee:	af00      	add	r7, sp, #0
 800caf0:	60f8      	str	r0, [r7, #12]
 800caf2:	60b9      	str	r1, [r7, #8]
 800caf4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00d      	beq.n	800cb20 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cb04:	693a      	ldr	r2, [r7, #16]
 800cb06:	1c53      	adds	r3, r2, #1
 800cb08:	613b      	str	r3, [r7, #16]
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	1c59      	adds	r1, r3, #1
 800cb0e:	6179      	str	r1, [r7, #20]
 800cb10:	7812      	ldrb	r2, [r2, #0]
 800cb12:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	3b01      	subs	r3, #1
 800cb18:	607b      	str	r3, [r7, #4]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d1f1      	bne.n	800cb04 <mem_cpy+0x1a>
	}
}
 800cb20:	bf00      	nop
 800cb22:	371c      	adds	r7, #28
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cb2c:	b480      	push	{r7}
 800cb2e:	b087      	sub	sp, #28
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	1c5a      	adds	r2, r3, #1
 800cb40:	617a      	str	r2, [r7, #20]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	b2d2      	uxtb	r2, r2
 800cb46:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	607b      	str	r3, [r7, #4]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1f3      	bne.n	800cb3c <mem_set+0x10>
}
 800cb54:	bf00      	nop
 800cb56:	bf00      	nop
 800cb58:	371c      	adds	r7, #28
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cb62:	b480      	push	{r7}
 800cb64:	b089      	sub	sp, #36	; 0x24
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	60f8      	str	r0, [r7, #12]
 800cb6a:	60b9      	str	r1, [r7, #8]
 800cb6c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	61fb      	str	r3, [r7, #28]
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	1c5a      	adds	r2, r3, #1
 800cb7e:	61fa      	str	r2, [r7, #28]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	4619      	mov	r1, r3
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	1c5a      	adds	r2, r3, #1
 800cb88:	61ba      	str	r2, [r7, #24]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	1acb      	subs	r3, r1, r3
 800cb8e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	3b01      	subs	r3, #1
 800cb94:	607b      	str	r3, [r7, #4]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <mem_cmp+0x40>
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d0eb      	beq.n	800cb7a <mem_cmp+0x18>

	return r;
 800cba2:	697b      	ldr	r3, [r7, #20]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3724      	adds	r7, #36	; 0x24
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cbba:	e002      	b.n	800cbc2 <chk_chr+0x12>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	607b      	str	r3, [r7, #4]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d005      	beq.n	800cbd6 <chk_chr+0x26>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d1f2      	bne.n	800cbbc <chk_chr+0xc>
	return *str;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr
	...

0800cbe8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	60bb      	str	r3, [r7, #8]
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	60fb      	str	r3, [r7, #12]
 800cbfa:	e029      	b.n	800cc50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cbfc:	4a27      	ldr	r2, [pc, #156]	; (800cc9c <chk_lock+0xb4>)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	011b      	lsls	r3, r3, #4
 800cc02:	4413      	add	r3, r2
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d01d      	beq.n	800cc46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cc0a:	4a24      	ldr	r2, [pc, #144]	; (800cc9c <chk_lock+0xb4>)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	011b      	lsls	r3, r3, #4
 800cc10:	4413      	add	r3, r2
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d116      	bne.n	800cc4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cc1c:	4a1f      	ldr	r2, [pc, #124]	; (800cc9c <chk_lock+0xb4>)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	011b      	lsls	r3, r3, #4
 800cc22:	4413      	add	r3, r2
 800cc24:	3304      	adds	r3, #4
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d10c      	bne.n	800cc4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cc30:	4a1a      	ldr	r2, [pc, #104]	; (800cc9c <chk_lock+0xb4>)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	011b      	lsls	r3, r3, #4
 800cc36:	4413      	add	r3, r2
 800cc38:	3308      	adds	r3, #8
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d102      	bne.n	800cc4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cc44:	e007      	b.n	800cc56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cc46:	2301      	movs	r3, #1
 800cc48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	60fb      	str	r3, [r7, #12]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d9d2      	bls.n	800cbfc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d109      	bne.n	800cc70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d102      	bne.n	800cc68 <chk_lock+0x80>
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d101      	bne.n	800cc6c <chk_lock+0x84>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	e010      	b.n	800cc8e <chk_lock+0xa6>
 800cc6c:	2312      	movs	r3, #18
 800cc6e:	e00e      	b.n	800cc8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d108      	bne.n	800cc88 <chk_lock+0xa0>
 800cc76:	4a09      	ldr	r2, [pc, #36]	; (800cc9c <chk_lock+0xb4>)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	011b      	lsls	r3, r3, #4
 800cc7c:	4413      	add	r3, r2
 800cc7e:	330c      	adds	r3, #12
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc86:	d101      	bne.n	800cc8c <chk_lock+0xa4>
 800cc88:	2310      	movs	r3, #16
 800cc8a:	e000      	b.n	800cc8e <chk_lock+0xa6>
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3714      	adds	r7, #20
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	200101d8 	.word	0x200101d8

0800cca0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cca6:	2300      	movs	r3, #0
 800cca8:	607b      	str	r3, [r7, #4]
 800ccaa:	e002      	b.n	800ccb2 <enq_lock+0x12>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	607b      	str	r3, [r7, #4]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d806      	bhi.n	800ccc6 <enq_lock+0x26>
 800ccb8:	4a09      	ldr	r2, [pc, #36]	; (800cce0 <enq_lock+0x40>)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	011b      	lsls	r3, r3, #4
 800ccbe:	4413      	add	r3, r2
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d1f2      	bne.n	800ccac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	bf14      	ite	ne
 800cccc:	2301      	movne	r3, #1
 800ccce:	2300      	moveq	r3, #0
 800ccd0:	b2db      	uxtb	r3, r3
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	370c      	adds	r7, #12
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	200101d8 	.word	0x200101d8

0800cce4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ccee:	2300      	movs	r3, #0
 800ccf0:	60fb      	str	r3, [r7, #12]
 800ccf2:	e01f      	b.n	800cd34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ccf4:	4a41      	ldr	r2, [pc, #260]	; (800cdfc <inc_lock+0x118>)
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	011b      	lsls	r3, r3, #4
 800ccfa:	4413      	add	r3, r2
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d113      	bne.n	800cd2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cd06:	4a3d      	ldr	r2, [pc, #244]	; (800cdfc <inc_lock+0x118>)
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	011b      	lsls	r3, r3, #4
 800cd0c:	4413      	add	r3, r2
 800cd0e:	3304      	adds	r3, #4
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d109      	bne.n	800cd2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cd1a:	4a38      	ldr	r2, [pc, #224]	; (800cdfc <inc_lock+0x118>)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	011b      	lsls	r3, r3, #4
 800cd20:	4413      	add	r3, r2
 800cd22:	3308      	adds	r3, #8
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d006      	beq.n	800cd3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	3301      	adds	r3, #1
 800cd32:	60fb      	str	r3, [r7, #12]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d9dc      	bls.n	800ccf4 <inc_lock+0x10>
 800cd3a:	e000      	b.n	800cd3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cd3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d132      	bne.n	800cdaa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cd44:	2300      	movs	r3, #0
 800cd46:	60fb      	str	r3, [r7, #12]
 800cd48:	e002      	b.n	800cd50 <inc_lock+0x6c>
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	60fb      	str	r3, [r7, #12]
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d806      	bhi.n	800cd64 <inc_lock+0x80>
 800cd56:	4a29      	ldr	r2, [pc, #164]	; (800cdfc <inc_lock+0x118>)
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	011b      	lsls	r3, r3, #4
 800cd5c:	4413      	add	r3, r2
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d1f2      	bne.n	800cd4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d101      	bne.n	800cd6e <inc_lock+0x8a>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e040      	b.n	800cdf0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	4922      	ldr	r1, [pc, #136]	; (800cdfc <inc_lock+0x118>)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	011b      	lsls	r3, r3, #4
 800cd78:	440b      	add	r3, r1
 800cd7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	689a      	ldr	r2, [r3, #8]
 800cd80:	491e      	ldr	r1, [pc, #120]	; (800cdfc <inc_lock+0x118>)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	011b      	lsls	r3, r3, #4
 800cd86:	440b      	add	r3, r1
 800cd88:	3304      	adds	r3, #4
 800cd8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd90:	491a      	ldr	r1, [pc, #104]	; (800cdfc <inc_lock+0x118>)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	011b      	lsls	r3, r3, #4
 800cd96:	440b      	add	r3, r1
 800cd98:	3308      	adds	r3, #8
 800cd9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cd9c:	4a17      	ldr	r2, [pc, #92]	; (800cdfc <inc_lock+0x118>)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	011b      	lsls	r3, r3, #4
 800cda2:	4413      	add	r3, r2
 800cda4:	330c      	adds	r3, #12
 800cda6:	2200      	movs	r2, #0
 800cda8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d009      	beq.n	800cdc4 <inc_lock+0xe0>
 800cdb0:	4a12      	ldr	r2, [pc, #72]	; (800cdfc <inc_lock+0x118>)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	011b      	lsls	r3, r3, #4
 800cdb6:	4413      	add	r3, r2
 800cdb8:	330c      	adds	r3, #12
 800cdba:	881b      	ldrh	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <inc_lock+0xe0>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	e015      	b.n	800cdf0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d108      	bne.n	800cddc <inc_lock+0xf8>
 800cdca:	4a0c      	ldr	r2, [pc, #48]	; (800cdfc <inc_lock+0x118>)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	011b      	lsls	r3, r3, #4
 800cdd0:	4413      	add	r3, r2
 800cdd2:	330c      	adds	r3, #12
 800cdd4:	881b      	ldrh	r3, [r3, #0]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	e001      	b.n	800cde0 <inc_lock+0xfc>
 800cddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cde0:	4906      	ldr	r1, [pc, #24]	; (800cdfc <inc_lock+0x118>)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	011b      	lsls	r3, r3, #4
 800cde6:	440b      	add	r3, r1
 800cde8:	330c      	adds	r3, #12
 800cdea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	3301      	adds	r3, #1
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3714      	adds	r7, #20
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	200101d8 	.word	0x200101d8

0800ce00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	607b      	str	r3, [r7, #4]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d825      	bhi.n	800ce60 <dec_lock+0x60>
		n = Files[i].ctr;
 800ce14:	4a17      	ldr	r2, [pc, #92]	; (800ce74 <dec_lock+0x74>)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	011b      	lsls	r3, r3, #4
 800ce1a:	4413      	add	r3, r2
 800ce1c:	330c      	adds	r3, #12
 800ce1e:	881b      	ldrh	r3, [r3, #0]
 800ce20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ce22:	89fb      	ldrh	r3, [r7, #14]
 800ce24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce28:	d101      	bne.n	800ce2e <dec_lock+0x2e>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ce2e:	89fb      	ldrh	r3, [r7, #14]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d002      	beq.n	800ce3a <dec_lock+0x3a>
 800ce34:	89fb      	ldrh	r3, [r7, #14]
 800ce36:	3b01      	subs	r3, #1
 800ce38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ce3a:	4a0e      	ldr	r2, [pc, #56]	; (800ce74 <dec_lock+0x74>)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	011b      	lsls	r3, r3, #4
 800ce40:	4413      	add	r3, r2
 800ce42:	330c      	adds	r3, #12
 800ce44:	89fa      	ldrh	r2, [r7, #14]
 800ce46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ce48:	89fb      	ldrh	r3, [r7, #14]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d105      	bne.n	800ce5a <dec_lock+0x5a>
 800ce4e:	4a09      	ldr	r2, [pc, #36]	; (800ce74 <dec_lock+0x74>)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	011b      	lsls	r3, r3, #4
 800ce54:	4413      	add	r3, r2
 800ce56:	2200      	movs	r2, #0
 800ce58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	737b      	strb	r3, [r7, #13]
 800ce5e:	e001      	b.n	800ce64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ce60:	2302      	movs	r3, #2
 800ce62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ce64:	7b7b      	ldrb	r3, [r7, #13]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3714      	adds	r7, #20
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	200101d8 	.word	0x200101d8

0800ce78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ce80:	2300      	movs	r3, #0
 800ce82:	60fb      	str	r3, [r7, #12]
 800ce84:	e010      	b.n	800cea8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce86:	4a0d      	ldr	r2, [pc, #52]	; (800cebc <clear_lock+0x44>)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	011b      	lsls	r3, r3, #4
 800ce8c:	4413      	add	r3, r2
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d105      	bne.n	800cea2 <clear_lock+0x2a>
 800ce96:	4a09      	ldr	r2, [pc, #36]	; (800cebc <clear_lock+0x44>)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	011b      	lsls	r3, r3, #4
 800ce9c:	4413      	add	r3, r2
 800ce9e:	2200      	movs	r2, #0
 800cea0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3301      	adds	r3, #1
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d9eb      	bls.n	800ce86 <clear_lock+0xe>
	}
}
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	200101d8 	.word	0x200101d8

0800cec0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cec8:	2300      	movs	r3, #0
 800ceca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	78db      	ldrb	r3, [r3, #3]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d034      	beq.n	800cf3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	7858      	ldrb	r0, [r3, #1]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cee4:	2301      	movs	r3, #1
 800cee6:	697a      	ldr	r2, [r7, #20]
 800cee8:	f7ff fbfc 	bl	800c6e4 <disk_write>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d002      	beq.n	800cef8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	73fb      	strb	r3, [r7, #15]
 800cef6:	e022      	b.n	800cf3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	1ad2      	subs	r2, r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d217      	bcs.n	800cf3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	789b      	ldrb	r3, [r3, #2]
 800cf12:	613b      	str	r3, [r7, #16]
 800cf14:	e010      	b.n	800cf38 <sync_window+0x78>
					wsect += fs->fsize;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1a:	697a      	ldr	r2, [r7, #20]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	7858      	ldrb	r0, [r3, #1]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	f7ff fbd9 	bl	800c6e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	3b01      	subs	r3, #1
 800cf36:	613b      	str	r3, [r7, #16]
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d8eb      	bhi.n	800cf16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3718      	adds	r7, #24
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d01b      	beq.n	800cf98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7ff ffad 	bl	800cec0 <sync_window>
 800cf66:	4603      	mov	r3, r0
 800cf68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cf6a:	7bfb      	ldrb	r3, [r7, #15]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d113      	bne.n	800cf98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	7858      	ldrb	r0, [r3, #1]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	f7ff fb91 	bl	800c6a4 <disk_read>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d004      	beq.n	800cf92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cf88:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	683a      	ldr	r2, [r7, #0]
 800cf96:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
	...

0800cfa4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f7ff ff87 	bl	800cec0 <sync_window>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cfb6:	7bfb      	ldrb	r3, [r7, #15]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d159      	bne.n	800d070 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	2b03      	cmp	r3, #3
 800cfc2:	d149      	bne.n	800d058 <sync_fs+0xb4>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	791b      	ldrb	r3, [r3, #4]
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d145      	bne.n	800d058 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	899b      	ldrh	r3, [r3, #12]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	2100      	movs	r1, #0
 800cfda:	f7ff fda7 	bl	800cb2c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	333c      	adds	r3, #60	; 0x3c
 800cfe2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cfe6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7ff fcae 	bl	800c94c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	333c      	adds	r3, #60	; 0x3c
 800cff4:	4921      	ldr	r1, [pc, #132]	; (800d07c <sync_fs+0xd8>)
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff fcc3 	bl	800c982 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	333c      	adds	r3, #60	; 0x3c
 800d000:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d004:	491e      	ldr	r1, [pc, #120]	; (800d080 <sync_fs+0xdc>)
 800d006:	4618      	mov	r0, r3
 800d008:	f7ff fcbb 	bl	800c982 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	333c      	adds	r3, #60	; 0x3c
 800d010:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	69db      	ldr	r3, [r3, #28]
 800d018:	4619      	mov	r1, r3
 800d01a:	4610      	mov	r0, r2
 800d01c:	f7ff fcb1 	bl	800c982 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	333c      	adds	r3, #60	; 0x3c
 800d024:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	699b      	ldr	r3, [r3, #24]
 800d02c:	4619      	mov	r1, r3
 800d02e:	4610      	mov	r0, r2
 800d030:	f7ff fca7 	bl	800c982 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d038:	1c5a      	adds	r2, r3, #1
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	7858      	ldrb	r0, [r3, #1]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d04c:	2301      	movs	r3, #1
 800d04e:	f7ff fb49 	bl	800c6e4 <disk_write>
			fs->fsi_flag = 0;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	785b      	ldrb	r3, [r3, #1]
 800d05c:	2200      	movs	r2, #0
 800d05e:	2100      	movs	r1, #0
 800d060:	4618      	mov	r0, r3
 800d062:	f7ff fb5f 	bl	800c724 <disk_ioctl>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d001      	beq.n	800d070 <sync_fs+0xcc>
 800d06c:	2301      	movs	r3, #1
 800d06e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d070:	7bfb      	ldrb	r3, [r7, #15]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	41615252 	.word	0x41615252
 800d080:	61417272 	.word	0x61417272

0800d084 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	3b02      	subs	r3, #2
 800d092:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6a1b      	ldr	r3, [r3, #32]
 800d098:	3b02      	subs	r3, #2
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d301      	bcc.n	800d0a4 <clust2sect+0x20>
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	e008      	b.n	800d0b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	895b      	ldrh	r3, [r3, #10]
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	fb03 f202 	mul.w	r2, r3, r2
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0b4:	4413      	add	r3, r2
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
	...

0800d0c4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d0c4:	b5b0      	push	{r4, r5, r7, lr}
 800d0c6:	b088      	sub	sp, #32
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d904      	bls.n	800d0e4 <get_fat+0x20>
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	6a1b      	ldr	r3, [r3, #32]
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d302      	bcc.n	800d0ea <get_fat+0x26>
		val = 1;	/* Internal error */
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	61fb      	str	r3, [r7, #28]
 800d0e8:	e139      	b.n	800d35e <get_fat+0x29a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ee:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	3b01      	subs	r3, #1
 800d0f6:	2b03      	cmp	r3, #3
 800d0f8:	f200 8125 	bhi.w	800d346 <get_fat+0x282>
 800d0fc:	a201      	add	r2, pc, #4	; (adr r2, 800d104 <get_fat+0x40>)
 800d0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d102:	bf00      	nop
 800d104:	0800d115 	.word	0x0800d115
 800d108:	0800d1c3 	.word	0x0800d1c3
 800d10c:	0800d20f 	.word	0x0800d20f
 800d110:	0800d25f 	.word	0x0800d25f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	60fb      	str	r3, [r7, #12]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	085b      	lsrs	r3, r3, #1
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	4413      	add	r3, r2
 800d120:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d122:	69bb      	ldr	r3, [r7, #24]
 800d124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	899b      	ldrh	r3, [r3, #12]
 800d12a:	4619      	mov	r1, r3
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d132:	4413      	add	r3, r2
 800d134:	4619      	mov	r1, r3
 800d136:	69b8      	ldr	r0, [r7, #24]
 800d138:	f7ff ff06 	bl	800cf48 <move_window>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f040 8104 	bne.w	800d34c <get_fat+0x288>
			wc = fs->win[bc++ % SS(fs)];
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	1c5a      	adds	r2, r3, #1
 800d148:	60fa      	str	r2, [r7, #12]
 800d14a:	69ba      	ldr	r2, [r7, #24]
 800d14c:	8992      	ldrh	r2, [r2, #12]
 800d14e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d152:	fb02 f201 	mul.w	r2, r2, r1
 800d156:	1a9b      	subs	r3, r3, r2
 800d158:	69ba      	ldr	r2, [r7, #24]
 800d15a:	4413      	add	r3, r2
 800d15c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d160:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	899b      	ldrh	r3, [r3, #12]
 800d16a:	4619      	mov	r1, r3
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d172:	4413      	add	r3, r2
 800d174:	4619      	mov	r1, r3
 800d176:	69b8      	ldr	r0, [r7, #24]
 800d178:	f7ff fee6 	bl	800cf48 <move_window>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f040 80e6 	bne.w	800d350 <get_fat+0x28c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	899b      	ldrh	r3, [r3, #12]
 800d188:	461a      	mov	r2, r3
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d190:	fb02 f201 	mul.w	r2, r2, r1
 800d194:	1a9b      	subs	r3, r3, r2
 800d196:	69ba      	ldr	r2, [r7, #24]
 800d198:	4413      	add	r3, r2
 800d19a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d19e:	021b      	lsls	r3, r3, #8
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	f003 0301 	and.w	r3, r3, #1
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <get_fat+0xf4>
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	091b      	lsrs	r3, r3, #4
 800d1b6:	e002      	b.n	800d1be <get_fat+0xfa>
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d1be:	61fb      	str	r3, [r7, #28]
			break;
 800d1c0:	e0cd      	b.n	800d35e <get_fat+0x29a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	899b      	ldrh	r3, [r3, #12]
 800d1ca:	085b      	lsrs	r3, r3, #1
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1d6:	4413      	add	r3, r2
 800d1d8:	4619      	mov	r1, r3
 800d1da:	69b8      	ldr	r0, [r7, #24]
 800d1dc:	f7ff feb4 	bl	800cf48 <move_window>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f040 80b6 	bne.w	800d354 <get_fat+0x290>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	69ba      	ldr	r2, [r7, #24]
 800d1f4:	8992      	ldrh	r2, [r2, #12]
 800d1f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1fa:	fb02 f200 	mul.w	r2, r2, r0
 800d1fe:	1a9b      	subs	r3, r3, r2
 800d200:	440b      	add	r3, r1
 800d202:	4618      	mov	r0, r3
 800d204:	f7ff faac 	bl	800c760 <ld_word>
 800d208:	4603      	mov	r3, r0
 800d20a:	61fb      	str	r3, [r7, #28]
			break;
 800d20c:	e0a7      	b.n	800d35e <get_fat+0x29a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d20e:	69bb      	ldr	r3, [r7, #24]
 800d210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	899b      	ldrh	r3, [r3, #12]
 800d216:	089b      	lsrs	r3, r3, #2
 800d218:	b29b      	uxth	r3, r3
 800d21a:	4619      	mov	r1, r3
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d222:	4413      	add	r3, r2
 800d224:	4619      	mov	r1, r3
 800d226:	69b8      	ldr	r0, [r7, #24]
 800d228:	f7ff fe8e 	bl	800cf48 <move_window>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f040 8092 	bne.w	800d358 <get_fat+0x294>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	69ba      	ldr	r2, [r7, #24]
 800d240:	8992      	ldrh	r2, [r2, #12]
 800d242:	fbb3 f0f2 	udiv	r0, r3, r2
 800d246:	fb02 f200 	mul.w	r2, r2, r0
 800d24a:	1a9b      	subs	r3, r3, r2
 800d24c:	440b      	add	r3, r1
 800d24e:	4618      	mov	r0, r3
 800d250:	f7ff fa9e 	bl	800c790 <ld_dword>
 800d254:	4603      	mov	r3, r0
 800d256:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d25a:	61fb      	str	r3, [r7, #28]
			break;
 800d25c:	e07f      	b.n	800d35e <get_fat+0x29a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d264:	4313      	orrs	r3, r2
 800d266:	d06e      	beq.n	800d346 <get_fat+0x282>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	683a      	ldr	r2, [r7, #0]
 800d26e:	1ad3      	subs	r3, r2, r3
 800d270:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d278:	f112 34ff 	adds.w	r4, r2, #4294967295
 800d27c:	f143 35ff 	adc.w	r5, r3, #4294967295
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	899b      	ldrh	r3, [r3, #12]
 800d284:	b29a      	uxth	r2, r3
 800d286:	f04f 0300 	mov.w	r3, #0
 800d28a:	4620      	mov	r0, r4
 800d28c:	4629      	mov	r1, r5
 800d28e:	f7f2 fff7 	bl	8000280 <__aeabi_uldivmod>
 800d292:	4602      	mov	r2, r0
 800d294:	460b      	mov	r3, r1
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	895b      	ldrh	r3, [r3, #10]
 800d29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d29e:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	79db      	ldrb	r3, [r3, #7]
 800d2a4:	2b02      	cmp	r3, #2
 800d2a6:	d10e      	bne.n	800d2c6 <get_fat+0x202>
					if (cofs <= clen) {
 800d2a8:	697a      	ldr	r2, [r7, #20]
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d80a      	bhi.n	800d2c6 <get_fat+0x202>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d002      	beq.n	800d2be <get_fat+0x1fa>
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	e001      	b.n	800d2c2 <get_fat+0x1fe>
 800d2be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d2c2:	61fb      	str	r3, [r7, #28]
						break;
 800d2c4:	e04b      	b.n	800d35e <get_fat+0x29a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	79db      	ldrb	r3, [r3, #7]
 800d2ca:	2b03      	cmp	r3, #3
 800d2cc:	d108      	bne.n	800d2e0 <get_fat+0x21c>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	699b      	ldr	r3, [r3, #24]
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d203      	bcs.n	800d2e0 <get_fat+0x21c>
					val = clst + 1; 	/* Generate the value */
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	61fb      	str	r3, [r7, #28]
					break;
 800d2de:	e03e      	b.n	800d35e <get_fat+0x29a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	79db      	ldrb	r3, [r3, #7]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d02e      	beq.n	800d346 <get_fat+0x282>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	69db      	ldr	r3, [r3, #28]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d003      	beq.n	800d2f8 <get_fat+0x234>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800d2f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d2f4:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800d2f6:	e032      	b.n	800d35e <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	899b      	ldrh	r3, [r3, #12]
 800d300:	089b      	lsrs	r3, r3, #2
 800d302:	b29b      	uxth	r3, r3
 800d304:	4619      	mov	r1, r3
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	fbb3 f3f1 	udiv	r3, r3, r1
 800d30c:	4413      	add	r3, r2
 800d30e:	4619      	mov	r1, r3
 800d310:	69b8      	ldr	r0, [r7, #24]
 800d312:	f7ff fe19 	bl	800cf48 <move_window>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d11f      	bne.n	800d35c <get_fat+0x298>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800d31c:	69bb      	ldr	r3, [r7, #24]
 800d31e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	69ba      	ldr	r2, [r7, #24]
 800d328:	8992      	ldrh	r2, [r2, #12]
 800d32a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d32e:	fb02 f200 	mul.w	r2, r2, r0
 800d332:	1a9b      	subs	r3, r3, r2
 800d334:	440b      	add	r3, r1
 800d336:	4618      	mov	r0, r3
 800d338:	f7ff fa2a 	bl	800c790 <ld_dword>
 800d33c:	4603      	mov	r3, r0
 800d33e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d342:	61fb      	str	r3, [r7, #28]
					break;
 800d344:	e00b      	b.n	800d35e <get_fat+0x29a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d346:	2301      	movs	r3, #1
 800d348:	61fb      	str	r3, [r7, #28]
 800d34a:	e008      	b.n	800d35e <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d34c:	bf00      	nop
 800d34e:	e006      	b.n	800d35e <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d350:	bf00      	nop
 800d352:	e004      	b.n	800d35e <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d354:	bf00      	nop
 800d356:	e002      	b.n	800d35e <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d358:	bf00      	nop
 800d35a:	e000      	b.n	800d35e <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d35c:	bf00      	nop
		}
	}

	return val;
 800d35e:	69fb      	ldr	r3, [r7, #28]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3720      	adds	r7, #32
 800d364:	46bd      	mov	sp, r7
 800d366:	bdb0      	pop	{r4, r5, r7, pc}

0800d368 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d368:	b590      	push	{r4, r7, lr}
 800d36a:	b089      	sub	sp, #36	; 0x24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d374:	2302      	movs	r3, #2
 800d376:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	f240 8106 	bls.w	800d58c <put_fat+0x224>
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6a1b      	ldr	r3, [r3, #32]
 800d384:	68ba      	ldr	r2, [r7, #8]
 800d386:	429a      	cmp	r2, r3
 800d388:	f080 8100 	bcs.w	800d58c <put_fat+0x224>
		switch (fs->fs_type) {
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b04      	cmp	r3, #4
 800d392:	f300 8104 	bgt.w	800d59e <put_fat+0x236>
 800d396:	2b03      	cmp	r3, #3
 800d398:	f280 80b3 	bge.w	800d502 <put_fat+0x19a>
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d003      	beq.n	800d3a8 <put_fat+0x40>
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	f000 8083 	beq.w	800d4ac <put_fat+0x144>
 800d3a6:	e0fa      	b.n	800d59e <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	61bb      	str	r3, [r7, #24]
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	085b      	lsrs	r3, r3, #1
 800d3b0:	69ba      	ldr	r2, [r7, #24]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	899b      	ldrh	r3, [r3, #12]
 800d3be:	4619      	mov	r1, r3
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3c6:	4413      	add	r3, r2
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f7ff fdbc 	bl	800cf48 <move_window>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3d4:	7ffb      	ldrb	r3, [r7, #31]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f040 80da 	bne.w	800d590 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	1c5a      	adds	r2, r3, #1
 800d3e6:	61ba      	str	r2, [r7, #24]
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	8992      	ldrh	r2, [r2, #12]
 800d3ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800d3f0:	fb02 f200 	mul.w	r2, r2, r0
 800d3f4:	1a9b      	subs	r3, r3, r2
 800d3f6:	440b      	add	r3, r1
 800d3f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00d      	beq.n	800d420 <put_fat+0xb8>
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	b25b      	sxtb	r3, r3
 800d40a:	f003 030f 	and.w	r3, r3, #15
 800d40e:	b25a      	sxtb	r2, r3
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	b2db      	uxtb	r3, r3
 800d414:	011b      	lsls	r3, r3, #4
 800d416:	b25b      	sxtb	r3, r3
 800d418:	4313      	orrs	r3, r2
 800d41a:	b25b      	sxtb	r3, r3
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	e001      	b.n	800d424 <put_fat+0xbc>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	b2db      	uxtb	r3, r3
 800d424:	697a      	ldr	r2, [r7, #20]
 800d426:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2201      	movs	r2, #1
 800d42c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	899b      	ldrh	r3, [r3, #12]
 800d436:	4619      	mov	r1, r3
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d43e:	4413      	add	r3, r2
 800d440:	4619      	mov	r1, r3
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	f7ff fd80 	bl	800cf48 <move_window>
 800d448:	4603      	mov	r3, r0
 800d44a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d44c:	7ffb      	ldrb	r3, [r7, #31]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f040 80a0 	bne.w	800d594 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	899b      	ldrh	r3, [r3, #12]
 800d45e:	461a      	mov	r2, r3
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	fbb3 f0f2 	udiv	r0, r3, r2
 800d466:	fb02 f200 	mul.w	r2, r2, r0
 800d46a:	1a9b      	subs	r3, r3, r2
 800d46c:	440b      	add	r3, r1
 800d46e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	f003 0301 	and.w	r3, r3, #1
 800d476:	2b00      	cmp	r3, #0
 800d478:	d003      	beq.n	800d482 <put_fat+0x11a>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	091b      	lsrs	r3, r3, #4
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	e00e      	b.n	800d4a0 <put_fat+0x138>
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	b25b      	sxtb	r3, r3
 800d488:	f023 030f 	bic.w	r3, r3, #15
 800d48c:	b25a      	sxtb	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	0a1b      	lsrs	r3, r3, #8
 800d492:	b25b      	sxtb	r3, r3
 800d494:	f003 030f 	and.w	r3, r3, #15
 800d498:	b25b      	sxtb	r3, r3
 800d49a:	4313      	orrs	r3, r2
 800d49c:	b25b      	sxtb	r3, r3
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	697a      	ldr	r2, [r7, #20]
 800d4a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	70da      	strb	r2, [r3, #3]
			break;
 800d4aa:	e078      	b.n	800d59e <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	899b      	ldrh	r3, [r3, #12]
 800d4b4:	085b      	lsrs	r3, r3, #1
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	fbb3 f3f1 	udiv	r3, r3, r1
 800d4c0:	4413      	add	r3, r2
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f7ff fd3f 	bl	800cf48 <move_window>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4ce:	7ffb      	ldrb	r3, [r7, #31]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d161      	bne.n	800d598 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	68fa      	ldr	r2, [r7, #12]
 800d4e0:	8992      	ldrh	r2, [r2, #12]
 800d4e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800d4e6:	fb02 f200 	mul.w	r2, r2, r0
 800d4ea:	1a9b      	subs	r3, r3, r2
 800d4ec:	440b      	add	r3, r1
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	b292      	uxth	r2, r2
 800d4f2:	4611      	mov	r1, r2
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7ff fa29 	bl	800c94c <st_word>
			fs->wflag = 1;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	70da      	strb	r2, [r3, #3]
			break;
 800d500:	e04d      	b.n	800d59e <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	899b      	ldrh	r3, [r3, #12]
 800d50a:	089b      	lsrs	r3, r3, #2
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	4619      	mov	r1, r3
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	fbb3 f3f1 	udiv	r3, r3, r1
 800d516:	4413      	add	r3, r2
 800d518:	4619      	mov	r1, r3
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f7ff fd14 	bl	800cf48 <move_window>
 800d520:	4603      	mov	r3, r0
 800d522:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d524:	7ffb      	ldrb	r3, [r7, #31]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d138      	bne.n	800d59c <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	2b04      	cmp	r3, #4
 800d530:	d017      	beq.n	800d562 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	8992      	ldrh	r2, [r2, #12]
 800d546:	fbb3 f0f2 	udiv	r0, r3, r2
 800d54a:	fb02 f200 	mul.w	r2, r2, r0
 800d54e:	1a9b      	subs	r3, r3, r2
 800d550:	440b      	add	r3, r1
 800d552:	4618      	mov	r0, r3
 800d554:	f7ff f91c 	bl	800c790 <ld_dword>
 800d558:	4603      	mov	r3, r0
 800d55a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d55e:	4323      	orrs	r3, r4
 800d560:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	68fa      	ldr	r2, [r7, #12]
 800d56e:	8992      	ldrh	r2, [r2, #12]
 800d570:	fbb3 f0f2 	udiv	r0, r3, r2
 800d574:	fb02 f200 	mul.w	r2, r2, r0
 800d578:	1a9b      	subs	r3, r3, r2
 800d57a:	440b      	add	r3, r1
 800d57c:	6879      	ldr	r1, [r7, #4]
 800d57e:	4618      	mov	r0, r3
 800d580:	f7ff f9ff 	bl	800c982 <st_dword>
			fs->wflag = 1;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2201      	movs	r2, #1
 800d588:	70da      	strb	r2, [r3, #3]
			break;
 800d58a:	e008      	b.n	800d59e <put_fat+0x236>
		}
	}
 800d58c:	bf00      	nop
 800d58e:	e006      	b.n	800d59e <put_fat+0x236>
			if (res != FR_OK) break;
 800d590:	bf00      	nop
 800d592:	e004      	b.n	800d59e <put_fat+0x236>
			if (res != FR_OK) break;
 800d594:	bf00      	nop
 800d596:	e002      	b.n	800d59e <put_fat+0x236>
			if (res != FR_OK) break;
 800d598:	bf00      	nop
 800d59a:	e000      	b.n	800d59e <put_fat+0x236>
			if (res != FR_OK) break;
 800d59c:	bf00      	nop
	return res;
 800d59e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3724      	adds	r7, #36	; 0x24
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd90      	pop	{r4, r7, pc}

0800d5a8 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b08a      	sub	sp, #40	; 0x28
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	3b02      	subs	r3, #2
 800d5b8:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6a1b      	ldr	r3, [r3, #32]
 800d5be:	3b02      	subs	r3, #2
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d301      	bcc.n	800d5ca <find_bitmap+0x22>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	61fb      	str	r3, [r7, #28]
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	61bb      	str	r3, [r7, #24]
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	08db      	lsrs	r3, r3, #3
 800d5de:	68f9      	ldr	r1, [r7, #12]
 800d5e0:	8989      	ldrh	r1, [r1, #12]
 800d5e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d5e6:	4413      	add	r3, r2
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	68f8      	ldr	r0, [r7, #12]
 800d5ec:	f7ff fcac 	bl	800cf48 <move_window>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d002      	beq.n	800d5fc <find_bitmap+0x54>
 800d5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5fa:	e058      	b.n	800d6ae <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	08db      	lsrs	r3, r3, #3
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	8992      	ldrh	r2, [r2, #12]
 800d604:	fbb3 f1f2 	udiv	r1, r3, r2
 800d608:	fb02 f201 	mul.w	r2, r2, r1
 800d60c:	1a9b      	subs	r3, r3, r2
 800d60e:	623b      	str	r3, [r7, #32]
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	f003 0307 	and.w	r3, r3, #7
 800d616:	2201      	movs	r2, #1
 800d618:	fa02 f303 	lsl.w	r3, r2, r3
 800d61c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800d620:	68fa      	ldr	r2, [r7, #12]
 800d622:	6a3b      	ldr	r3, [r7, #32]
 800d624:	4413      	add	r3, r2
 800d626:	333c      	adds	r3, #60	; 0x3c
 800d628:	781a      	ldrb	r2, [r3, #0]
 800d62a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d62e:	4013      	ands	r3, r2
 800d630:	74fb      	strb	r3, [r7, #19]
 800d632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	3301      	adds	r3, #1
 800d640:	61fb      	str	r3, [r7, #28]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6a1b      	ldr	r3, [r3, #32]
 800d646:	3b02      	subs	r3, #2
 800d648:	69fa      	ldr	r2, [r7, #28]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d307      	bcc.n	800d65e <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800d64e:	2300      	movs	r3, #0
 800d650:	61fb      	str	r3, [r7, #28]
 800d652:	2300      	movs	r3, #0
 800d654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	899b      	ldrh	r3, [r3, #12]
 800d65c:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800d65e:	7cfb      	ldrb	r3, [r7, #19]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d109      	bne.n	800d678 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	3301      	adds	r3, #1
 800d668:	617b      	str	r3, [r7, #20]
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d106      	bne.n	800d680 <find_bitmap+0xd8>
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	3302      	adds	r3, #2
 800d676:	e01a      	b.n	800d6ae <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	61bb      	str	r3, [r7, #24]
 800d67c:	2300      	movs	r3, #0
 800d67e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800d680:	69fa      	ldr	r2, [r7, #28]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	429a      	cmp	r2, r3
 800d686:	d101      	bne.n	800d68c <find_bitmap+0xe4>
 800d688:	2300      	movs	r3, #0
 800d68a:	e010      	b.n	800d6ae <find_bitmap+0x106>
			} while (bm);
 800d68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d690:	2b00      	cmp	r3, #0
 800d692:	d1c5      	bne.n	800d620 <find_bitmap+0x78>
			bm = 1;
 800d694:	2301      	movs	r3, #1
 800d696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800d69a:	6a3b      	ldr	r3, [r7, #32]
 800d69c:	3301      	adds	r3, #1
 800d69e:	623b      	str	r3, [r7, #32]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	899b      	ldrh	r3, [r3, #12]
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d3b9      	bcc.n	800d620 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d6ac:	e793      	b.n	800d5d6 <find_bitmap+0x2e>
	}
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3728      	adds	r7, #40	; 0x28
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b088      	sub	sp, #32
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	60f8      	str	r0, [r7, #12]
 800d6be:	60b9      	str	r1, [r7, #8]
 800d6c0:	607a      	str	r2, [r7, #4]
 800d6c2:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	3b02      	subs	r3, #2
 800d6c8:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	08db      	lsrs	r3, r3, #3
 800d6d2:	68f9      	ldr	r1, [r7, #12]
 800d6d4:	8989      	ldrh	r1, [r1, #12]
 800d6d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6da:	4413      	add	r3, r2
 800d6dc:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	08db      	lsrs	r3, r3, #3
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	8992      	ldrh	r2, [r2, #12]
 800d6e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6ea:	fb02 f201 	mul.w	r2, r2, r1
 800d6ee:	1a9b      	subs	r3, r3, r2
 800d6f0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	f003 0307 	and.w	r3, r3, #7
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d6fe:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	1c5a      	adds	r2, r3, #1
 800d704:	617a      	str	r2, [r7, #20]
 800d706:	4619      	mov	r1, r3
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f7ff fc1d 	bl	800cf48 <move_window>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d001      	beq.n	800d718 <change_bitmap+0x62>
 800d714:	2301      	movs	r3, #1
 800d716:	e03f      	b.n	800d798 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	4413      	add	r3, r2
 800d71e:	333c      	adds	r3, #60	; 0x3c
 800d720:	781a      	ldrb	r2, [r3, #0]
 800d722:	7ffb      	ldrb	r3, [r7, #31]
 800d724:	4013      	ands	r3, r2
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	bf14      	ite	ne
 800d72c:	2301      	movne	r3, #1
 800d72e:	2300      	moveq	r3, #0
 800d730:	b2db      	uxtb	r3, r3
 800d732:	461a      	mov	r2, r3
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	4293      	cmp	r3, r2
 800d738:	d101      	bne.n	800d73e <change_bitmap+0x88>
 800d73a:	2302      	movs	r3, #2
 800d73c:	e02c      	b.n	800d798 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	4413      	add	r3, r2
 800d744:	333c      	adds	r3, #60	; 0x3c
 800d746:	781a      	ldrb	r2, [r3, #0]
 800d748:	7ffb      	ldrb	r3, [r7, #31]
 800d74a:	4053      	eors	r3, r2
 800d74c:	b2d9      	uxtb	r1, r3
 800d74e:	68fa      	ldr	r2, [r7, #12]
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	4413      	add	r3, r2
 800d754:	333c      	adds	r3, #60	; 0x3c
 800d756:	460a      	mov	r2, r1
 800d758:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2201      	movs	r2, #1
 800d75e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	3b01      	subs	r3, #1
 800d764:	607b      	str	r3, [r7, #4]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d101      	bne.n	800d770 <change_bitmap+0xba>
 800d76c:	2300      	movs	r3, #0
 800d76e:	e013      	b.n	800d798 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800d770:	7ffb      	ldrb	r3, [r7, #31]
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	77fb      	strb	r3, [r7, #31]
 800d776:	7ffb      	ldrb	r3, [r7, #31]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d1cd      	bne.n	800d718 <change_bitmap+0x62>
			bm = 1;
 800d77c:	2301      	movs	r3, #1
 800d77e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	3301      	adds	r3, #1
 800d784:	61bb      	str	r3, [r7, #24]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	899b      	ldrh	r3, [r3, #12]
 800d78a:	461a      	mov	r2, r3
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	4293      	cmp	r3, r2
 800d790:	d3c2      	bcc.n	800d718 <change_bitmap+0x62>
		i = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d796:	e7b3      	b.n	800d700 <change_bitmap+0x4a>
	}
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3720      	adds	r7, #32
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	79db      	ldrb	r3, [r3, #7]
 800d7ac:	2b03      	cmp	r3, #3
 800d7ae:	d121      	bne.n	800d7f4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	689b      	ldr	r3, [r3, #8]
 800d7b4:	617b      	str	r3, [r7, #20]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	699b      	ldr	r3, [r3, #24]
 800d7ba:	613b      	str	r3, [r7, #16]
 800d7bc:	e014      	b.n	800d7e8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6818      	ldr	r0, [r3, #0]
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	6979      	ldr	r1, [r7, #20]
 800d7ca:	f7ff fdcd 	bl	800d368 <put_fat>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800d7d2:	7bfb      	ldrb	r3, [r7, #15]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d001      	beq.n	800d7dc <fill_first_frag+0x3c>
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	e00c      	b.n	800d7f6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	3301      	adds	r3, #1
 800d7e0:	617b      	str	r3, [r7, #20]
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	613b      	str	r3, [r7, #16]
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1e7      	bne.n	800d7be <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800d7f4:	2300      	movs	r3, #0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3718      	adds	r7, #24
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b086      	sub	sp, #24
 800d802:	af00      	add	r7, sp, #0
 800d804:	60f8      	str	r0, [r7, #12]
 800d806:	60b9      	str	r1, [r7, #8]
 800d808:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d80a:	e020      	b.n	800d84e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6818      	ldr	r0, [r3, #0]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	69db      	ldr	r3, [r3, #28]
 800d814:	68ba      	ldr	r2, [r7, #8]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	1c59      	adds	r1, r3, #1
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	69db      	ldr	r3, [r3, #28]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d905      	bls.n	800d82e <fill_last_frag+0x30>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	69db      	ldr	r3, [r3, #28]
 800d826:	68ba      	ldr	r2, [r7, #8]
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	3302      	adds	r3, #2
 800d82c:	e000      	b.n	800d830 <fill_last_frag+0x32>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	461a      	mov	r2, r3
 800d832:	f7ff fd99 	bl	800d368 <put_fat>
 800d836:	4603      	mov	r3, r0
 800d838:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800d83a:	7dfb      	ldrb	r3, [r7, #23]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d001      	beq.n	800d844 <fill_last_frag+0x46>
 800d840:	7dfb      	ldrb	r3, [r7, #23]
 800d842:	e009      	b.n	800d858 <fill_last_frag+0x5a>
		obj->n_frag--;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	69db      	ldr	r3, [r3, #28]
 800d848:	1e5a      	subs	r2, r3, #1
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	69db      	ldr	r3, [r3, #28]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d1da      	bne.n	800d80c <fill_last_frag+0xe>
	}
	return FR_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3718      	adds	r7, #24
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b08a      	sub	sp, #40	; 0x28
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d86c:	2300      	movs	r3, #0
 800d86e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	627b      	str	r3, [r7, #36]	; 0x24
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d904      	bls.n	800d88e <remove_chain+0x2e>
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	6a1b      	ldr	r3, [r3, #32]
 800d888:	68ba      	ldr	r2, [r7, #8]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d301      	bcc.n	800d892 <remove_chain+0x32>
 800d88e:	2302      	movs	r3, #2
 800d890:	e096      	b.n	800d9c0 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d014      	beq.n	800d8c2 <remove_chain+0x62>
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	2b04      	cmp	r3, #4
 800d89e:	d103      	bne.n	800d8a8 <remove_chain+0x48>
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	79db      	ldrb	r3, [r3, #7]
 800d8a4:	2b02      	cmp	r3, #2
 800d8a6:	d00c      	beq.n	800d8c2 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ac:	6879      	ldr	r1, [r7, #4]
 800d8ae:	69b8      	ldr	r0, [r7, #24]
 800d8b0:	f7ff fd5a 	bl	800d368 <put_fat>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d8b8:	7ffb      	ldrb	r3, [r7, #31]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d001      	beq.n	800d8c2 <remove_chain+0x62>
 800d8be:	7ffb      	ldrb	r3, [r7, #31]
 800d8c0:	e07e      	b.n	800d9c0 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d8c2:	68b9      	ldr	r1, [r7, #8]
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f7ff fbfd 	bl	800d0c4 <get_fat>
 800d8ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d055      	beq.n	800d97e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d101      	bne.n	800d8dc <remove_chain+0x7c>
 800d8d8:	2302      	movs	r3, #2
 800d8da:	e071      	b.n	800d9c0 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e2:	d101      	bne.n	800d8e8 <remove_chain+0x88>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e06b      	b.n	800d9c0 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	2b04      	cmp	r3, #4
 800d8ee:	d00b      	beq.n	800d908 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	68b9      	ldr	r1, [r7, #8]
 800d8f4:	69b8      	ldr	r0, [r7, #24]
 800d8f6:	f7ff fd37 	bl	800d368 <put_fat>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d8fe:	7ffb      	ldrb	r3, [r7, #31]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d001      	beq.n	800d908 <remove_chain+0xa8>
 800d904:	7ffb      	ldrb	r3, [r7, #31]
 800d906:	e05b      	b.n	800d9c0 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	69da      	ldr	r2, [r3, #28]
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	6a1b      	ldr	r3, [r3, #32]
 800d910:	3b02      	subs	r3, #2
 800d912:	429a      	cmp	r2, r3
 800d914:	d20b      	bcs.n	800d92e <remove_chain+0xce>
			fs->free_clst++;
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	69db      	ldr	r3, [r3, #28]
 800d91a:	1c5a      	adds	r2, r3, #1
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	791b      	ldrb	r3, [r3, #4]
 800d924:	f043 0301 	orr.w	r3, r3, #1
 800d928:	b2da      	uxtb	r2, r3
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800d92e:	6a3b      	ldr	r3, [r7, #32]
 800d930:	3301      	adds	r3, #1
 800d932:	697a      	ldr	r2, [r7, #20]
 800d934:	429a      	cmp	r2, r3
 800d936:	d102      	bne.n	800d93e <remove_chain+0xde>
			ecl = nxt;
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	623b      	str	r3, [r7, #32]
 800d93c:	e017      	b.n	800d96e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	2b04      	cmp	r3, #4
 800d944:	d10f      	bne.n	800d966 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800d946:	6a3a      	ldr	r2, [r7, #32]
 800d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	1c5a      	adds	r2, r3, #1
 800d94e:	2300      	movs	r3, #0
 800d950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d952:	69b8      	ldr	r0, [r7, #24]
 800d954:	f7ff feaf 	bl	800d6b6 <change_bitmap>
 800d958:	4603      	mov	r3, r0
 800d95a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800d95c:	7ffb      	ldrb	r3, [r7, #31]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d001      	beq.n	800d966 <remove_chain+0x106>
 800d962:	7ffb      	ldrb	r3, [r7, #31]
 800d964:	e02c      	b.n	800d9c0 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	623b      	str	r3, [r7, #32]
 800d96a:	6a3b      	ldr	r3, [r7, #32]
 800d96c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	6a1b      	ldr	r3, [r3, #32]
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d3a2      	bcc.n	800d8c2 <remove_chain+0x62>
 800d97c:	e000      	b.n	800d980 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800d97e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	2b04      	cmp	r3, #4
 800d986:	d11a      	bne.n	800d9be <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d103      	bne.n	800d996 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	71da      	strb	r2, [r3, #7]
 800d994:	e013      	b.n	800d9be <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	79db      	ldrb	r3, [r3, #7]
 800d99a:	2b03      	cmp	r3, #3
 800d99c:	d10f      	bne.n	800d9be <remove_chain+0x15e>
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d30a      	bcc.n	800d9be <remove_chain+0x15e>
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	689a      	ldr	r2, [r3, #8]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d802      	bhi.n	800d9be <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2202      	movs	r2, #2
 800d9bc:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3728      	adds	r7, #40	; 0x28
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b088      	sub	sp, #32
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10d      	bne.n	800d9fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d004      	beq.n	800d9f4 <create_chain+0x2c>
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	6a1b      	ldr	r3, [r3, #32]
 800d9ee:	69ba      	ldr	r2, [r7, #24]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d31b      	bcc.n	800da2c <create_chain+0x64>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	61bb      	str	r3, [r7, #24]
 800d9f8:	e018      	b.n	800da2c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d9fa:	6839      	ldr	r1, [r7, #0]
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7ff fb61 	bl	800d0c4 <get_fat>
 800da02:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d801      	bhi.n	800da0e <create_chain+0x46>
 800da0a:	2301      	movs	r3, #1
 800da0c:	e0d9      	b.n	800dbc2 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da14:	d101      	bne.n	800da1a <create_chain+0x52>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	e0d3      	b.n	800dbc2 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	6a1b      	ldr	r3, [r3, #32]
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	429a      	cmp	r2, r3
 800da22:	d201      	bcs.n	800da28 <create_chain+0x60>
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	e0cc      	b.n	800dbc2 <create_chain+0x1fa>
		scl = clst;
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	2b04      	cmp	r3, #4
 800da32:	d164      	bne.n	800dafe <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800da34:	2201      	movs	r2, #1
 800da36:	69b9      	ldr	r1, [r7, #24]
 800da38:	6938      	ldr	r0, [r7, #16]
 800da3a:	f7ff fdb5 	bl	800d5a8 <find_bitmap>
 800da3e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <create_chain+0x86>
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4c:	d101      	bne.n	800da52 <create_chain+0x8a>
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	e0b7      	b.n	800dbc2 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800da52:	2301      	movs	r3, #1
 800da54:	2201      	movs	r2, #1
 800da56:	69f9      	ldr	r1, [r7, #28]
 800da58:	6938      	ldr	r0, [r7, #16]
 800da5a:	f7ff fe2c 	bl	800d6b6 <change_bitmap>
 800da5e:	4603      	mov	r3, r0
 800da60:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800da62:	7dfb      	ldrb	r3, [r7, #23]
 800da64:	2b02      	cmp	r3, #2
 800da66:	d101      	bne.n	800da6c <create_chain+0xa4>
 800da68:	2301      	movs	r3, #1
 800da6a:	e0aa      	b.n	800dbc2 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800da6c:	7dfb      	ldrb	r3, [r7, #23]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d102      	bne.n	800da78 <create_chain+0xb0>
 800da72:	f04f 33ff 	mov.w	r3, #4294967295
 800da76:	e0a4      	b.n	800dbc2 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d103      	bne.n	800da86 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2202      	movs	r2, #2
 800da82:	71da      	strb	r2, [r3, #7]
 800da84:	e011      	b.n	800daaa <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	79db      	ldrb	r3, [r3, #7]
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	d10d      	bne.n	800daaa <create_chain+0xe2>
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	3301      	adds	r3, #1
 800da92:	69fa      	ldr	r2, [r7, #28]
 800da94:	429a      	cmp	r2, r3
 800da96:	d008      	beq.n	800daaa <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	689b      	ldr	r3, [r3, #8]
 800da9c:	69ba      	ldr	r2, [r7, #24]
 800da9e:	1ad2      	subs	r2, r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2203      	movs	r2, #3
 800daa8:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	79db      	ldrb	r3, [r3, #7]
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d064      	beq.n	800db7c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	3301      	adds	r3, #1
 800dab6:	69fa      	ldr	r2, [r7, #28]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d10b      	bne.n	800dad4 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	69db      	ldr	r3, [r3, #28]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d003      	beq.n	800dacc <create_chain+0x104>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	69db      	ldr	r3, [r3, #28]
 800dac8:	3301      	adds	r3, #1
 800daca:	e000      	b.n	800dace <create_chain+0x106>
 800dacc:	2302      	movs	r3, #2
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	61d3      	str	r3, [r2, #28]
 800dad2:	e053      	b.n	800db7c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	69db      	ldr	r3, [r3, #28]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d102      	bne.n	800dae2 <create_chain+0x11a>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800dae2:	69fa      	ldr	r2, [r7, #28]
 800dae4:	6839      	ldr	r1, [r7, #0]
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f7ff fe89 	bl	800d7fe <fill_last_frag>
 800daec:	4603      	mov	r3, r0
 800daee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800daf0:	7dfb      	ldrb	r3, [r7, #23]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d142      	bne.n	800db7c <create_chain+0x1b4>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2201      	movs	r2, #1
 800dafa:	61da      	str	r2, [r3, #28]
 800dafc:	e03e      	b.n	800db7c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	3301      	adds	r3, #1
 800db06:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	6a1b      	ldr	r3, [r3, #32]
 800db0c:	69fa      	ldr	r2, [r7, #28]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d307      	bcc.n	800db22 <create_chain+0x15a>
				ncl = 2;
 800db12:	2302      	movs	r3, #2
 800db14:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800db16:	69fa      	ldr	r2, [r7, #28]
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d901      	bls.n	800db22 <create_chain+0x15a>
 800db1e:	2300      	movs	r3, #0
 800db20:	e04f      	b.n	800dbc2 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800db22:	69f9      	ldr	r1, [r7, #28]
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff facd 	bl	800d0c4 <get_fat>
 800db2a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d00e      	beq.n	800db50 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d003      	beq.n	800db40 <create_chain+0x178>
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db3e:	d101      	bne.n	800db44 <create_chain+0x17c>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	e03e      	b.n	800dbc2 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800db44:	69fa      	ldr	r2, [r7, #28]
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d1da      	bne.n	800db02 <create_chain+0x13a>
 800db4c:	2300      	movs	r3, #0
 800db4e:	e038      	b.n	800dbc2 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800db50:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800db52:	f04f 32ff 	mov.w	r2, #4294967295
 800db56:	69f9      	ldr	r1, [r7, #28]
 800db58:	6938      	ldr	r0, [r7, #16]
 800db5a:	f7ff fc05 	bl	800d368 <put_fat>
 800db5e:	4603      	mov	r3, r0
 800db60:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800db62:	7dfb      	ldrb	r3, [r7, #23]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d109      	bne.n	800db7c <create_chain+0x1b4>
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d006      	beq.n	800db7c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800db6e:	69fa      	ldr	r2, [r7, #28]
 800db70:	6839      	ldr	r1, [r7, #0]
 800db72:	6938      	ldr	r0, [r7, #16]
 800db74:	f7ff fbf8 	bl	800d368 <put_fat>
 800db78:	4603      	mov	r3, r0
 800db7a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800db7c:	7dfb      	ldrb	r3, [r7, #23]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d116      	bne.n	800dbb0 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	69fa      	ldr	r2, [r7, #28]
 800db86:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	69da      	ldr	r2, [r3, #28]
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	6a1b      	ldr	r3, [r3, #32]
 800db90:	3b02      	subs	r3, #2
 800db92:	429a      	cmp	r2, r3
 800db94:	d804      	bhi.n	800dba0 <create_chain+0x1d8>
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	69db      	ldr	r3, [r3, #28]
 800db9a:	1e5a      	subs	r2, r3, #1
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	791b      	ldrb	r3, [r3, #4]
 800dba4:	f043 0301 	orr.w	r3, r3, #1
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	711a      	strb	r2, [r3, #4]
 800dbae:	e007      	b.n	800dbc0 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dbb0:	7dfb      	ldrb	r3, [r7, #23]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d102      	bne.n	800dbbc <create_chain+0x1f4>
 800dbb6:	f04f 33ff 	mov.w	r3, #4294967295
 800dbba:	e000      	b.n	800dbbe <create_chain+0x1f6>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dbc0:	69fb      	ldr	r3, [r7, #28]
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3720      	adds	r7, #32
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b088      	sub	sp, #32
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	60f8      	str	r0, [r7, #12]
 800dbd2:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	899b      	ldrh	r3, [r3, #12]
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	f04f 0300 	mov.w	r3, #0
 800dbee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dbf2:	f7f2 fb45 	bl	8000280 <__aeabi_uldivmod>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	4610      	mov	r0, r2
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	895b      	ldrh	r3, [r3, #10]
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	f04f 0300 	mov.w	r3, #0
 800dc08:	f7f2 fb3a 	bl	8000280 <__aeabi_uldivmod>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4613      	mov	r3, r2
 800dc12:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	1d1a      	adds	r2, r3, #4
 800dc18:	61ba      	str	r2, [r7, #24]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <clmt_clust+0x5e>
 800dc24:	2300      	movs	r3, #0
 800dc26:	e010      	b.n	800dc4a <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800dc28:	69fa      	ldr	r2, [r7, #28]
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d307      	bcc.n	800dc40 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800dc30:	69fa      	ldr	r2, [r7, #28]
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	61fb      	str	r3, [r7, #28]
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dc3e:	e7e9      	b.n	800dc14 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800dc40:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	4413      	add	r3, r2
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3720      	adds	r7, #32
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b086      	sub	sp, #24
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	2b04      	cmp	r3, #4
 800dc68:	d102      	bne.n	800dc70 <dir_sdi+0x1e>
 800dc6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc6e:	e001      	b.n	800dc74 <dir_sdi+0x22>
 800dc70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d904      	bls.n	800dc84 <dir_sdi+0x32>
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	f003 031f 	and.w	r3, r3, #31
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d001      	beq.n	800dc88 <dir_sdi+0x36>
		return FR_INT_ERR;
 800dc84:	2302      	movs	r3, #2
 800dc86:	e074      	b.n	800dd72 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d109      	bne.n	800dcae <dir_sdi+0x5c>
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d905      	bls.n	800dcae <dir_sdi+0x5c>
		clst = fs->dirbase;
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dca6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d10c      	bne.n	800dcce <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	095b      	lsrs	r3, r3, #5
 800dcb8:	693a      	ldr	r2, [r7, #16]
 800dcba:	8912      	ldrh	r2, [r2, #8]
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d301      	bcc.n	800dcc4 <dir_sdi+0x72>
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	e056      	b.n	800dd72 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	639a      	str	r2, [r3, #56]	; 0x38
 800dccc:	e02d      	b.n	800dd2a <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	895b      	ldrh	r3, [r3, #10]
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	899b      	ldrh	r3, [r3, #12]
 800dcd8:	fb03 f302 	mul.w	r3, r3, r2
 800dcdc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dcde:	e019      	b.n	800dd14 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6979      	ldr	r1, [r7, #20]
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7ff f9ed 	bl	800d0c4 <get_fat>
 800dcea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf2:	d101      	bne.n	800dcf8 <dir_sdi+0xa6>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	e03c      	b.n	800dd72 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d904      	bls.n	800dd08 <dir_sdi+0xb6>
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	6a1b      	ldr	r3, [r3, #32]
 800dd02:	697a      	ldr	r2, [r7, #20]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d301      	bcc.n	800dd0c <dir_sdi+0xba>
 800dd08:	2302      	movs	r3, #2
 800dd0a:	e032      	b.n	800dd72 <dir_sdi+0x120>
			ofs -= csz;
 800dd0c:	683a      	ldr	r2, [r7, #0]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	1ad3      	subs	r3, r2, r3
 800dd12:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd14:	683a      	ldr	r2, [r7, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d2e1      	bcs.n	800dce0 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800dd1c:	6979      	ldr	r1, [r7, #20]
 800dd1e:	6938      	ldr	r0, [r7, #16]
 800dd20:	f7ff f9b0 	bl	800d084 <clust2sect>
 800dd24:	4602      	mov	r2, r0
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	697a      	ldr	r2, [r7, #20]
 800dd2e:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d101      	bne.n	800dd3c <dir_sdi+0xea>
 800dd38:	2302      	movs	r3, #2
 800dd3a:	e01a      	b.n	800dd72 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	899b      	ldrh	r3, [r3, #12]
 800dd44:	4619      	mov	r1, r3
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd4c:	441a      	add	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	899b      	ldrh	r3, [r3, #12]
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd64:	fb02 f200 	mul.w	r2, r2, r0
 800dd68:	1a9b      	subs	r3, r3, r2
 800dd6a:	18ca      	adds	r2, r1, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800dd70:	2300      	movs	r3, #0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3718      	adds	r7, #24
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b086      	sub	sp, #24
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd8e:	3320      	adds	r3, #32
 800dd90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00b      	beq.n	800ddb2 <dir_next+0x38>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	2b04      	cmp	r3, #4
 800dda0:	d102      	bne.n	800dda8 <dir_next+0x2e>
 800dda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dda6:	e001      	b.n	800ddac <dir_next+0x32>
 800dda8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d801      	bhi.n	800ddb6 <dir_next+0x3c>
 800ddb2:	2304      	movs	r3, #4
 800ddb4:	e0c3      	b.n	800df3e <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	899b      	ldrh	r3, [r3, #12]
 800ddba:	461a      	mov	r2, r3
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddc2:	fb02 f201 	mul.w	r2, r2, r1
 800ddc6:	1a9b      	subs	r3, r3, r2
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f040 80a5 	bne.w	800df18 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10b      	bne.n	800ddf8 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	095b      	lsrs	r3, r3, #5
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	8912      	ldrh	r2, [r2, #8]
 800dde8:	4293      	cmp	r3, r2
 800ddea:	f0c0 8095 	bcc.w	800df18 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	639a      	str	r2, [r3, #56]	; 0x38
 800ddf4:	2304      	movs	r3, #4
 800ddf6:	e0a2      	b.n	800df3e <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	899b      	ldrh	r3, [r3, #12]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	fbb3 f3f2 	udiv	r3, r3, r2
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	8952      	ldrh	r2, [r2, #10]
 800de08:	3a01      	subs	r2, #1
 800de0a:	4013      	ands	r3, r2
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f040 8083 	bne.w	800df18 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f7ff f952 	bl	800d0c4 <get_fat>
 800de20:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d801      	bhi.n	800de2c <dir_next+0xb2>
 800de28:	2302      	movs	r3, #2
 800de2a:	e088      	b.n	800df3e <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de32:	d101      	bne.n	800de38 <dir_next+0xbe>
 800de34:	2301      	movs	r3, #1
 800de36:	e082      	b.n	800df3e <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6a1b      	ldr	r3, [r3, #32]
 800de3c:	697a      	ldr	r2, [r7, #20]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d360      	bcc.n	800df04 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d104      	bne.n	800de52 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	639a      	str	r2, [r3, #56]	; 0x38
 800de4e:	2304      	movs	r3, #4
 800de50:	e075      	b.n	800df3e <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de58:	4619      	mov	r1, r3
 800de5a:	4610      	mov	r0, r2
 800de5c:	f7ff fdb4 	bl	800d9c8 <create_chain>
 800de60:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d101      	bne.n	800de6c <dir_next+0xf2>
 800de68:	2307      	movs	r3, #7
 800de6a:	e068      	b.n	800df3e <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d101      	bne.n	800de76 <dir_next+0xfc>
 800de72:	2302      	movs	r3, #2
 800de74:	e063      	b.n	800df3e <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de7c:	d101      	bne.n	800de82 <dir_next+0x108>
 800de7e:	2301      	movs	r3, #1
 800de80:	e05d      	b.n	800df3e <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	79db      	ldrb	r3, [r3, #7]
 800de86:	f043 0304 	orr.w	r3, r3, #4
 800de8a:	b2da      	uxtb	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f7ff f815 	bl	800cec0 <sync_window>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d001      	beq.n	800dea0 <dir_next+0x126>
 800de9c:	2301      	movs	r3, #1
 800de9e:	e04e      	b.n	800df3e <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	899b      	ldrh	r3, [r3, #12]
 800deaa:	461a      	mov	r2, r3
 800deac:	2100      	movs	r1, #0
 800deae:	f7fe fe3d 	bl	800cb2c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800deb2:	2300      	movs	r3, #0
 800deb4:	613b      	str	r3, [r7, #16]
 800deb6:	6979      	ldr	r1, [r7, #20]
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f7ff f8e3 	bl	800d084 <clust2sect>
 800debe:	4602      	mov	r2, r0
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	639a      	str	r2, [r3, #56]	; 0x38
 800dec4:	e012      	b.n	800deec <dir_next+0x172>
						fs->wflag = 1;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2201      	movs	r2, #1
 800deca:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f7fe fff7 	bl	800cec0 <sync_window>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <dir_next+0x162>
 800ded8:	2301      	movs	r3, #1
 800deda:	e030      	b.n	800df3e <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	3301      	adds	r3, #1
 800dee0:	613b      	str	r3, [r7, #16]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee6:	1c5a      	adds	r2, r3, #1
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	639a      	str	r2, [r3, #56]	; 0x38
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	895b      	ldrh	r3, [r3, #10]
 800def0:	461a      	mov	r2, r3
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	4293      	cmp	r3, r2
 800def6:	d3e6      	bcc.n	800dec6 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	1ad2      	subs	r2, r2, r3
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	697a      	ldr	r2, [r7, #20]
 800df08:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800df0a:	6979      	ldr	r1, [r7, #20]
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f7ff f8b9 	bl	800d084 <clust2sect>
 800df12:	4602      	mov	r2, r0
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	68ba      	ldr	r2, [r7, #8]
 800df1c:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	899b      	ldrh	r3, [r3, #12]
 800df28:	461a      	mov	r2, r3
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	fbb3 f0f2 	udiv	r0, r3, r2
 800df30:	fb02 f200 	mul.w	r2, r2, r0
 800df34:	1a9b      	subs	r3, r3, r2
 800df36:	18ca      	adds	r2, r1, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3718      	adds	r7, #24
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b086      	sub	sp, #24
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800df56:	2100      	movs	r1, #0
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7ff fe7a 	bl	800dc52 <dir_sdi>
 800df5e:	4603      	mov	r3, r0
 800df60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df62:	7dfb      	ldrb	r3, [r7, #23]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d140      	bne.n	800dfea <dir_alloc+0xa4>
		n = 0;
 800df68:	2300      	movs	r3, #0
 800df6a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df70:	4619      	mov	r1, r3
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f7fe ffe8 	bl	800cf48 <move_window>
 800df78:	4603      	mov	r3, r0
 800df7a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df7c:	7dfb      	ldrb	r3, [r7, #23]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d132      	bne.n	800dfe8 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	2b04      	cmp	r3, #4
 800df88:	d108      	bne.n	800df9c <dir_alloc+0x56>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	b25b      	sxtb	r3, r3
 800df92:	43db      	mvns	r3, r3
 800df94:	b2db      	uxtb	r3, r3
 800df96:	09db      	lsrs	r3, r3, #7
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	e00f      	b.n	800dfbc <dir_alloc+0x76>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2be5      	cmp	r3, #229	; 0xe5
 800dfa4:	d004      	beq.n	800dfb0 <dir_alloc+0x6a>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d101      	bne.n	800dfb4 <dir_alloc+0x6e>
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	e000      	b.n	800dfb6 <dir_alloc+0x70>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	f003 0301 	and.w	r3, r3, #1
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d007      	beq.n	800dfd0 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	613b      	str	r3, [r7, #16]
 800dfc6:	693a      	ldr	r2, [r7, #16]
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d102      	bne.n	800dfd4 <dir_alloc+0x8e>
 800dfce:	e00c      	b.n	800dfea <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dfd4:	2101      	movs	r1, #1
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7ff fecf 	bl	800dd7a <dir_next>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dfe0:	7dfb      	ldrb	r3, [r7, #23]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d0c2      	beq.n	800df6c <dir_alloc+0x26>
 800dfe6:	e000      	b.n	800dfea <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800dfe8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dfea:	7dfb      	ldrb	r3, [r7, #23]
 800dfec:	2b04      	cmp	r3, #4
 800dfee:	d101      	bne.n	800dff4 <dir_alloc+0xae>
 800dff0:	2307      	movs	r3, #7
 800dff2:	75fb      	strb	r3, [r7, #23]
	return res;
 800dff4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b084      	sub	sp, #16
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
 800e006:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	331a      	adds	r3, #26
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fe fba7 	bl	800c760 <ld_word>
 800e012:	4603      	mov	r3, r0
 800e014:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	2b03      	cmp	r3, #3
 800e01c:	d109      	bne.n	800e032 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	3314      	adds	r3, #20
 800e022:	4618      	mov	r0, r3
 800e024:	f7fe fb9c 	bl	800c760 <ld_word>
 800e028:	4603      	mov	r3, r0
 800e02a:	041b      	lsls	r3, r3, #16
 800e02c:	68fa      	ldr	r2, [r7, #12]
 800e02e:	4313      	orrs	r3, r2
 800e030:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e032:	68fb      	ldr	r3, [r7, #12]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	331a      	adds	r3, #26
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	b292      	uxth	r2, r2
 800e050:	4611      	mov	r1, r2
 800e052:	4618      	mov	r0, r3
 800e054:	f7fe fc7a 	bl	800c94c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b03      	cmp	r3, #3
 800e05e:	d109      	bne.n	800e074 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	f103 0214 	add.w	r2, r3, #20
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	0c1b      	lsrs	r3, r3, #16
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	4619      	mov	r1, r3
 800e06e:	4610      	mov	r0, r2
 800e070:	f7fe fc6c 	bl	800c94c <st_word>
	}
}
 800e074:	bf00      	nop
 800e076:	3710      	adds	r7, #16
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e07c:	b590      	push	{r4, r7, lr}
 800e07e:	b087      	sub	sp, #28
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	331a      	adds	r3, #26
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fe fb68 	bl	800c760 <ld_word>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d001      	beq.n	800e09a <cmp_lfn+0x1e>
 800e096:	2300      	movs	r3, #0
 800e098:	e059      	b.n	800e14e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0a2:	1e5a      	subs	r2, r3, #1
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	005b      	lsls	r3, r3, #1
 800e0a8:	4413      	add	r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	81fb      	strh	r3, [r7, #14]
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	613b      	str	r3, [r7, #16]
 800e0b8:	e033      	b.n	800e122 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e0ba:	4a27      	ldr	r2, [pc, #156]	; (800e158 <cmp_lfn+0xdc>)
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	4413      	add	r3, r2
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	4413      	add	r3, r2
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fe fb49 	bl	800c760 <ld_word>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e0d2:	89fb      	ldrh	r3, [r7, #14]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d01a      	beq.n	800e10e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	2bfe      	cmp	r3, #254	; 0xfe
 800e0dc:	d812      	bhi.n	800e104 <cmp_lfn+0x88>
 800e0de:	89bb      	ldrh	r3, [r7, #12]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f003 fa65 	bl	80115b0 <ff_wtoupper>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	461c      	mov	r4, r3
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	1c5a      	adds	r2, r3, #1
 800e0ee:	617a      	str	r2, [r7, #20]
 800e0f0:	005b      	lsls	r3, r3, #1
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	881b      	ldrh	r3, [r3, #0]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f003 fa59 	bl	80115b0 <ff_wtoupper>
 800e0fe:	4603      	mov	r3, r0
 800e100:	429c      	cmp	r4, r3
 800e102:	d001      	beq.n	800e108 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e104:	2300      	movs	r3, #0
 800e106:	e022      	b.n	800e14e <cmp_lfn+0xd2>
			}
			wc = uc;
 800e108:	89bb      	ldrh	r3, [r7, #12]
 800e10a:	81fb      	strh	r3, [r7, #14]
 800e10c:	e006      	b.n	800e11c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e10e:	89bb      	ldrh	r3, [r7, #12]
 800e110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e114:	4293      	cmp	r3, r2
 800e116:	d001      	beq.n	800e11c <cmp_lfn+0xa0>
 800e118:	2300      	movs	r3, #0
 800e11a:	e018      	b.n	800e14e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	3301      	adds	r3, #1
 800e120:	613b      	str	r3, [r7, #16]
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	2b0c      	cmp	r3, #12
 800e126:	d9c8      	bls.n	800e0ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00b      	beq.n	800e14c <cmp_lfn+0xd0>
 800e134:	89fb      	ldrh	r3, [r7, #14]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d008      	beq.n	800e14c <cmp_lfn+0xd0>
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	005b      	lsls	r3, r3, #1
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	4413      	add	r3, r2
 800e142:	881b      	ldrh	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d001      	beq.n	800e14c <cmp_lfn+0xd0>
 800e148:	2300      	movs	r3, #0
 800e14a:	e000      	b.n	800e14e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e14c:	2301      	movs	r3, #1
}
 800e14e:	4618      	mov	r0, r3
 800e150:	371c      	adds	r7, #28
 800e152:	46bd      	mov	sp, r7
 800e154:	bd90      	pop	{r4, r7, pc}
 800e156:	bf00      	nop
 800e158:	08012820 	.word	0x08012820

0800e15c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b086      	sub	sp, #24
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	331a      	adds	r3, #26
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fe faf8 	bl	800c760 <ld_word>
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d001      	beq.n	800e17a <pick_lfn+0x1e>
 800e176:	2300      	movs	r3, #0
 800e178:	e04d      	b.n	800e216 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e182:	1e5a      	subs	r2, r3, #1
 800e184:	4613      	mov	r3, r2
 800e186:	005b      	lsls	r3, r3, #1
 800e188:	4413      	add	r3, r2
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	4413      	add	r3, r2
 800e18e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e190:	2301      	movs	r3, #1
 800e192:	81fb      	strh	r3, [r7, #14]
 800e194:	2300      	movs	r3, #0
 800e196:	613b      	str	r3, [r7, #16]
 800e198:	e028      	b.n	800e1ec <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e19a:	4a21      	ldr	r2, [pc, #132]	; (800e220 <pick_lfn+0xc4>)
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	4413      	add	r3, r2
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7fe fad9 	bl	800c760 <ld_word>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e1b2:	89fb      	ldrh	r3, [r7, #14]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d00f      	beq.n	800e1d8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	2bfe      	cmp	r3, #254	; 0xfe
 800e1bc:	d901      	bls.n	800e1c2 <pick_lfn+0x66>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e029      	b.n	800e216 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e1c2:	89bb      	ldrh	r3, [r7, #12]
 800e1c4:	81fb      	strh	r3, [r7, #14]
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	1c5a      	adds	r2, r3, #1
 800e1ca:	617a      	str	r2, [r7, #20]
 800e1cc:	005b      	lsls	r3, r3, #1
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	89fa      	ldrh	r2, [r7, #14]
 800e1d4:	801a      	strh	r2, [r3, #0]
 800e1d6:	e006      	b.n	800e1e6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e1d8:	89bb      	ldrh	r3, [r7, #12]
 800e1da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d001      	beq.n	800e1e6 <pick_lfn+0x8a>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	e017      	b.n	800e216 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	613b      	str	r3, [r7, #16]
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	2b0c      	cmp	r3, #12
 800e1f0:	d9d3      	bls.n	800e19a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d00a      	beq.n	800e214 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	2bfe      	cmp	r3, #254	; 0xfe
 800e202:	d901      	bls.n	800e208 <pick_lfn+0xac>
 800e204:	2300      	movs	r3, #0
 800e206:	e006      	b.n	800e216 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	005b      	lsls	r3, r3, #1
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	4413      	add	r3, r2
 800e210:	2200      	movs	r2, #0
 800e212:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e214:	2301      	movs	r3, #1
}
 800e216:	4618      	mov	r0, r3
 800e218:	3718      	adds	r7, #24
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	08012820 	.word	0x08012820

0800e224 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	4611      	mov	r1, r2
 800e230:	461a      	mov	r2, r3
 800e232:	460b      	mov	r3, r1
 800e234:	71fb      	strb	r3, [r7, #7]
 800e236:	4613      	mov	r3, r2
 800e238:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	330d      	adds	r3, #13
 800e23e:	79ba      	ldrb	r2, [r7, #6]
 800e240:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	330b      	adds	r3, #11
 800e246:	220f      	movs	r2, #15
 800e248:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	330c      	adds	r3, #12
 800e24e:	2200      	movs	r2, #0
 800e250:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	331a      	adds	r3, #26
 800e256:	2100      	movs	r1, #0
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fe fb77 	bl	800c94c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e25e:	79fb      	ldrb	r3, [r7, #7]
 800e260:	1e5a      	subs	r2, r3, #1
 800e262:	4613      	mov	r3, r2
 800e264:	005b      	lsls	r3, r3, #1
 800e266:	4413      	add	r3, r2
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4413      	add	r3, r2
 800e26c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e26e:	2300      	movs	r3, #0
 800e270:	82fb      	strh	r3, [r7, #22]
 800e272:	2300      	movs	r3, #0
 800e274:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e276:	8afb      	ldrh	r3, [r7, #22]
 800e278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d007      	beq.n	800e290 <put_lfn+0x6c>
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	61fa      	str	r2, [r7, #28]
 800e286:	005b      	lsls	r3, r3, #1
 800e288:	68fa      	ldr	r2, [r7, #12]
 800e28a:	4413      	add	r3, r2
 800e28c:	881b      	ldrh	r3, [r3, #0]
 800e28e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e290:	4a17      	ldr	r2, [pc, #92]	; (800e2f0 <put_lfn+0xcc>)
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	4413      	add	r3, r2
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	461a      	mov	r2, r3
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	4413      	add	r3, r2
 800e29e:	8afa      	ldrh	r2, [r7, #22]
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fe fb52 	bl	800c94c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e2a8:	8afb      	ldrh	r3, [r7, #22]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d102      	bne.n	800e2b4 <put_lfn+0x90>
 800e2ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2b2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e2b4:	69bb      	ldr	r3, [r7, #24]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	61bb      	str	r3, [r7, #24]
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	2b0c      	cmp	r3, #12
 800e2be:	d9da      	bls.n	800e276 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e2c0:	8afb      	ldrh	r3, [r7, #22]
 800e2c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d006      	beq.n	800e2d8 <put_lfn+0xb4>
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	005b      	lsls	r3, r3, #1
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	881b      	ldrh	r3, [r3, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d103      	bne.n	800e2e0 <put_lfn+0xbc>
 800e2d8:	79fb      	ldrb	r3, [r7, #7]
 800e2da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2de:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	79fa      	ldrb	r2, [r7, #7]
 800e2e4:	701a      	strb	r2, [r3, #0]
}
 800e2e6:	bf00      	nop
 800e2e8:	3720      	adds	r7, #32
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	08012820 	.word	0x08012820

0800e2f4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b08c      	sub	sp, #48	; 0x30
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	607a      	str	r2, [r7, #4]
 800e300:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e302:	220b      	movs	r2, #11
 800e304:	68b9      	ldr	r1, [r7, #8]
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f7fe fbef 	bl	800caea <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	2b05      	cmp	r3, #5
 800e310:	d92b      	bls.n	800e36a <gen_numname+0x76>
		sr = seq;
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e316:	e022      	b.n	800e35e <gen_numname+0x6a>
			wc = *lfn++;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	1c9a      	adds	r2, r3, #2
 800e31c:	607a      	str	r2, [r7, #4]
 800e31e:	881b      	ldrh	r3, [r3, #0]
 800e320:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e322:	2300      	movs	r3, #0
 800e324:	62bb      	str	r3, [r7, #40]	; 0x28
 800e326:	e017      	b.n	800e358 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	005a      	lsls	r2, r3, #1
 800e32c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	4413      	add	r3, r2
 800e334:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e338:	085b      	lsrs	r3, r3, #1
 800e33a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e342:	2b00      	cmp	r3, #0
 800e344:	d005      	beq.n	800e352 <gen_numname+0x5e>
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e34c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e350:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e354:	3301      	adds	r3, #1
 800e356:	62bb      	str	r3, [r7, #40]	; 0x28
 800e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35a:	2b0f      	cmp	r3, #15
 800e35c:	d9e4      	bls.n	800e328 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d1d8      	bne.n	800e318 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e36a:	2307      	movs	r3, #7
 800e36c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	b2db      	uxtb	r3, r3
 800e372:	f003 030f 	and.w	r3, r3, #15
 800e376:	b2db      	uxtb	r3, r3
 800e378:	3330      	adds	r3, #48	; 0x30
 800e37a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e37e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e382:	2b39      	cmp	r3, #57	; 0x39
 800e384:	d904      	bls.n	800e390 <gen_numname+0x9c>
 800e386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e38a:	3307      	adds	r3, #7
 800e38c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	1e5a      	subs	r2, r3, #1
 800e394:	62ba      	str	r2, [r7, #40]	; 0x28
 800e396:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e39a:	4413      	add	r3, r2
 800e39c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e3a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	091b      	lsrs	r3, r3, #4
 800e3a8:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1de      	bne.n	800e36e <gen_numname+0x7a>
	ns[i] = '~';
 800e3b0:	f107 0214 	add.w	r2, r7, #20
 800e3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b6:	4413      	add	r3, r2
 800e3b8:	227e      	movs	r2, #126	; 0x7e
 800e3ba:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e3bc:	2300      	movs	r3, #0
 800e3be:	627b      	str	r3, [r7, #36]	; 0x24
 800e3c0:	e002      	b.n	800e3c8 <gen_numname+0xd4>
 800e3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d205      	bcs.n	800e3dc <gen_numname+0xe8>
 800e3d0:	68fa      	ldr	r2, [r7, #12]
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d4:	4413      	add	r3, r2
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	2b20      	cmp	r3, #32
 800e3da:	d1f2      	bne.n	800e3c2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3de:	2b07      	cmp	r3, #7
 800e3e0:	d808      	bhi.n	800e3f4 <gen_numname+0x100>
 800e3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e4:	1c5a      	adds	r2, r3, #1
 800e3e6:	62ba      	str	r2, [r7, #40]	; 0x28
 800e3e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e3ec:	4413      	add	r3, r2
 800e3ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e3f2:	e000      	b.n	800e3f6 <gen_numname+0x102>
 800e3f4:	2120      	movs	r1, #32
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f8:	1c5a      	adds	r2, r3, #1
 800e3fa:	627a      	str	r2, [r7, #36]	; 0x24
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	4413      	add	r3, r2
 800e400:	460a      	mov	r2, r1
 800e402:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	2b07      	cmp	r3, #7
 800e408:	d9e8      	bls.n	800e3dc <gen_numname+0xe8>
}
 800e40a:	bf00      	nop
 800e40c:	bf00      	nop
 800e40e:	3730      	adds	r7, #48	; 0x30
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e41c:	2300      	movs	r3, #0
 800e41e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e420:	230b      	movs	r3, #11
 800e422:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e424:	7bfb      	ldrb	r3, [r7, #15]
 800e426:	b2da      	uxtb	r2, r3
 800e428:	0852      	lsrs	r2, r2, #1
 800e42a:	01db      	lsls	r3, r3, #7
 800e42c:	4313      	orrs	r3, r2
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	1c59      	adds	r1, r3, #1
 800e434:	6079      	str	r1, [r7, #4]
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	4413      	add	r3, r2
 800e43a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	3b01      	subs	r3, #1
 800e440:	60bb      	str	r3, [r7, #8]
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d1ed      	bne.n	800e424 <sum_sfn+0x10>
	return sum;
 800e448:	7bfb      	ldrb	r3, [r7, #15]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3714      	adds	r7, #20
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr

0800e456 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800e456:	b480      	push	{r7}
 800e458:	b087      	sub	sp, #28
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	3301      	adds	r3, #1
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	3301      	adds	r3, #1
 800e466:	015b      	lsls	r3, r3, #5
 800e468:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800e46a:	2300      	movs	r3, #0
 800e46c:	827b      	strh	r3, [r7, #18]
 800e46e:	2300      	movs	r3, #0
 800e470:	617b      	str	r3, [r7, #20]
 800e472:	e018      	b.n	800e4a6 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	2b02      	cmp	r3, #2
 800e478:	d103      	bne.n	800e482 <xdir_sum+0x2c>
			i++;
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	3301      	adds	r3, #1
 800e47e:	617b      	str	r3, [r7, #20]
 800e480:	e00e      	b.n	800e4a0 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800e482:	8a7b      	ldrh	r3, [r7, #18]
 800e484:	03db      	lsls	r3, r3, #15
 800e486:	b29a      	uxth	r2, r3
 800e488:	8a7b      	ldrh	r3, [r7, #18]
 800e48a:	085b      	lsrs	r3, r3, #1
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	4413      	add	r3, r2
 800e490:	b29a      	uxth	r2, r3
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	440b      	add	r3, r1
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	4413      	add	r3, r2
 800e49e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	617b      	str	r3, [r7, #20]
 800e4a6:	697a      	ldr	r2, [r7, #20]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d3e2      	bcc.n	800e474 <xdir_sum+0x1e>
		}
	}
	return sum;
 800e4ae:	8a7b      	ldrh	r3, [r7, #18]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	371c      	adds	r7, #28
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr

0800e4bc <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800e4c8:	e01f      	b.n	800e50a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800e4ca:	89bb      	ldrh	r3, [r7, #12]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f003 f86f 	bl	80115b0 <ff_wtoupper>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800e4d6:	89fb      	ldrh	r3, [r7, #14]
 800e4d8:	03db      	lsls	r3, r3, #15
 800e4da:	b29a      	uxth	r2, r3
 800e4dc:	89fb      	ldrh	r3, [r7, #14]
 800e4de:	085b      	lsrs	r3, r3, #1
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	4413      	add	r3, r2
 800e4e4:	b29a      	uxth	r2, r3
 800e4e6:	89bb      	ldrh	r3, [r7, #12]
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	4413      	add	r3, r2
 800e4ee:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800e4f0:	89fb      	ldrh	r3, [r7, #14]
 800e4f2:	03db      	lsls	r3, r3, #15
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	89fb      	ldrh	r3, [r7, #14]
 800e4f8:	085b      	lsrs	r3, r3, #1
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	4413      	add	r3, r2
 800e4fe:	b29a      	uxth	r2, r3
 800e500:	89bb      	ldrh	r3, [r7, #12]
 800e502:	0a1b      	lsrs	r3, r3, #8
 800e504:	b29b      	uxth	r3, r3
 800e506:	4413      	add	r3, r2
 800e508:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	1c9a      	adds	r2, r3, #2
 800e50e:	607a      	str	r2, [r7, #4]
 800e510:	881b      	ldrh	r3, [r3, #0]
 800e512:	81bb      	strh	r3, [r7, #12]
 800e514:	89bb      	ldrh	r3, [r7, #12]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d1d7      	bne.n	800e4ca <xname_sum+0xe>
	}
	return sum;
 800e51a:	89fb      	ldrh	r3, [r7, #14]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800e52e:	2300      	movs	r3, #0
 800e530:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800e532:	2340      	movs	r3, #64	; 0x40
 800e534:	613b      	str	r3, [r7, #16]
 800e536:	2300      	movs	r3, #0
 800e538:	60fb      	str	r3, [r7, #12]
 800e53a:	e02c      	b.n	800e596 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	f003 031f 	and.w	r3, r3, #31
 800e542:	2b00      	cmp	r3, #0
 800e544:	d102      	bne.n	800e54c <get_xdir_info+0x28>
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	3302      	adds	r3, #2
 800e54a:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	4413      	add	r3, r2
 800e552:	4618      	mov	r0, r3
 800e554:	f7fe f904 	bl	800c760 <ld_word>
 800e558:	4603      	mov	r3, r0
 800e55a:	2100      	movs	r1, #0
 800e55c:	4618      	mov	r0, r3
 800e55e:	f002 ffeb 	bl	8011538 <ff_convert>
 800e562:	4603      	mov	r3, r0
 800e564:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800e566:	897b      	ldrh	r3, [r7, #10]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d002      	beq.n	800e572 <get_xdir_info+0x4e>
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	2bfe      	cmp	r3, #254	; 0xfe
 800e570:	d902      	bls.n	800e578 <get_xdir_info+0x54>
 800e572:	2300      	movs	r3, #0
 800e574:	617b      	str	r3, [r7, #20]
 800e576:	e015      	b.n	800e5a4 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	1c5a      	adds	r2, r3, #1
 800e57c:	617a      	str	r2, [r7, #20]
 800e57e:	897a      	ldrh	r2, [r7, #10]
 800e580:	b2d1      	uxtb	r1, r2
 800e582:	683a      	ldr	r2, [r7, #0]
 800e584:	4413      	add	r3, r2
 800e586:	460a      	mov	r2, r1
 800e588:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	3302      	adds	r3, #2
 800e58e:	613b      	str	r3, [r7, #16]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	3301      	adds	r3, #1
 800e594:	60fb      	str	r3, [r7, #12]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	3323      	adds	r3, #35	; 0x23
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	461a      	mov	r2, r3
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d3cb      	bcc.n	800e53c <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d106      	bne.n	800e5b8 <get_xdir_info+0x94>
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	1c5a      	adds	r2, r3, #1
 800e5ae:	617a      	str	r2, [r7, #20]
 800e5b0:	683a      	ldr	r2, [r7, #0]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	223f      	movs	r2, #63	; 0x3f
 800e5b6:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800e5b8:	683a      	ldr	r2, [r7, #0]
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	4413      	add	r3, r2
 800e5be:	331a      	adds	r3, #26
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	791a      	ldrb	r2, [r3, #4]
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	7b1b      	ldrb	r3, [r3, #12]
 800e5d6:	f003 0310 	and.w	r3, r3, #16
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d107      	bne.n	800e5ee <get_xdir_info+0xca>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	3338      	adds	r3, #56	; 0x38
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7fe f8f7 	bl	800c7d6 <ld_qword>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	e003      	b.n	800e5f6 <get_xdir_info+0xd2>
 800e5ee:	f04f 0200 	mov.w	r2, #0
 800e5f2:	f04f 0300 	mov.w	r3, #0
 800e5f6:	6839      	ldr	r1, [r7, #0]
 800e5f8:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	330c      	adds	r3, #12
 800e600:	4618      	mov	r0, r3
 800e602:	f7fe f8ad 	bl	800c760 <ld_word>
 800e606:	4603      	mov	r3, r0
 800e608:	461a      	mov	r2, r3
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	330e      	adds	r3, #14
 800e612:	4618      	mov	r0, r3
 800e614:	f7fe f8a4 	bl	800c760 <ld_word>
 800e618:	4603      	mov	r3, r0
 800e61a:	461a      	mov	r2, r3
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	811a      	strh	r2, [r3, #8]
}
 800e620:	bf00      	nop
 800e622:	3718      	adds	r7, #24
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800e628:	b590      	push	{r4, r7, lr}
 800e62a:	b087      	sub	sp, #28
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	695b      	ldr	r3, [r3, #20]
 800e636:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e640:	4619      	mov	r1, r3
 800e642:	4610      	mov	r0, r2
 800e644:	f7fe fc80 	bl	800cf48 <move_window>
 800e648:	4603      	mov	r3, r0
 800e64a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e64c:	7bfb      	ldrb	r3, [r7, #15]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d001      	beq.n	800e656 <load_xdir+0x2e>
 800e652:	7bfb      	ldrb	r3, [r7, #15]
 800e654:	e09f      	b.n	800e796 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	2b85      	cmp	r3, #133	; 0x85
 800e65e:	d001      	beq.n	800e664 <load_xdir+0x3c>
 800e660:	2302      	movs	r3, #2
 800e662:	e098      	b.n	800e796 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e668:	2220      	movs	r2, #32
 800e66a:	4619      	mov	r1, r3
 800e66c:	6938      	ldr	r0, [r7, #16]
 800e66e:	f7fe fa3c 	bl	800caea <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	3301      	adds	r3, #1
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	3301      	adds	r3, #1
 800e67a:	015b      	lsls	r3, r3, #5
 800e67c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	2b5f      	cmp	r3, #95	; 0x5f
 800e682:	d903      	bls.n	800e68c <load_xdir+0x64>
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e68a:	d901      	bls.n	800e690 <load_xdir+0x68>
 800e68c:	2302      	movs	r3, #2
 800e68e:	e082      	b.n	800e796 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800e690:	2100      	movs	r1, #0
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f7ff fb71 	bl	800dd7a <dir_next>
 800e698:	4603      	mov	r3, r0
 800e69a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e69c:	7bfb      	ldrb	r3, [r7, #15]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d001      	beq.n	800e6a6 <load_xdir+0x7e>
 800e6a2:	7bfb      	ldrb	r3, [r7, #15]
 800e6a4:	e077      	b.n	800e796 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	4610      	mov	r0, r2
 800e6b2:	f7fe fc49 	bl	800cf48 <move_window>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e6ba:	7bfb      	ldrb	r3, [r7, #15]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d001      	beq.n	800e6c4 <load_xdir+0x9c>
 800e6c0:	7bfb      	ldrb	r3, [r7, #15]
 800e6c2:	e068      	b.n	800e796 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	2bc0      	cmp	r3, #192	; 0xc0
 800e6cc:	d001      	beq.n	800e6d2 <load_xdir+0xaa>
 800e6ce:	2302      	movs	r3, #2
 800e6d0:	e061      	b.n	800e796 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	f103 0020 	add.w	r0, r3, #32
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6dc:	2220      	movs	r2, #32
 800e6de:	4619      	mov	r1, r3
 800e6e0:	f7fe fa03 	bl	800caea <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	3323      	adds	r3, #35	; 0x23
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	332c      	adds	r3, #44	; 0x2c
 800e6ec:	4a2c      	ldr	r2, [pc, #176]	; (800e7a0 <load_xdir+0x178>)
 800e6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e6f2:	08db      	lsrs	r3, r3, #3
 800e6f4:	015b      	lsls	r3, r3, #5
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d201      	bcs.n	800e700 <load_xdir+0xd8>
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	e04a      	b.n	800e796 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800e700:	2340      	movs	r3, #64	; 0x40
 800e702:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800e704:	2100      	movs	r1, #0
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f7ff fb37 	bl	800dd7a <dir_next>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e710:	7bfb      	ldrb	r3, [r7, #15]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d001      	beq.n	800e71a <load_xdir+0xf2>
 800e716:	7bfb      	ldrb	r3, [r7, #15]
 800e718:	e03d      	b.n	800e796 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681a      	ldr	r2, [r3, #0]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e722:	4619      	mov	r1, r3
 800e724:	4610      	mov	r0, r2
 800e726:	f7fe fc0f 	bl	800cf48 <move_window>
 800e72a:	4603      	mov	r3, r0
 800e72c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e72e:	7bfb      	ldrb	r3, [r7, #15]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d001      	beq.n	800e738 <load_xdir+0x110>
 800e734:	7bfb      	ldrb	r3, [r7, #15]
 800e736:	e02e      	b.n	800e796 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	2bc1      	cmp	r3, #193	; 0xc1
 800e740:	d001      	beq.n	800e746 <load_xdir+0x11e>
 800e742:	2302      	movs	r3, #2
 800e744:	e027      	b.n	800e796 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e74c:	d208      	bcs.n	800e760 <load_xdir+0x138>
 800e74e:	693a      	ldr	r2, [r7, #16]
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	18d0      	adds	r0, r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e758:	2220      	movs	r2, #32
 800e75a:	4619      	mov	r1, r3
 800e75c:	f7fe f9c5 	bl	800caea <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	3320      	adds	r3, #32
 800e764:	617b      	str	r3, [r7, #20]
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d3ca      	bcc.n	800e704 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e774:	d80e      	bhi.n	800e794 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800e776:	6938      	ldr	r0, [r7, #16]
 800e778:	f7ff fe6d 	bl	800e456 <xdir_sum>
 800e77c:	4603      	mov	r3, r0
 800e77e:	461c      	mov	r4, r3
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	3302      	adds	r3, #2
 800e784:	4618      	mov	r0, r3
 800e786:	f7fd ffeb 	bl	800c760 <ld_word>
 800e78a:	4603      	mov	r3, r0
 800e78c:	429c      	cmp	r4, r3
 800e78e:	d001      	beq.n	800e794 <load_xdir+0x16c>
 800e790:	2302      	movs	r3, #2
 800e792:	e000      	b.n	800e796 <load_xdir+0x16e>
	}
	return FR_OK;
 800e794:	2300      	movs	r3, #0
}
 800e796:	4618      	mov	r0, r3
 800e798:	371c      	adds	r7, #28
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd90      	pop	{r4, r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	88888889 	.word	0x88888889

0800e7a4 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800e7a4:	b5b0      	push	{r4, r5, r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800e7ae:	6839      	ldr	r1, [r7, #0]
 800e7b0:	6808      	ldr	r0, [r1, #0]
 800e7b2:	6879      	ldr	r1, [r7, #4]
 800e7b4:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800e7b6:	6839      	ldr	r1, [r7, #0]
 800e7b8:	6a08      	ldr	r0, [r1, #32]
 800e7ba:	6879      	ldr	r1, [r7, #4]
 800e7bc:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800e7be:	6839      	ldr	r1, [r7, #0]
 800e7c0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e7c2:	b2c8      	uxtb	r0, r1
 800e7c4:	6879      	ldr	r1, [r7, #4]
 800e7c6:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e7c8:	6839      	ldr	r1, [r7, #0]
 800e7ca:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e7cc:	4608      	mov	r0, r1
 800e7ce:	f04f 0100 	mov.w	r1, #0
 800e7d2:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 800e7d6:	f04f 0500 	mov.w	r5, #0
 800e7da:	ea00 0204 	and.w	r2, r0, r4
 800e7de:	ea01 0305 	and.w	r3, r1, r5
 800e7e2:	6879      	ldr	r1, [r7, #4]
 800e7e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7ff fa2b 	bl	800dc52 <dir_sdi>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e800:	7bfb      	ldrb	r3, [r7, #15]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d104      	bne.n	800e810 <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7ff ff0e 	bl	800e628 <load_xdir>
 800e80c:	4603      	mov	r3, r0
 800e80e:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800e810:	7bfb      	ldrb	r3, [r7, #15]
}
 800e812:	4618      	mov	r0, r3
 800e814:	3710      	adds	r7, #16
 800e816:	46bd      	mov	sp, r7
 800e818:	bdb0      	pop	{r4, r5, r7, pc}

0800e81a <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800e81a:	b590      	push	{r4, r7, lr}
 800e81c:	b087      	sub	sp, #28
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	695b      	ldr	r3, [r3, #20]
 800e828:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	1c9c      	adds	r4, r3, #2
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f7ff fe11 	bl	800e456 <xdir_sum>
 800e834:	4603      	mov	r3, r0
 800e836:	4619      	mov	r1, r3
 800e838:	4620      	mov	r0, r4
 800e83a:	f7fe f887 	bl	800c94c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	3301      	adds	r3, #1
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	3301      	adds	r3, #1
 800e846:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e84c:	4619      	mov	r1, r3
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f7ff f9ff 	bl	800dc52 <dir_sdi>
 800e854:	4603      	mov	r3, r0
 800e856:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e858:	e026      	b.n	800e8a8 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e862:	4619      	mov	r1, r3
 800e864:	4610      	mov	r0, r2
 800e866:	f7fe fb6f 	bl	800cf48 <move_window>
 800e86a:	4603      	mov	r3, r0
 800e86c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e86e:	7dfb      	ldrb	r3, [r7, #23]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d11d      	bne.n	800e8b0 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e878:	2220      	movs	r2, #32
 800e87a:	68f9      	ldr	r1, [r7, #12]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fe f934 	bl	800caea <mem_cpy>
		dp->obj.fs->wflag = 1;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2201      	movs	r2, #1
 800e888:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	3b01      	subs	r3, #1
 800e88e:	613b      	str	r3, [r7, #16]
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d00e      	beq.n	800e8b4 <store_xdir+0x9a>
		dirb += SZDIRE;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	3320      	adds	r3, #32
 800e89a:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800e89c:	2100      	movs	r1, #0
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f7ff fa6b 	bl	800dd7a <dir_next>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e8a8:	7dfb      	ldrb	r3, [r7, #23]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d0d5      	beq.n	800e85a <store_xdir+0x40>
 800e8ae:	e002      	b.n	800e8b6 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800e8b0:	bf00      	nop
 800e8b2:	e000      	b.n	800e8b6 <store_xdir+0x9c>
		if (--nent == 0) break;
 800e8b4:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800e8b6:	7dfb      	ldrb	r3, [r7, #23]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d002      	beq.n	800e8c2 <store_xdir+0xa8>
 800e8bc:	7dfb      	ldrb	r3, [r7, #23]
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d101      	bne.n	800e8c6 <store_xdir+0xac>
 800e8c2:	7dfb      	ldrb	r3, [r7, #23]
 800e8c4:	e000      	b.n	800e8c8 <store_xdir+0xae>
 800e8c6:	2302      	movs	r3, #2
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	371c      	adds	r7, #28
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd90      	pop	{r4, r7, pc}

0800e8d0 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800e8d0:	b590      	push	{r4, r7, lr}
 800e8d2:	b085      	sub	sp, #20
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800e8da:	2240      	movs	r2, #64	; 0x40
 800e8dc:	2100      	movs	r1, #0
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7fe f924 	bl	800cb2c <mem_set>
	dirb[XDIR_Type] = 0x85;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2285      	movs	r2, #133	; 0x85
 800e8e8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	3320      	adds	r3, #32
 800e8ee:	22c0      	movs	r2, #192	; 0xc0
 800e8f0:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	72bb      	strb	r3, [r7, #10]
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	72fb      	strb	r3, [r7, #11]
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	813b      	strh	r3, [r7, #8]
 800e8fe:	2340      	movs	r3, #64	; 0x40
 800e900:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	60fa      	str	r2, [r7, #12]
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	4413      	add	r3, r2
 800e90c:	22c1      	movs	r2, #193	; 0xc1
 800e90e:	701a      	strb	r2, [r3, #0]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	1c5a      	adds	r2, r3, #1
 800e914:	60fa      	str	r2, [r7, #12]
 800e916:	687a      	ldr	r2, [r7, #4]
 800e918:	4413      	add	r3, r2
 800e91a:	2200      	movs	r2, #0
 800e91c:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800e91e:	893b      	ldrh	r3, [r7, #8]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00b      	beq.n	800e93c <create_xdir+0x6c>
 800e924:	7abb      	ldrb	r3, [r7, #10]
 800e926:	005b      	lsls	r3, r3, #1
 800e928:	683a      	ldr	r2, [r7, #0]
 800e92a:	4413      	add	r3, r2
 800e92c:	881b      	ldrh	r3, [r3, #0]
 800e92e:	813b      	strh	r3, [r7, #8]
 800e930:	893b      	ldrh	r3, [r7, #8]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d002      	beq.n	800e93c <create_xdir+0x6c>
 800e936:	7abb      	ldrb	r3, [r7, #10]
 800e938:	3301      	adds	r3, #1
 800e93a:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	4413      	add	r3, r2
 800e942:	893a      	ldrh	r2, [r7, #8]
 800e944:	4611      	mov	r1, r2
 800e946:	4618      	mov	r0, r3
 800e948:	f7fe f800 	bl	800c94c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	3302      	adds	r3, #2
 800e950:	60fb      	str	r3, [r7, #12]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f003 031f 	and.w	r3, r3, #31
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d1e0      	bne.n	800e91e <create_xdir+0x4e>
		nb++;
 800e95c:	7afb      	ldrb	r3, [r7, #11]
 800e95e:	3301      	adds	r3, #1
 800e960:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800e962:	7abb      	ldrb	r3, [r7, #10]
 800e964:	005b      	lsls	r3, r3, #1
 800e966:	683a      	ldr	r2, [r7, #0]
 800e968:	4413      	add	r3, r2
 800e96a:	881b      	ldrh	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d1c8      	bne.n	800e902 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	3323      	adds	r3, #35	; 0x23
 800e974:	7aba      	ldrb	r2, [r7, #10]
 800e976:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	3301      	adds	r3, #1
 800e97c:	7afa      	ldrb	r2, [r7, #11]
 800e97e:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800e986:	6838      	ldr	r0, [r7, #0]
 800e988:	f7ff fd98 	bl	800e4bc <xname_sum>
 800e98c:	4603      	mov	r3, r0
 800e98e:	4619      	mov	r1, r3
 800e990:	4620      	mov	r0, r4
 800e992:	f7fd ffdb 	bl	800c94c <st_word>
}
 800e996:	bf00      	nop
 800e998:	3714      	adds	r7, #20
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd90      	pop	{r4, r7, pc}

0800e99e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b086      	sub	sp, #24
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e9a8:	2304      	movs	r3, #4
 800e9aa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e9b2:	23ff      	movs	r3, #255	; 0xff
 800e9b4:	757b      	strb	r3, [r7, #21]
 800e9b6:	23ff      	movs	r3, #255	; 0xff
 800e9b8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e9ba:	e09f      	b.n	800eafc <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	6938      	ldr	r0, [r7, #16]
 800e9c4:	f7fe fac0 	bl	800cf48 <move_window>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e9cc:	7dfb      	ldrb	r3, [r7, #23]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	f040 809a 	bne.w	800eb08 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e9dc:	7dbb      	ldrb	r3, [r7, #22]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d102      	bne.n	800e9e8 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e9e2:	2304      	movs	r3, #4
 800e9e4:	75fb      	strb	r3, [r7, #23]
 800e9e6:	e096      	b.n	800eb16 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	2b04      	cmp	r3, #4
 800e9ee:	d118      	bne.n	800ea22 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800e9f0:	7dbb      	ldrb	r3, [r7, #22]
 800e9f2:	2b85      	cmp	r3, #133	; 0x85
 800e9f4:	d179      	bne.n	800eaea <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7ff fe12 	bl	800e628 <load_xdir>
 800ea04:	4603      	mov	r3, r0
 800ea06:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800ea08:	7dfb      	ldrb	r3, [r7, #23]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d17e      	bne.n	800eb0c <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	695b      	ldr	r3, [r3, #20]
 800ea12:	3304      	adds	r3, #4
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ea20:	e074      	b.n	800eb0c <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea26:	330b      	adds	r3, #11
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea2e:	73fb      	strb	r3, [r7, #15]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	7bfa      	ldrb	r2, [r7, #15]
 800ea34:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ea36:	7dbb      	ldrb	r3, [r7, #22]
 800ea38:	2be5      	cmp	r3, #229	; 0xe5
 800ea3a:	d00e      	beq.n	800ea5a <dir_read+0xbc>
 800ea3c:	7dbb      	ldrb	r3, [r7, #22]
 800ea3e:	2b2e      	cmp	r3, #46	; 0x2e
 800ea40:	d00b      	beq.n	800ea5a <dir_read+0xbc>
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
 800ea44:	f023 0320 	bic.w	r3, r3, #32
 800ea48:	2b08      	cmp	r3, #8
 800ea4a:	bf0c      	ite	eq
 800ea4c:	2301      	moveq	r3, #1
 800ea4e:	2300      	movne	r3, #0
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	461a      	mov	r2, r3
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d002      	beq.n	800ea60 <dir_read+0xc2>
				ord = 0xFF;
 800ea5a:	23ff      	movs	r3, #255	; 0xff
 800ea5c:	757b      	strb	r3, [r7, #21]
 800ea5e:	e044      	b.n	800eaea <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ea60:	7bfb      	ldrb	r3, [r7, #15]
 800ea62:	2b0f      	cmp	r3, #15
 800ea64:	d12f      	bne.n	800eac6 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ea66:	7dbb      	ldrb	r3, [r7, #22]
 800ea68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00d      	beq.n	800ea8c <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea74:	7b5b      	ldrb	r3, [r3, #13]
 800ea76:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ea78:	7dbb      	ldrb	r3, [r7, #22]
 800ea7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea7e:	75bb      	strb	r3, [r7, #22]
 800ea80:	7dbb      	ldrb	r3, [r7, #22]
 800ea82:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ea8c:	7dba      	ldrb	r2, [r7, #22]
 800ea8e:	7d7b      	ldrb	r3, [r7, #21]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d115      	bne.n	800eac0 <dir_read+0x122>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea98:	330d      	adds	r3, #13
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	7d3a      	ldrb	r2, [r7, #20]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d10e      	bne.n	800eac0 <dir_read+0x122>
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	691a      	ldr	r2, [r3, #16]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaaa:	4619      	mov	r1, r3
 800eaac:	4610      	mov	r0, r2
 800eaae:	f7ff fb55 	bl	800e15c <pick_lfn>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d003      	beq.n	800eac0 <dir_read+0x122>
 800eab8:	7d7b      	ldrb	r3, [r7, #21]
 800eaba:	3b01      	subs	r3, #1
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	e000      	b.n	800eac2 <dir_read+0x124>
 800eac0:	23ff      	movs	r3, #255	; 0xff
 800eac2:	757b      	strb	r3, [r7, #21]
 800eac4:	e011      	b.n	800eaea <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800eac6:	7d7b      	ldrb	r3, [r7, #21]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d109      	bne.n	800eae0 <dir_read+0x142>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7ff fc9f 	bl	800e414 <sum_sfn>
 800ead6:	4603      	mov	r3, r0
 800ead8:	461a      	mov	r2, r3
 800eada:	7d3b      	ldrb	r3, [r7, #20]
 800eadc:	4293      	cmp	r3, r2
 800eade:	d017      	beq.n	800eb10 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f04f 32ff 	mov.w	r2, #4294967295
 800eae6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800eae8:	e012      	b.n	800eb10 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800eaea:	2100      	movs	r1, #0
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7ff f944 	bl	800dd7a <dir_next>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eaf6:	7dfb      	ldrb	r3, [r7, #23]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10b      	bne.n	800eb14 <dir_read+0x176>
	while (dp->sect) {
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	f47f af5b 	bne.w	800e9bc <dir_read+0x1e>
 800eb06:	e006      	b.n	800eb16 <dir_read+0x178>
		if (res != FR_OK) break;
 800eb08:	bf00      	nop
 800eb0a:	e004      	b.n	800eb16 <dir_read+0x178>
					break;
 800eb0c:	bf00      	nop
 800eb0e:	e002      	b.n	800eb16 <dir_read+0x178>
					break;
 800eb10:	bf00      	nop
 800eb12:	e000      	b.n	800eb16 <dir_read+0x178>
		if (res != FR_OK) break;
 800eb14:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800eb16:	7dfb      	ldrb	r3, [r7, #23]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d002      	beq.n	800eb22 <dir_read+0x184>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800eb22:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3718      	adds	r7, #24
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800eb2c:	b590      	push	{r4, r7, lr}
 800eb2e:	b089      	sub	sp, #36	; 0x24
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eb3a:	2100      	movs	r1, #0
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f7ff f888 	bl	800dc52 <dir_sdi>
 800eb42:	4603      	mov	r3, r0
 800eb44:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800eb46:	7ffb      	ldrb	r3, [r7, #31]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d001      	beq.n	800eb50 <dir_find+0x24>
 800eb4c:	7ffb      	ldrb	r3, [r7, #31]
 800eb4e:	e112      	b.n	800ed76 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	2b04      	cmp	r3, #4
 800eb56:	d164      	bne.n	800ec22 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	691b      	ldr	r3, [r3, #16]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7ff fcad 	bl	800e4bc <xname_sum>
 800eb62:	4603      	mov	r3, r0
 800eb64:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800eb66:	e04f      	b.n	800ec08 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	695b      	ldr	r3, [r3, #20]
 800eb6c:	3324      	adds	r3, #36	; 0x24
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7fd fdf6 	bl	800c760 <ld_word>
 800eb74:	4603      	mov	r3, r0
 800eb76:	461a      	mov	r2, r3
 800eb78:	893b      	ldrh	r3, [r7, #8]
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d000      	beq.n	800eb80 <dir_find+0x54>
 800eb7e:	e043      	b.n	800ec08 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	695b      	ldr	r3, [r3, #20]
 800eb84:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800eb88:	76fb      	strb	r3, [r7, #27]
 800eb8a:	2340      	movs	r3, #64	; 0x40
 800eb8c:	617b      	str	r3, [r7, #20]
 800eb8e:	2300      	movs	r3, #0
 800eb90:	613b      	str	r3, [r7, #16]
 800eb92:	e029      	b.n	800ebe8 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	f003 031f 	and.w	r3, r3, #31
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d102      	bne.n	800eba4 <dir_find+0x78>
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	3302      	adds	r3, #2
 800eba2:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	695a      	ldr	r2, [r3, #20]
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	4413      	add	r3, r2
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fd fdd7 	bl	800c760 <ld_word>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f002 fcfb 	bl	80115b0 <ff_wtoupper>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	461c      	mov	r4, r3
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	691a      	ldr	r2, [r3, #16]
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	005b      	lsls	r3, r3, #1
 800ebc6:	4413      	add	r3, r2
 800ebc8:	881b      	ldrh	r3, [r3, #0]
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f002 fcf0 	bl	80115b0 <ff_wtoupper>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	429c      	cmp	r4, r3
 800ebd4:	d10c      	bne.n	800ebf0 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ebd6:	7efb      	ldrb	r3, [r7, #27]
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	76fb      	strb	r3, [r7, #27]
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	3302      	adds	r3, #2
 800ebe0:	617b      	str	r3, [r7, #20]
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	613b      	str	r3, [r7, #16]
 800ebe8:	7efb      	ldrb	r3, [r7, #27]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1d2      	bne.n	800eb94 <dir_find+0x68>
 800ebee:	e000      	b.n	800ebf2 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ebf0:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ebf2:	7efb      	ldrb	r3, [r7, #27]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d107      	bne.n	800ec08 <dir_find+0xdc>
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	691a      	ldr	r2, [r3, #16]
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	005b      	lsls	r3, r3, #1
 800ec00:	4413      	add	r3, r2
 800ec02:	881b      	ldrh	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d009      	beq.n	800ec1c <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800ec08:	2100      	movs	r1, #0
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f7ff fec7 	bl	800e99e <dir_read>
 800ec10:	4603      	mov	r3, r0
 800ec12:	77fb      	strb	r3, [r7, #31]
 800ec14:	7ffb      	ldrb	r3, [r7, #31]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d0a6      	beq.n	800eb68 <dir_find+0x3c>
 800ec1a:	e000      	b.n	800ec1e <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ec1c:	bf00      	nop
		}
		return res;
 800ec1e:	7ffb      	ldrb	r3, [r7, #31]
 800ec20:	e0a9      	b.n	800ed76 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ec22:	23ff      	movs	r3, #255	; 0xff
 800ec24:	773b      	strb	r3, [r7, #28]
 800ec26:	7f3b      	ldrb	r3, [r7, #28]
 800ec28:	777b      	strb	r3, [r7, #29]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec30:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec36:	4619      	mov	r1, r3
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f7fe f985 	bl	800cf48 <move_window>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800ec42:	7ffb      	ldrb	r3, [r7, #31]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f040 8090 	bne.w	800ed6a <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ec52:	7fbb      	ldrb	r3, [r7, #30]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d102      	bne.n	800ec5e <dir_find+0x132>
 800ec58:	2304      	movs	r3, #4
 800ec5a:	77fb      	strb	r3, [r7, #31]
 800ec5c:	e08a      	b.n	800ed74 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec62:	330b      	adds	r3, #11
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec6a:	72fb      	strb	r3, [r7, #11]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	7afa      	ldrb	r2, [r7, #11]
 800ec70:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ec72:	7fbb      	ldrb	r3, [r7, #30]
 800ec74:	2be5      	cmp	r3, #229	; 0xe5
 800ec76:	d007      	beq.n	800ec88 <dir_find+0x15c>
 800ec78:	7afb      	ldrb	r3, [r7, #11]
 800ec7a:	f003 0308 	and.w	r3, r3, #8
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d009      	beq.n	800ec96 <dir_find+0x16a>
 800ec82:	7afb      	ldrb	r3, [r7, #11]
 800ec84:	2b0f      	cmp	r3, #15
 800ec86:	d006      	beq.n	800ec96 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ec88:	23ff      	movs	r3, #255	; 0xff
 800ec8a:	777b      	strb	r3, [r7, #29]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec92:	64da      	str	r2, [r3, #76]	; 0x4c
 800ec94:	e05e      	b.n	800ed54 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ec96:	7afb      	ldrb	r3, [r7, #11]
 800ec98:	2b0f      	cmp	r3, #15
 800ec9a:	d136      	bne.n	800ed0a <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800eca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d154      	bne.n	800ed54 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ecaa:	7fbb      	ldrb	r3, [r7, #30]
 800ecac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d00d      	beq.n	800ecd0 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecb8:	7b5b      	ldrb	r3, [r3, #13]
 800ecba:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ecbc:	7fbb      	ldrb	r3, [r7, #30]
 800ecbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecc2:	77bb      	strb	r3, [r7, #30]
 800ecc4:	7fbb      	ldrb	r3, [r7, #30]
 800ecc6:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ecd0:	7fba      	ldrb	r2, [r7, #30]
 800ecd2:	7f7b      	ldrb	r3, [r7, #29]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d115      	bne.n	800ed04 <dir_find+0x1d8>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecdc:	330d      	adds	r3, #13
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	7f3a      	ldrb	r2, [r7, #28]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d10e      	bne.n	800ed04 <dir_find+0x1d8>
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	691a      	ldr	r2, [r3, #16]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecee:	4619      	mov	r1, r3
 800ecf0:	4610      	mov	r0, r2
 800ecf2:	f7ff f9c3 	bl	800e07c <cmp_lfn>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d003      	beq.n	800ed04 <dir_find+0x1d8>
 800ecfc:	7f7b      	ldrb	r3, [r7, #29]
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	e000      	b.n	800ed06 <dir_find+0x1da>
 800ed04:	23ff      	movs	r3, #255	; 0xff
 800ed06:	777b      	strb	r3, [r7, #29]
 800ed08:	e024      	b.n	800ed54 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ed0a:	7f7b      	ldrb	r3, [r7, #29]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d109      	bne.n	800ed24 <dir_find+0x1f8>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7ff fb7d 	bl	800e414 <sum_sfn>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	7f3b      	ldrb	r3, [r7, #28]
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d024      	beq.n	800ed6e <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ed2a:	f003 0301 	and.w	r3, r3, #1
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d10a      	bne.n	800ed48 <dir_find+0x21c>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	3340      	adds	r3, #64	; 0x40
 800ed3a:	220b      	movs	r2, #11
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	f7fd ff10 	bl	800cb62 <mem_cmp>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d014      	beq.n	800ed72 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ed48:	23ff      	movs	r3, #255	; 0xff
 800ed4a:	777b      	strb	r3, [r7, #29]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed52:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ed54:	2100      	movs	r1, #0
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f7ff f80f 	bl	800dd7a <dir_next>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800ed60:	7ffb      	ldrb	r3, [r7, #31]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f43f af65 	beq.w	800ec32 <dir_find+0x106>
 800ed68:	e004      	b.n	800ed74 <dir_find+0x248>
		if (res != FR_OK) break;
 800ed6a:	bf00      	nop
 800ed6c:	e002      	b.n	800ed74 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ed6e:	bf00      	nop
 800ed70:	e000      	b.n	800ed74 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ed72:	bf00      	nop

	return res;
 800ed74:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3724      	adds	r7, #36	; 0x24
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd90      	pop	{r4, r7, pc}
	...

0800ed80 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ed80:	b5b0      	push	{r4, r5, r7, lr}
 800ed82:	b0a0      	sub	sp, #128	; 0x80
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ed94:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d001      	beq.n	800eda0 <dir_register+0x20>
 800ed9c:	2306      	movs	r3, #6
 800ed9e:	e18c      	b.n	800f0ba <dir_register+0x33a>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800eda0:	2300      	movs	r3, #0
 800eda2:	677b      	str	r3, [r7, #116]	; 0x74
 800eda4:	e002      	b.n	800edac <dir_register+0x2c>
 800eda6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eda8:	3301      	adds	r3, #1
 800edaa:	677b      	str	r3, [r7, #116]	; 0x74
 800edac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edae:	691a      	ldr	r2, [r3, #16]
 800edb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edb2:	005b      	lsls	r3, r3, #1
 800edb4:	4413      	add	r3, r2
 800edb6:	881b      	ldrh	r3, [r3, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d1f4      	bne.n	800eda6 <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800edbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	2b04      	cmp	r3, #4
 800edc2:	f040 80a2 	bne.w	800ef0a <dir_register+0x18a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800edc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800edc8:	330e      	adds	r3, #14
 800edca:	4abe      	ldr	r2, [pc, #760]	; (800f0c4 <dir_register+0x344>)
 800edcc:	fba2 2303 	umull	r2, r3, r2, r3
 800edd0:	08db      	lsrs	r3, r3, #3
 800edd2:	3302      	adds	r3, #2
 800edd4:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800edd6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f7ff f8b4 	bl	800df46 <dir_alloc>
 800edde:	4603      	mov	r3, r0
 800ede0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800ede4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <dir_register+0x72>
 800edec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800edf0:	e163      	b.n	800f0ba <dir_register+0x33a>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800edf8:	3b01      	subs	r3, #1
 800edfa:	015b      	lsls	r3, r3, #5
 800edfc:	1ad2      	subs	r2, r2, r3
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	689b      	ldr	r3, [r3, #8]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d075      	beq.n	800eef6 <dir_register+0x176>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	79db      	ldrb	r3, [r3, #7]
 800ee0e:	f003 0304 	and.w	r3, r3, #4
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d06f      	beq.n	800eef6 <dir_register+0x176>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ee1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee1e:	895b      	ldrh	r3, [r3, #10]
 800ee20:	461a      	mov	r2, r3
 800ee22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee24:	899b      	ldrh	r3, [r3, #12]
 800ee26:	fb03 f302 	mul.w	r3, r3, r2
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	f04f 0300 	mov.w	r3, #0
 800ee30:	1884      	adds	r4, r0, r2
 800ee32:	eb41 0503 	adc.w	r5, r1, r3
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fe fcae 	bl	800d7a0 <fill_first_frag>
 800ee44:	4603      	mov	r3, r0
 800ee46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ee4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d002      	beq.n	800ee58 <dir_register+0xd8>
 800ee52:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee56:	e130      	b.n	800f0ba <dir_register+0x33a>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee62:	4619      	mov	r1, r3
 800ee64:	f7fe fccb 	bl	800d7fe <fill_last_frag>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ee6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d002      	beq.n	800ee7c <dir_register+0xfc>
 800ee76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee7a:	e11e      	b.n	800f0ba <dir_register+0x33a>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	f107 0308 	add.w	r3, r7, #8
 800ee82:	4611      	mov	r1, r2
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7ff fc8d 	bl	800e7a4 <load_obj_dir>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ee90:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d002      	beq.n	800ee9e <dir_register+0x11e>
 800ee98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee9c:	e10d      	b.n	800f0ba <dir_register+0x33a>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800ee9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eea0:	695b      	ldr	r3, [r3, #20]
 800eea2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eeac:	4608      	mov	r0, r1
 800eeae:	f7fd fd94 	bl	800c9da <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800eeb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eeb4:	695b      	ldr	r3, [r3, #20]
 800eeb6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eec0:	4608      	mov	r0, r1
 800eec2:	f7fd fd8a 	bl	800c9da <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	79da      	ldrb	r2, [r3, #7]
 800eeca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eecc:	695b      	ldr	r3, [r3, #20]
 800eece:	3321      	adds	r3, #33	; 0x21
 800eed0:	f042 0201 	orr.w	r2, r2, #1
 800eed4:	b2d2      	uxtb	r2, r2
 800eed6:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800eed8:	f107 0308 	add.w	r3, r7, #8
 800eedc:	4618      	mov	r0, r3
 800eede:	f7ff fc9c 	bl	800e81a <store_xdir>
 800eee2:	4603      	mov	r3, r0
 800eee4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800eee8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d002      	beq.n	800eef6 <dir_register+0x176>
 800eef0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eef4:	e0e1      	b.n	800f0ba <dir_register+0x33a>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800eef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eef8:	695a      	ldr	r2, [r3, #20]
 800eefa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eefc:	691b      	ldr	r3, [r3, #16]
 800eefe:	4619      	mov	r1, r3
 800ef00:	4610      	mov	r0, r2
 800ef02:	f7ff fce5 	bl	800e8d0 <create_xdir>
		return FR_OK;
 800ef06:	2300      	movs	r3, #0
 800ef08:	e0d7      	b.n	800f0ba <dir_register+0x33a>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ef10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ef14:	220c      	movs	r2, #12
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fd fde7 	bl	800caea <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ef1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef20:	f003 0301 	and.w	r3, r3, #1
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d033      	beq.n	800ef90 <dir_register+0x210>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2240      	movs	r2, #64	; 0x40
 800ef2c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800ef30:	2301      	movs	r3, #1
 800ef32:	67bb      	str	r3, [r7, #120]	; 0x78
 800ef34:	e016      	b.n	800ef64 <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800ef3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef3e:	691a      	ldr	r2, [r3, #16]
 800ef40:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800ef44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef46:	f7ff f9d5 	bl	800e2f4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7ff fdee 	bl	800eb2c <dir_find>
 800ef50:	4603      	mov	r3, r0
 800ef52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800ef56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d106      	bne.n	800ef6c <dir_register+0x1ec>
		for (n = 1; n < 100; n++) {
 800ef5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef60:	3301      	adds	r3, #1
 800ef62:	67bb      	str	r3, [r7, #120]	; 0x78
 800ef64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef66:	2b63      	cmp	r3, #99	; 0x63
 800ef68:	d9e5      	bls.n	800ef36 <dir_register+0x1b6>
 800ef6a:	e000      	b.n	800ef6e <dir_register+0x1ee>
			if (res != FR_OK) break;
 800ef6c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ef6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef70:	2b64      	cmp	r3, #100	; 0x64
 800ef72:	d101      	bne.n	800ef78 <dir_register+0x1f8>
 800ef74:	2307      	movs	r3, #7
 800ef76:	e0a0      	b.n	800f0ba <dir_register+0x33a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ef78:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef7c:	2b04      	cmp	r3, #4
 800ef7e:	d002      	beq.n	800ef86 <dir_register+0x206>
 800ef80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef84:	e099      	b.n	800f0ba <dir_register+0x33a>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ef86:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ef90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef94:	f003 0302 	and.w	r3, r3, #2
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d007      	beq.n	800efac <dir_register+0x22c>
 800ef9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef9e:	330c      	adds	r3, #12
 800efa0:	4a49      	ldr	r2, [pc, #292]	; (800f0c8 <dir_register+0x348>)
 800efa2:	fba2 2303 	umull	r2, r3, r2, r3
 800efa6:	089b      	lsrs	r3, r3, #2
 800efa8:	3301      	adds	r3, #1
 800efaa:	e000      	b.n	800efae <dir_register+0x22e>
 800efac:	2301      	movs	r3, #1
 800efae:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800efb0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f7fe ffc7 	bl	800df46 <dir_alloc>
 800efb8:	4603      	mov	r3, r0
 800efba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800efbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d14a      	bne.n	800f05c <dir_register+0x2dc>
 800efc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efc8:	3b01      	subs	r3, #1
 800efca:	673b      	str	r3, [r7, #112]	; 0x70
 800efcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d044      	beq.n	800f05c <dir_register+0x2dc>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efd8:	015b      	lsls	r3, r3, #5
 800efda:	1ad3      	subs	r3, r2, r3
 800efdc:	4619      	mov	r1, r3
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f7fe fe37 	bl	800dc52 <dir_sdi>
 800efe4:	4603      	mov	r3, r0
 800efe6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800efea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d134      	bne.n	800f05c <dir_register+0x2dc>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	3340      	adds	r3, #64	; 0x40
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7ff fa0c 	bl	800e414 <sum_sfn>
 800effc:	4603      	mov	r3, r0
 800effe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f006:	4619      	mov	r1, r3
 800f008:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f00a:	f7fd ff9d 	bl	800cf48 <move_window>
 800f00e:	4603      	mov	r3, r0
 800f010:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800f014:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d11e      	bne.n	800f05a <dir_register+0x2da>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f01c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f01e:	6918      	ldr	r0, [r3, #16]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800f024:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f026:	b2da      	uxtb	r2, r3
 800f028:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f02c:	f7ff f8fa 	bl	800e224 <put_lfn>
				fs->wflag = 1;
 800f030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f032:	2201      	movs	r2, #1
 800f034:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f036:	2100      	movs	r1, #0
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f7fe fe9e 	bl	800dd7a <dir_next>
 800f03e:	4603      	mov	r3, r0
 800f040:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800f044:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d107      	bne.n	800f05c <dir_register+0x2dc>
 800f04c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f04e:	3b01      	subs	r3, #1
 800f050:	673b      	str	r3, [r7, #112]	; 0x70
 800f052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f054:	2b00      	cmp	r3, #0
 800f056:	d1d4      	bne.n	800f002 <dir_register+0x282>
 800f058:	e000      	b.n	800f05c <dir_register+0x2dc>
				if (res != FR_OK) break;
 800f05a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f05c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f060:	2b00      	cmp	r3, #0
 800f062:	d128      	bne.n	800f0b6 <dir_register+0x336>
		res = move_window(fs, dp->sect);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f068:	4619      	mov	r1, r3
 800f06a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f06c:	f7fd ff6c 	bl	800cf48 <move_window>
 800f070:	4603      	mov	r3, r0
 800f072:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800f076:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d11b      	bne.n	800f0b6 <dir_register+0x336>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f082:	2220      	movs	r2, #32
 800f084:	2100      	movs	r1, #0
 800f086:	4618      	mov	r0, r3
 800f088:	f7fd fd50 	bl	800cb2c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	3340      	adds	r3, #64	; 0x40
 800f094:	220b      	movs	r2, #11
 800f096:	4619      	mov	r1, r3
 800f098:	f7fd fd27 	bl	800caea <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0a6:	330c      	adds	r3, #12
 800f0a8:	f002 0218 	and.w	r2, r2, #24
 800f0ac:	b2d2      	uxtb	r2, r2
 800f0ae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f0b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f0b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3780      	adds	r7, #128	; 0x80
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bdb0      	pop	{r4, r5, r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	88888889 	.word	0x88888889
 800f0c8:	4ec4ec4f 	.word	0x4ec4ec4f

0800f0cc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b088      	sub	sp, #32
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	f000 80d8 	beq.w	800f29c <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	2b04      	cmp	r3, #4
 800f0f2:	d106      	bne.n	800f102 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	695b      	ldr	r3, [r3, #20]
 800f0f8:	6839      	ldr	r1, [r7, #0]
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff fa12 	bl	800e524 <get_xdir_info>
		return;
 800f100:	e0cd      	b.n	800f29e <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f10a:	d032      	beq.n	800f172 <get_fileinfo+0xa6>
			i = j = 0;
 800f10c:	2300      	movs	r3, #0
 800f10e:	61bb      	str	r3, [r7, #24]
 800f110:	69bb      	ldr	r3, [r7, #24]
 800f112:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f114:	e01b      	b.n	800f14e <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800f116:	89fb      	ldrh	r3, [r7, #14]
 800f118:	2100      	movs	r1, #0
 800f11a:	4618      	mov	r0, r3
 800f11c:	f002 fa0c 	bl	8011538 <ff_convert>
 800f120:	4603      	mov	r3, r0
 800f122:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800f124:	89fb      	ldrh	r3, [r7, #14]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d102      	bne.n	800f130 <get_fileinfo+0x64>
 800f12a:	2300      	movs	r3, #0
 800f12c:	61fb      	str	r3, [r7, #28]
 800f12e:	e01a      	b.n	800f166 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	2bfe      	cmp	r3, #254	; 0xfe
 800f134:	d902      	bls.n	800f13c <get_fileinfo+0x70>
 800f136:	2300      	movs	r3, #0
 800f138:	61fb      	str	r3, [r7, #28]
 800f13a:	e014      	b.n	800f166 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	1c5a      	adds	r2, r3, #1
 800f140:	61fa      	str	r2, [r7, #28]
 800f142:	89fa      	ldrh	r2, [r7, #14]
 800f144:	b2d1      	uxtb	r1, r2
 800f146:	683a      	ldr	r2, [r7, #0]
 800f148:	4413      	add	r3, r2
 800f14a:	460a      	mov	r2, r1
 800f14c:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	691a      	ldr	r2, [r3, #16]
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	1c59      	adds	r1, r3, #1
 800f156:	61b9      	str	r1, [r7, #24]
 800f158:	005b      	lsls	r3, r3, #1
 800f15a:	4413      	add	r3, r2
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	81fb      	strh	r3, [r7, #14]
 800f160:	89fb      	ldrh	r3, [r7, #14]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1d7      	bne.n	800f116 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800f166:	683a      	ldr	r2, [r7, #0]
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	4413      	add	r3, r2
 800f16c:	331a      	adds	r3, #26
 800f16e:	2200      	movs	r2, #0
 800f170:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800f172:	2300      	movs	r3, #0
 800f174:	61bb      	str	r3, [r7, #24]
 800f176:	69bb      	ldr	r3, [r7, #24]
 800f178:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	4413      	add	r3, r2
 800f180:	331a      	adds	r3, #26
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800f186:	e04c      	b.n	800f222 <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	1c59      	adds	r1, r3, #1
 800f190:	61f9      	str	r1, [r7, #28]
 800f192:	4413      	add	r3, r2
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f198:	7dfb      	ldrb	r3, [r7, #23]
 800f19a:	2b20      	cmp	r3, #32
 800f19c:	d100      	bne.n	800f1a0 <get_fileinfo+0xd4>
 800f19e:	e040      	b.n	800f222 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f1a0:	7dfb      	ldrb	r3, [r7, #23]
 800f1a2:	2b05      	cmp	r3, #5
 800f1a4:	d101      	bne.n	800f1aa <get_fileinfo+0xde>
 800f1a6:	23e5      	movs	r3, #229	; 0xe5
 800f1a8:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	2b09      	cmp	r3, #9
 800f1ae:	d10f      	bne.n	800f1d0 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800f1b0:	89bb      	ldrh	r3, [r7, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d105      	bne.n	800f1c2 <get_fileinfo+0xf6>
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	4413      	add	r3, r2
 800f1bc:	331a      	adds	r3, #26
 800f1be:	222e      	movs	r2, #46	; 0x2e
 800f1c0:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	1c5a      	adds	r2, r3, #1
 800f1c6:	61ba      	str	r2, [r7, #24]
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	4413      	add	r3, r2
 800f1cc:	222e      	movs	r2, #46	; 0x2e
 800f1ce:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	330d      	adds	r3, #13
 800f1d8:	7dfa      	ldrb	r2, [r7, #23]
 800f1da:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800f1dc:	89bb      	ldrh	r3, [r7, #12]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d11c      	bne.n	800f21c <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800f1e2:	7dfb      	ldrb	r3, [r7, #23]
 800f1e4:	2b40      	cmp	r3, #64	; 0x40
 800f1e6:	d913      	bls.n	800f210 <get_fileinfo+0x144>
 800f1e8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ea:	2b5a      	cmp	r3, #90	; 0x5a
 800f1ec:	d810      	bhi.n	800f210 <get_fileinfo+0x144>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1f2:	330c      	adds	r3, #12
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	2b08      	cmp	r3, #8
 800f1fc:	d901      	bls.n	800f202 <get_fileinfo+0x136>
 800f1fe:	2310      	movs	r3, #16
 800f200:	e000      	b.n	800f204 <get_fileinfo+0x138>
 800f202:	2308      	movs	r3, #8
 800f204:	4013      	ands	r3, r2
 800f206:	2b00      	cmp	r3, #0
 800f208:	d002      	beq.n	800f210 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800f20a:	7dfb      	ldrb	r3, [r7, #23]
 800f20c:	3320      	adds	r3, #32
 800f20e:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800f210:	683a      	ldr	r2, [r7, #0]
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	4413      	add	r3, r2
 800f216:	331a      	adds	r3, #26
 800f218:	7dfa      	ldrb	r2, [r7, #23]
 800f21a:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800f21c:	69bb      	ldr	r3, [r7, #24]
 800f21e:	3301      	adds	r3, #1
 800f220:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800f222:	69fb      	ldr	r3, [r7, #28]
 800f224:	2b0a      	cmp	r3, #10
 800f226:	d9af      	bls.n	800f188 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800f228:	89bb      	ldrh	r3, [r7, #12]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d10d      	bne.n	800f24a <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800f22e:	683a      	ldr	r2, [r7, #0]
 800f230:	69bb      	ldr	r3, [r7, #24]
 800f232:	4413      	add	r3, r2
 800f234:	331a      	adds	r3, #26
 800f236:	2200      	movs	r2, #0
 800f238:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f23e:	330c      	adds	r3, #12
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <get_fileinfo+0x17e>
 800f246:	2300      	movs	r3, #0
 800f248:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800f24a:	683a      	ldr	r2, [r7, #0]
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	4413      	add	r3, r2
 800f250:	330d      	adds	r3, #13
 800f252:	2200      	movs	r2, #0
 800f254:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f25a:	7ada      	ldrb	r2, [r3, #11]
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f264:	331c      	adds	r3, #28
 800f266:	4618      	mov	r0, r3
 800f268:	f7fd fa92 	bl	800c790 <ld_dword>
 800f26c:	4603      	mov	r3, r0
 800f26e:	461a      	mov	r2, r3
 800f270:	f04f 0300 	mov.w	r3, #0
 800f274:	6839      	ldr	r1, [r7, #0]
 800f276:	e9c1 2300 	strd	r2, r3, [r1]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f27e:	3316      	adds	r3, #22
 800f280:	4618      	mov	r0, r3
 800f282:	f7fd fa85 	bl	800c790 <ld_dword>
 800f286:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	815a      	strh	r2, [r3, #10]
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	0c1b      	lsrs	r3, r3, #16
 800f294:	b29a      	uxth	r2, r3
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	811a      	strh	r2, [r3, #8]
 800f29a:	e000      	b.n	800f29e <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f29c:	bf00      	nop
}
 800f29e:	3720      	adds	r7, #32
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b08a      	sub	sp, #40	; 0x28
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	613b      	str	r3, [r7, #16]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	60fb      	str	r3, [r7, #12]
 800f2bc:	2300      	movs	r3, #0
 800f2be:	617b      	str	r3, [r7, #20]
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f2c4:	69bb      	ldr	r3, [r7, #24]
 800f2c6:	1c5a      	adds	r2, r3, #1
 800f2c8:	61ba      	str	r2, [r7, #24]
 800f2ca:	693a      	ldr	r2, [r7, #16]
 800f2cc:	4413      	add	r3, r2
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f2d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2d4:	2b1f      	cmp	r3, #31
 800f2d6:	d940      	bls.n	800f35a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f2d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2da:	2b2f      	cmp	r3, #47	; 0x2f
 800f2dc:	d006      	beq.n	800f2ec <create_name+0x48>
 800f2de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2e0:	2b5c      	cmp	r3, #92	; 0x5c
 800f2e2:	d110      	bne.n	800f306 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f2e4:	e002      	b.n	800f2ec <create_name+0x48>
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	61bb      	str	r3, [r7, #24]
 800f2ec:	693a      	ldr	r2, [r7, #16]
 800f2ee:	69bb      	ldr	r3, [r7, #24]
 800f2f0:	4413      	add	r3, r2
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	2b2f      	cmp	r3, #47	; 0x2f
 800f2f6:	d0f6      	beq.n	800f2e6 <create_name+0x42>
 800f2f8:	693a      	ldr	r2, [r7, #16]
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	2b5c      	cmp	r3, #92	; 0x5c
 800f302:	d0f0      	beq.n	800f2e6 <create_name+0x42>
			break;
 800f304:	e02a      	b.n	800f35c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	2bfe      	cmp	r3, #254	; 0xfe
 800f30a:	d901      	bls.n	800f310 <create_name+0x6c>
 800f30c:	2306      	movs	r3, #6
 800f30e:	e177      	b.n	800f600 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f312:	b2db      	uxtb	r3, r3
 800f314:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f318:	2101      	movs	r1, #1
 800f31a:	4618      	mov	r0, r3
 800f31c:	f002 f90c 	bl	8011538 <ff_convert>
 800f320:	4603      	mov	r3, r0
 800f322:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f326:	2b00      	cmp	r3, #0
 800f328:	d101      	bne.n	800f32e <create_name+0x8a>
 800f32a:	2306      	movs	r3, #6
 800f32c:	e168      	b.n	800f600 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f32e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f330:	2b7f      	cmp	r3, #127	; 0x7f
 800f332:	d809      	bhi.n	800f348 <create_name+0xa4>
 800f334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f336:	4619      	mov	r1, r3
 800f338:	48b3      	ldr	r0, [pc, #716]	; (800f608 <create_name+0x364>)
 800f33a:	f7fd fc39 	bl	800cbb0 <chk_chr>
 800f33e:	4603      	mov	r3, r0
 800f340:	2b00      	cmp	r3, #0
 800f342:	d001      	beq.n	800f348 <create_name+0xa4>
 800f344:	2306      	movs	r3, #6
 800f346:	e15b      	b.n	800f600 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	1c5a      	adds	r2, r3, #1
 800f34c:	617a      	str	r2, [r7, #20]
 800f34e:	005b      	lsls	r3, r3, #1
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	4413      	add	r3, r2
 800f354:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f356:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f358:	e7b4      	b.n	800f2c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f35a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f35c:	693a      	ldr	r2, [r7, #16]
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	441a      	add	r2, r3
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f368:	2b1f      	cmp	r3, #31
 800f36a:	d801      	bhi.n	800f370 <create_name+0xcc>
 800f36c:	2304      	movs	r3, #4
 800f36e:	e000      	b.n	800f372 <create_name+0xce>
 800f370:	2300      	movs	r3, #0
 800f372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f376:	e011      	b.n	800f39c <create_name+0xf8>
		w = lfn[di - 1];
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f37e:	3b01      	subs	r3, #1
 800f380:	005b      	lsls	r3, r3, #1
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	4413      	add	r3, r2
 800f386:	881b      	ldrh	r3, [r3, #0]
 800f388:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f38a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f38c:	2b20      	cmp	r3, #32
 800f38e:	d002      	beq.n	800f396 <create_name+0xf2>
 800f390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f392:	2b2e      	cmp	r3, #46	; 0x2e
 800f394:	d106      	bne.n	800f3a4 <create_name+0x100>
		di--;
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	3b01      	subs	r3, #1
 800f39a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d1ea      	bne.n	800f378 <create_name+0xd4>
 800f3a2:	e000      	b.n	800f3a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f3a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	005b      	lsls	r3, r3, #1
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d101      	bne.n	800f3bc <create_name+0x118>
 800f3b8:	2306      	movs	r3, #6
 800f3ba:	e121      	b.n	800f600 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	3340      	adds	r3, #64	; 0x40
 800f3c0:	220b      	movs	r2, #11
 800f3c2:	2120      	movs	r1, #32
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fd fbb1 	bl	800cb2c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	61bb      	str	r3, [r7, #24]
 800f3ce:	e002      	b.n	800f3d6 <create_name+0x132>
 800f3d0:	69bb      	ldr	r3, [r7, #24]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	61bb      	str	r3, [r7, #24]
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	005b      	lsls	r3, r3, #1
 800f3da:	68fa      	ldr	r2, [r7, #12]
 800f3dc:	4413      	add	r3, r2
 800f3de:	881b      	ldrh	r3, [r3, #0]
 800f3e0:	2b20      	cmp	r3, #32
 800f3e2:	d0f5      	beq.n	800f3d0 <create_name+0x12c>
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	005b      	lsls	r3, r3, #1
 800f3e8:	68fa      	ldr	r2, [r7, #12]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	881b      	ldrh	r3, [r3, #0]
 800f3ee:	2b2e      	cmp	r3, #46	; 0x2e
 800f3f0:	d0ee      	beq.n	800f3d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d009      	beq.n	800f40c <create_name+0x168>
 800f3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3fc:	f043 0303 	orr.w	r3, r3, #3
 800f400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f404:	e002      	b.n	800f40c <create_name+0x168>
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	3b01      	subs	r3, #1
 800f40a:	617b      	str	r3, [r7, #20]
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d009      	beq.n	800f426 <create_name+0x182>
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f418:	3b01      	subs	r3, #1
 800f41a:	005b      	lsls	r3, r3, #1
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	4413      	add	r3, r2
 800f420:	881b      	ldrh	r3, [r3, #0]
 800f422:	2b2e      	cmp	r3, #46	; 0x2e
 800f424:	d1ef      	bne.n	800f406 <create_name+0x162>

	i = b = 0; ni = 8;
 800f426:	2300      	movs	r3, #0
 800f428:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f42c:	2300      	movs	r3, #0
 800f42e:	623b      	str	r3, [r7, #32]
 800f430:	2308      	movs	r3, #8
 800f432:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f434:	69bb      	ldr	r3, [r7, #24]
 800f436:	1c5a      	adds	r2, r3, #1
 800f438:	61ba      	str	r2, [r7, #24]
 800f43a:	005b      	lsls	r3, r3, #1
 800f43c:	68fa      	ldr	r2, [r7, #12]
 800f43e:	4413      	add	r3, r2
 800f440:	881b      	ldrh	r3, [r3, #0]
 800f442:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f446:	2b00      	cmp	r3, #0
 800f448:	f000 8090 	beq.w	800f56c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f44c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f44e:	2b20      	cmp	r3, #32
 800f450:	d006      	beq.n	800f460 <create_name+0x1bc>
 800f452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f454:	2b2e      	cmp	r3, #46	; 0x2e
 800f456:	d10a      	bne.n	800f46e <create_name+0x1ca>
 800f458:	69ba      	ldr	r2, [r7, #24]
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d006      	beq.n	800f46e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f464:	f043 0303 	orr.w	r3, r3, #3
 800f468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f46c:	e07d      	b.n	800f56a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f46e:	6a3a      	ldr	r2, [r7, #32]
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	429a      	cmp	r2, r3
 800f474:	d203      	bcs.n	800f47e <create_name+0x1da>
 800f476:	69ba      	ldr	r2, [r7, #24]
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d123      	bne.n	800f4c6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	2b0b      	cmp	r3, #11
 800f482:	d106      	bne.n	800f492 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f488:	f043 0303 	orr.w	r3, r3, #3
 800f48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f490:	e06f      	b.n	800f572 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f492:	69ba      	ldr	r2, [r7, #24]
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	429a      	cmp	r2, r3
 800f498:	d005      	beq.n	800f4a6 <create_name+0x202>
 800f49a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f49e:	f043 0303 	orr.w	r3, r3, #3
 800f4a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f4a6:	69ba      	ldr	r2, [r7, #24]
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d860      	bhi.n	800f570 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	61bb      	str	r3, [r7, #24]
 800f4b2:	2308      	movs	r3, #8
 800f4b4:	623b      	str	r3, [r7, #32]
 800f4b6:	230b      	movs	r3, #11
 800f4b8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f4ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f4be:	009b      	lsls	r3, r3, #2
 800f4c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f4c4:	e051      	b.n	800f56a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f4c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4c8:	2b7f      	cmp	r3, #127	; 0x7f
 800f4ca:	d914      	bls.n	800f4f6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f4cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f002 f831 	bl	8011538 <ff_convert>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f4da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d004      	beq.n	800f4ea <create_name+0x246>
 800f4e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4e2:	3b80      	subs	r3, #128	; 0x80
 800f4e4:	4a49      	ldr	r2, [pc, #292]	; (800f60c <create_name+0x368>)
 800f4e6:	5cd3      	ldrb	r3, [r2, r3]
 800f4e8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f4ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4ee:	f043 0302 	orr.w	r3, r3, #2
 800f4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f4f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d007      	beq.n	800f50c <create_name+0x268>
 800f4fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4fe:	4619      	mov	r1, r3
 800f500:	4843      	ldr	r0, [pc, #268]	; (800f610 <create_name+0x36c>)
 800f502:	f7fd fb55 	bl	800cbb0 <chk_chr>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d008      	beq.n	800f51e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f50c:	235f      	movs	r3, #95	; 0x5f
 800f50e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f514:	f043 0303 	orr.w	r3, r3, #3
 800f518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f51c:	e01b      	b.n	800f556 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f51e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f520:	2b40      	cmp	r3, #64	; 0x40
 800f522:	d909      	bls.n	800f538 <create_name+0x294>
 800f524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f526:	2b5a      	cmp	r3, #90	; 0x5a
 800f528:	d806      	bhi.n	800f538 <create_name+0x294>
					b |= 2;
 800f52a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f52e:	f043 0302 	orr.w	r3, r3, #2
 800f532:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f536:	e00e      	b.n	800f556 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f53a:	2b60      	cmp	r3, #96	; 0x60
 800f53c:	d90b      	bls.n	800f556 <create_name+0x2b2>
 800f53e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f540:	2b7a      	cmp	r3, #122	; 0x7a
 800f542:	d808      	bhi.n	800f556 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f544:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f548:	f043 0301 	orr.w	r3, r3, #1
 800f54c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f552:	3b20      	subs	r3, #32
 800f554:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f556:	6a3b      	ldr	r3, [r7, #32]
 800f558:	1c5a      	adds	r2, r3, #1
 800f55a:	623a      	str	r2, [r7, #32]
 800f55c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f55e:	b2d1      	uxtb	r1, r2
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	4413      	add	r3, r2
 800f564:	460a      	mov	r2, r1
 800f566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800f56a:	e763      	b.n	800f434 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f56c:	bf00      	nop
 800f56e:	e000      	b.n	800f572 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800f570:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f578:	2be5      	cmp	r3, #229	; 0xe5
 800f57a:	d103      	bne.n	800f584 <create_name+0x2e0>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2205      	movs	r2, #5
 800f580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	2b08      	cmp	r3, #8
 800f588:	d104      	bne.n	800f594 <create_name+0x2f0>
 800f58a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f598:	f003 030c 	and.w	r3, r3, #12
 800f59c:	2b0c      	cmp	r3, #12
 800f59e:	d005      	beq.n	800f5ac <create_name+0x308>
 800f5a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f5a4:	f003 0303 	and.w	r3, r3, #3
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	d105      	bne.n	800f5b8 <create_name+0x314>
 800f5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5b0:	f043 0302 	orr.w	r3, r3, #2
 800f5b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f5b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5bc:	f003 0302 	and.w	r3, r3, #2
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d117      	bne.n	800f5f4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f5c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f5c8:	f003 0303 	and.w	r3, r3, #3
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	d105      	bne.n	800f5dc <create_name+0x338>
 800f5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5d4:	f043 0310 	orr.w	r3, r3, #16
 800f5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f5dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f5e0:	f003 030c 	and.w	r3, r3, #12
 800f5e4:	2b04      	cmp	r3, #4
 800f5e6:	d105      	bne.n	800f5f4 <create_name+0x350>
 800f5e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5ec:	f043 0308 	orr.w	r3, r3, #8
 800f5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f5fa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800f5fe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f600:	4618      	mov	r0, r3
 800f602:	3728      	adds	r7, #40	; 0x28
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	080126b8 	.word	0x080126b8
 800f60c:	080127a0 	.word	0x080127a0
 800f610:	080126c4 	.word	0x080126c4

0800f614 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f628:	e002      	b.n	800f630 <follow_path+0x1c>
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	3301      	adds	r3, #1
 800f62e:	603b      	str	r3, [r7, #0]
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	2b2f      	cmp	r3, #47	; 0x2f
 800f636:	d0f8      	beq.n	800f62a <follow_path+0x16>
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	2b5c      	cmp	r3, #92	; 0x5c
 800f63e:	d0f4      	beq.n	800f62a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	2200      	movs	r2, #0
 800f644:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	2200      	movs	r2, #0
 800f64a:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	2b1f      	cmp	r3, #31
 800f652:	d80a      	bhi.n	800f66a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2280      	movs	r2, #128	; 0x80
 800f658:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800f65c:	2100      	movs	r1, #0
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f7fe faf7 	bl	800dc52 <dir_sdi>
 800f664:	4603      	mov	r3, r0
 800f666:	75fb      	strb	r3, [r7, #23]
 800f668:	e07d      	b.n	800f766 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f66a:	463b      	mov	r3, r7
 800f66c:	4619      	mov	r1, r3
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f7ff fe18 	bl	800f2a4 <create_name>
 800f674:	4603      	mov	r3, r0
 800f676:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f678:	7dfb      	ldrb	r3, [r7, #23]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d16e      	bne.n	800f75c <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f7ff fa54 	bl	800eb2c <dir_find>
 800f684:	4603      	mov	r3, r0
 800f686:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f68e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f690:	7dfb      	ldrb	r3, [r7, #23]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00a      	beq.n	800f6ac <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f696:	7dfb      	ldrb	r3, [r7, #23]
 800f698:	2b04      	cmp	r3, #4
 800f69a:	d161      	bne.n	800f760 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f69c:	7afb      	ldrb	r3, [r7, #11]
 800f69e:	f003 0304 	and.w	r3, r3, #4
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d15c      	bne.n	800f760 <follow_path+0x14c>
 800f6a6:	2305      	movs	r3, #5
 800f6a8:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f6aa:	e059      	b.n	800f760 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f6ac:	7afb      	ldrb	r3, [r7, #11]
 800f6ae:	f003 0304 	and.w	r3, r3, #4
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d156      	bne.n	800f764 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	799b      	ldrb	r3, [r3, #6]
 800f6ba:	f003 0310 	and.w	r3, r3, #16
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d102      	bne.n	800f6c8 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800f6c2:	2305      	movs	r3, #5
 800f6c4:	75fb      	strb	r3, [r7, #23]
 800f6c6:	e04e      	b.n	800f766 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	2b04      	cmp	r3, #4
 800f6ce:	d130      	bne.n	800f732 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	689a      	ldr	r2, [r3, #8]
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f6e4:	693a      	ldr	r2, [r7, #16]
 800f6e6:	79d2      	ldrb	r2, [r2, #7]
 800f6e8:	431a      	orrs	r2, r3
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	695b      	ldr	r3, [r3, #20]
 800f6fa:	3334      	adds	r3, #52	; 0x34
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fd f847 	bl	800c790 <ld_dword>
 800f702:	4602      	mov	r2, r0
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	695b      	ldr	r3, [r3, #20]
 800f70c:	3321      	adds	r3, #33	; 0x21
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	f003 0302 	and.w	r3, r3, #2
 800f714:	b2da      	uxtb	r2, r3
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	695b      	ldr	r3, [r3, #20]
 800f71e:	3338      	adds	r3, #56	; 0x38
 800f720:	4618      	mov	r0, r3
 800f722:	f7fd f858 	bl	800c7d6 <ld_qword>
 800f726:	4602      	mov	r2, r0
 800f728:	460b      	mov	r3, r1
 800f72a:	6939      	ldr	r1, [r7, #16]
 800f72c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f730:	e79b      	b.n	800f66a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	8992      	ldrh	r2, [r2, #12]
 800f740:	fbb3 f0f2 	udiv	r0, r3, r2
 800f744:	fb02 f200 	mul.w	r2, r2, r0
 800f748:	1a9b      	subs	r3, r3, r2
 800f74a:	440b      	add	r3, r1
 800f74c:	4619      	mov	r1, r3
 800f74e:	68f8      	ldr	r0, [r7, #12]
 800f750:	f7fe fc55 	bl	800dffe <ld_clust>
 800f754:	4602      	mov	r2, r0
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f75a:	e786      	b.n	800f66a <follow_path+0x56>
			if (res != FR_OK) break;
 800f75c:	bf00      	nop
 800f75e:	e002      	b.n	800f766 <follow_path+0x152>
				break;
 800f760:	bf00      	nop
 800f762:	e000      	b.n	800f766 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f764:	bf00      	nop
			}
		}
	}

	return res;
 800f766:	7dfb      	ldrb	r3, [r7, #23]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3718      	adds	r7, #24
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f770:	b480      	push	{r7}
 800f772:	b087      	sub	sp, #28
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f778:	f04f 33ff 	mov.w	r3, #4294967295
 800f77c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d031      	beq.n	800f7ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	617b      	str	r3, [r7, #20]
 800f78c:	e002      	b.n	800f794 <get_ldnumber+0x24>
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	3301      	adds	r3, #1
 800f792:	617b      	str	r3, [r7, #20]
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	2b1f      	cmp	r3, #31
 800f79a:	d903      	bls.n	800f7a4 <get_ldnumber+0x34>
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	2b3a      	cmp	r3, #58	; 0x3a
 800f7a2:	d1f4      	bne.n	800f78e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	2b3a      	cmp	r3, #58	; 0x3a
 800f7aa:	d11c      	bne.n	800f7e6 <get_ldnumber+0x76>
			tp = *path;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	1c5a      	adds	r2, r3, #1
 800f7b6:	60fa      	str	r2, [r7, #12]
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	3b30      	subs	r3, #48	; 0x30
 800f7bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	2b09      	cmp	r3, #9
 800f7c2:	d80e      	bhi.n	800f7e2 <get_ldnumber+0x72>
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d10a      	bne.n	800f7e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d107      	bne.n	800f7e2 <get_ldnumber+0x72>
					vol = (int)i;
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	3301      	adds	r3, #1
 800f7da:	617b      	str	r3, [r7, #20]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	697a      	ldr	r2, [r7, #20]
 800f7e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	e002      	b.n	800f7ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f7ea:	693b      	ldr	r3, [r7, #16]
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	371c      	adds	r7, #28
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	70da      	strb	r2, [r3, #3]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f04f 32ff 	mov.w	r2, #4294967295
 800f80e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f7fd fb98 	bl	800cf48 <move_window>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d001      	beq.n	800f822 <check_fs+0x2a>
 800f81e:	2304      	movs	r3, #4
 800f820:	e044      	b.n	800f8ac <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	333c      	adds	r3, #60	; 0x3c
 800f826:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7fc ff98 	bl	800c760 <ld_word>
 800f830:	4603      	mov	r3, r0
 800f832:	461a      	mov	r2, r3
 800f834:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f838:	429a      	cmp	r2, r3
 800f83a:	d001      	beq.n	800f840 <check_fs+0x48>
 800f83c:	2303      	movs	r3, #3
 800f83e:	e035      	b.n	800f8ac <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f846:	2be9      	cmp	r3, #233	; 0xe9
 800f848:	d009      	beq.n	800f85e <check_fs+0x66>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f850:	2beb      	cmp	r3, #235	; 0xeb
 800f852:	d11e      	bne.n	800f892 <check_fs+0x9a>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f85a:	2b90      	cmp	r3, #144	; 0x90
 800f85c:	d119      	bne.n	800f892 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	333c      	adds	r3, #60	; 0x3c
 800f862:	3336      	adds	r3, #54	; 0x36
 800f864:	4618      	mov	r0, r3
 800f866:	f7fc ff93 	bl	800c790 <ld_dword>
 800f86a:	4603      	mov	r3, r0
 800f86c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f870:	4a10      	ldr	r2, [pc, #64]	; (800f8b4 <check_fs+0xbc>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d101      	bne.n	800f87a <check_fs+0x82>
 800f876:	2300      	movs	r3, #0
 800f878:	e018      	b.n	800f8ac <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	333c      	adds	r3, #60	; 0x3c
 800f87e:	3352      	adds	r3, #82	; 0x52
 800f880:	4618      	mov	r0, r3
 800f882:	f7fc ff85 	bl	800c790 <ld_dword>
 800f886:	4603      	mov	r3, r0
 800f888:	4a0b      	ldr	r2, [pc, #44]	; (800f8b8 <check_fs+0xc0>)
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d101      	bne.n	800f892 <check_fs+0x9a>
 800f88e:	2300      	movs	r3, #0
 800f890:	e00c      	b.n	800f8ac <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	333c      	adds	r3, #60	; 0x3c
 800f896:	220b      	movs	r2, #11
 800f898:	4908      	ldr	r1, [pc, #32]	; (800f8bc <check_fs+0xc4>)
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fd f961 	bl	800cb62 <mem_cmp>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d101      	bne.n	800f8aa <check_fs+0xb2>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e000      	b.n	800f8ac <check_fs+0xb4>
#endif
	return 2;
 800f8aa:	2302      	movs	r3, #2
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3708      	adds	r7, #8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	00544146 	.word	0x00544146
 800f8b8:	33544146 	.word	0x33544146
 800f8bc:	080126cc 	.word	0x080126cc

0800f8c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f8c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f8c4:	b098      	sub	sp, #96	; 0x60
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	60f8      	str	r0, [r7, #12]
 800f8ca:	60b9      	str	r1, [r7, #8]
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f7ff ff4a 	bl	800f770 <get_ldnumber>
 800f8dc:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800f8de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	da01      	bge.n	800f8e8 <find_volume+0x28>
 800f8e4:	230b      	movs	r3, #11
 800f8e6:	e36b      	b.n	800ffc0 <find_volume+0x700>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f8e8:	4aa9      	ldr	r2, [pc, #676]	; (800fb90 <find_volume+0x2d0>)
 800f8ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8f0:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f8f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d101      	bne.n	800f8fc <find_volume+0x3c>
 800f8f8:	230c      	movs	r3, #12
 800f8fa:	e361      	b.n	800ffc0 <find_volume+0x700>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f900:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f902:	79fb      	ldrb	r3, [r7, #7]
 800f904:	f023 0301 	bic.w	r3, r3, #1
 800f908:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f90a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d01a      	beq.n	800f948 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800f912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f914:	785b      	ldrb	r3, [r3, #1]
 800f916:	4618      	mov	r0, r3
 800f918:	f7fc fe84 	bl	800c624 <disk_status>
 800f91c:	4603      	mov	r3, r0
 800f91e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f922:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f926:	f003 0301 	and.w	r3, r3, #1
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d10c      	bne.n	800f948 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f92e:	79fb      	ldrb	r3, [r7, #7]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d007      	beq.n	800f944 <find_volume+0x84>
 800f934:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f938:	f003 0304 	and.w	r3, r3, #4
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d001      	beq.n	800f944 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800f940:	230a      	movs	r3, #10
 800f942:	e33d      	b.n	800ffc0 <find_volume+0x700>
			}
			return FR_OK;				/* The file system object is valid */
 800f944:	2300      	movs	r3, #0
 800f946:	e33b      	b.n	800ffc0 <find_volume+0x700>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f94a:	2200      	movs	r2, #0
 800f94c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f94e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f950:	b2da      	uxtb	r2, r3
 800f952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f954:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f958:	785b      	ldrb	r3, [r3, #1]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7fc fe7c 	bl	800c658 <disk_initialize>
 800f960:	4603      	mov	r3, r0
 800f962:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f966:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f96a:	f003 0301 	and.w	r3, r3, #1
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d001      	beq.n	800f976 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f972:	2303      	movs	r3, #3
 800f974:	e324      	b.n	800ffc0 <find_volume+0x700>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f976:	79fb      	ldrb	r3, [r7, #7]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d007      	beq.n	800f98c <find_volume+0xcc>
 800f97c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f980:	f003 0304 	and.w	r3, r3, #4
 800f984:	2b00      	cmp	r3, #0
 800f986:	d001      	beq.n	800f98c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800f988:	230a      	movs	r3, #10
 800f98a:	e319      	b.n	800ffc0 <find_volume+0x700>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f98e:	7858      	ldrb	r0, [r3, #1]
 800f990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f992:	330c      	adds	r3, #12
 800f994:	461a      	mov	r2, r3
 800f996:	2102      	movs	r1, #2
 800f998:	f7fc fec4 	bl	800c724 <disk_ioctl>
 800f99c:	4603      	mov	r3, r0
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d001      	beq.n	800f9a6 <find_volume+0xe6>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	e30c      	b.n	800ffc0 <find_volume+0x700>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9a8:	899b      	ldrh	r3, [r3, #12]
 800f9aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9ae:	d80d      	bhi.n	800f9cc <find_volume+0x10c>
 800f9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9b2:	899b      	ldrh	r3, [r3, #12]
 800f9b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9b8:	d308      	bcc.n	800f9cc <find_volume+0x10c>
 800f9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9bc:	899b      	ldrh	r3, [r3, #12]
 800f9be:	461a      	mov	r2, r3
 800f9c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9c2:	899b      	ldrh	r3, [r3, #12]
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	4013      	ands	r3, r2
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d001      	beq.n	800f9d0 <find_volume+0x110>
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e2f7      	b.n	800ffc0 <find_volume+0x700>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f9d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f9d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f9d8:	f7ff ff0e 	bl	800f7f8 <check_fs>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f9e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9e6:	2b02      	cmp	r3, #2
 800f9e8:	d14b      	bne.n	800fa82 <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9ee:	e01f      	b.n	800fa30 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f9f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9f2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f9f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9f8:	011b      	lsls	r3, r3, #4
 800f9fa:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f9fe:	4413      	add	r3, r2
 800fa00:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fa02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa04:	3304      	adds	r3, #4
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d006      	beq.n	800fa1a <find_volume+0x15a>
 800fa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0e:	3308      	adds	r3, #8
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fc febd 	bl	800c790 <ld_dword>
 800fa16:	4602      	mov	r2, r0
 800fa18:	e000      	b.n	800fa1c <find_volume+0x15c>
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800fa24:	440b      	add	r3, r1
 800fa26:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fa2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa32:	2b03      	cmp	r3, #3
 800fa34:	d9dc      	bls.n	800f9f0 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fa36:	2300      	movs	r3, #0
 800fa38:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800fa3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d002      	beq.n	800fa46 <find_volume+0x186>
 800fa40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa42:	3b01      	subs	r3, #1
 800fa44:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fa46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800fa4e:	4413      	add	r3, r2
 800fa50:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800fa54:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fa56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d005      	beq.n	800fa68 <find_volume+0x1a8>
 800fa5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa5e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fa60:	f7ff feca 	bl	800f7f8 <check_fs>
 800fa64:	4603      	mov	r3, r0
 800fa66:	e000      	b.n	800fa6a <find_volume+0x1aa>
 800fa68:	2303      	movs	r3, #3
 800fa6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fa6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d905      	bls.n	800fa82 <find_volume+0x1c2>
 800fa76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa78:	3301      	adds	r3, #1
 800fa7a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa7e:	2b03      	cmp	r3, #3
 800fa80:	d9e1      	bls.n	800fa46 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fa82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa86:	2b04      	cmp	r3, #4
 800fa88:	d101      	bne.n	800fa8e <find_volume+0x1ce>
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	e298      	b.n	800ffc0 <find_volume+0x700>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fa8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d901      	bls.n	800fa9a <find_volume+0x1da>
 800fa96:	230d      	movs	r3, #13
 800fa98:	e292      	b.n	800ffc0 <find_volume+0x700>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800fa9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	f040 80fe 	bne.w	800fca0 <find_volume+0x3e0>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800faa4:	230b      	movs	r3, #11
 800faa6:	64bb      	str	r3, [r7, #72]	; 0x48
 800faa8:	e002      	b.n	800fab0 <find_volume+0x1f0>
 800faaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faac:	3301      	adds	r3, #1
 800faae:	64bb      	str	r3, [r7, #72]	; 0x48
 800fab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fab2:	2b3f      	cmp	r3, #63	; 0x3f
 800fab4:	d806      	bhi.n	800fac4 <find_volume+0x204>
 800fab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faba:	4413      	add	r3, r2
 800fabc:	333c      	adds	r3, #60	; 0x3c
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d0f2      	beq.n	800faaa <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800fac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fac6:	2b3f      	cmp	r3, #63	; 0x3f
 800fac8:	d801      	bhi.n	800face <find_volume+0x20e>
 800faca:	230d      	movs	r3, #13
 800facc:	e278      	b.n	800ffc0 <find_volume+0x700>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800face:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fad0:	333c      	adds	r3, #60	; 0x3c
 800fad2:	3368      	adds	r3, #104	; 0x68
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7fc fe43 	bl	800c760 <ld_word>
 800fada:	4603      	mov	r3, r0
 800fadc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fae0:	d001      	beq.n	800fae6 <find_volume+0x226>
 800fae2:	230d      	movs	r3, #13
 800fae4:	e26c      	b.n	800ffc0 <find_volume+0x700>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800fae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fae8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800faec:	461a      	mov	r2, r3
 800faee:	2301      	movs	r3, #1
 800faf0:	4093      	lsls	r3, r2
 800faf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800faf4:	8992      	ldrh	r2, [r2, #12]
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d001      	beq.n	800fafe <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 800fafa:	230d      	movs	r3, #13
 800fafc:	e260      	b.n	800ffc0 <find_volume+0x700>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800fafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb00:	333c      	adds	r3, #60	; 0x3c
 800fb02:	3348      	adds	r3, #72	; 0x48
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7fc fe66 	bl	800c7d6 <ld_qword>
 800fb0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	f04f 0300 	mov.w	r3, #0
 800fb12:	eb10 0802 	adds.w	r8, r0, r2
 800fb16:	eb41 0903 	adc.w	r9, r1, r3
 800fb1a:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800fb1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	bf08      	it	eq
 800fb26:	2a00      	cmpeq	r2, #0
 800fb28:	d301      	bcc.n	800fb2e <find_volume+0x26e>
 800fb2a:	230d      	movs	r3, #13
 800fb2c:	e248      	b.n	800ffc0 <find_volume+0x700>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800fb2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb30:	333c      	adds	r3, #60	; 0x3c
 800fb32:	3354      	adds	r3, #84	; 0x54
 800fb34:	4618      	mov	r0, r3
 800fb36:	f7fc fe2b 	bl	800c790 <ld_dword>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb3e:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800fb40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb42:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800fb46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb48:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800fb4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb4c:	789b      	ldrb	r3, [r3, #2]
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d001      	beq.n	800fb56 <find_volume+0x296>
 800fb52:	230d      	movs	r3, #13
 800fb54:	e234      	b.n	800ffc0 <find_volume+0x700>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800fb56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb58:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	2301      	movs	r3, #1
 800fb60:	4093      	lsls	r3, r2
 800fb62:	b29a      	uxth	r2, r3
 800fb64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb66:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800fb68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb6a:	895b      	ldrh	r3, [r3, #10]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d101      	bne.n	800fb74 <find_volume+0x2b4>
 800fb70:	230d      	movs	r3, #13
 800fb72:	e225      	b.n	800ffc0 <find_volume+0x700>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800fb74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb76:	333c      	adds	r3, #60	; 0x3c
 800fb78:	335c      	adds	r3, #92	; 0x5c
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7fc fe08 	bl	800c790 <ld_dword>
 800fb80:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800fb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb84:	4a03      	ldr	r2, [pc, #12]	; (800fb94 <find_volume+0x2d4>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d906      	bls.n	800fb98 <find_volume+0x2d8>
 800fb8a:	230d      	movs	r3, #13
 800fb8c:	e218      	b.n	800ffc0 <find_volume+0x700>
 800fb8e:	bf00      	nop
 800fb90:	200101d0 	.word	0x200101d0
 800fb94:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800fb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9a:	1c9a      	adds	r2, r3, #2
 800fb9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb9e:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800fba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fba4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800fba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fba8:	333c      	adds	r3, #60	; 0x3c
 800fbaa:	3358      	adds	r3, #88	; 0x58
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fc fdef 	bl	800c790 <ld_dword>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fbb6:	441a      	add	r2, r3
 800fbb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbba:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800fbbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbbe:	333c      	adds	r3, #60	; 0x3c
 800fbc0:	3350      	adds	r3, #80	; 0x50
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7fc fde4 	bl	800c790 <ld_dword>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fbcc:	441a      	add	r2, r3
 800fbce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbd0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800fbd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f04f 0100 	mov.w	r1, #0
 800fbdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbde:	895b      	ldrh	r3, [r3, #10]
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe4:	fb03 f302 	mul.w	r3, r3, r2
 800fbe8:	461a      	mov	r2, r3
 800fbea:	f04f 0300 	mov.w	r3, #0
 800fbee:	1884      	adds	r4, r0, r2
 800fbf0:	eb41 0503 	adc.w	r5, r1, r3
 800fbf4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fbf8:	42ab      	cmp	r3, r5
 800fbfa:	bf08      	it	eq
 800fbfc:	42a2      	cmpeq	r2, r4
 800fbfe:	d201      	bcs.n	800fc04 <find_volume+0x344>
 800fc00:	230d      	movs	r3, #13
 800fc02:	e1dd      	b.n	800ffc0 <find_volume+0x700>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800fc04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc06:	333c      	adds	r3, #60	; 0x3c
 800fc08:	3360      	adds	r3, #96	; 0x60
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7fc fdc0 	bl	800c790 <ld_dword>
 800fc10:	4602      	mov	r2, r0
 800fc12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc14:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800fc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fc1e:	f7fd fa31 	bl	800d084 <clust2sect>
 800fc22:	4603      	mov	r3, r0
 800fc24:	4619      	mov	r1, r3
 800fc26:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fc28:	f7fd f98e 	bl	800cf48 <move_window>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d001      	beq.n	800fc36 <find_volume+0x376>
 800fc32:	2301      	movs	r3, #1
 800fc34:	e1c4      	b.n	800ffc0 <find_volume+0x700>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800fc36:	2300      	movs	r3, #0
 800fc38:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc3a:	e015      	b.n	800fc68 <find_volume+0x3a8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800fc3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc40:	4413      	add	r3, r2
 800fc42:	333c      	adds	r3, #60	; 0x3c
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	2b81      	cmp	r3, #129	; 0x81
 800fc48:	d10b      	bne.n	800fc62 <find_volume+0x3a2>
 800fc4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc4c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800fc50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc52:	3314      	adds	r3, #20
 800fc54:	4413      	add	r3, r2
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7fc fd9a 	bl	800c790 <ld_dword>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b02      	cmp	r3, #2
 800fc60:	d009      	beq.n	800fc76 <find_volume+0x3b6>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800fc62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc64:	3320      	adds	r3, #32
 800fc66:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc6a:	899b      	ldrh	r3, [r3, #12]
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d3e3      	bcc.n	800fc3c <find_volume+0x37c>
 800fc74:	e000      	b.n	800fc78 <find_volume+0x3b8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800fc76:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800fc78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc7a:	899b      	ldrh	r3, [r3, #12]
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d101      	bne.n	800fc88 <find_volume+0x3c8>
 800fc84:	230d      	movs	r3, #13
 800fc86:	e19b      	b.n	800ffc0 <find_volume+0x700>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fc88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800fc8e:	61da      	str	r2, [r3, #28]
 800fc90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc92:	69da      	ldr	r2, [r3, #28]
 800fc94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc96:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800fc98:	2304      	movs	r3, #4
 800fc9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fc9e:	e177      	b.n	800ff90 <find_volume+0x6d0>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fca2:	333c      	adds	r3, #60	; 0x3c
 800fca4:	330b      	adds	r3, #11
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fc fd5a 	bl	800c760 <ld_word>
 800fcac:	4603      	mov	r3, r0
 800fcae:	461a      	mov	r2, r3
 800fcb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcb2:	899b      	ldrh	r3, [r3, #12]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d001      	beq.n	800fcbc <find_volume+0x3fc>
 800fcb8:	230d      	movs	r3, #13
 800fcba:	e181      	b.n	800ffc0 <find_volume+0x700>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fcbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcbe:	333c      	adds	r3, #60	; 0x3c
 800fcc0:	3316      	adds	r3, #22
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fc fd4c 	bl	800c760 <ld_word>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d106      	bne.n	800fce0 <find_volume+0x420>
 800fcd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcd4:	333c      	adds	r3, #60	; 0x3c
 800fcd6:	3324      	adds	r3, #36	; 0x24
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7fc fd59 	bl	800c790 <ld_dword>
 800fcde:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800fce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fce2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fce4:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fce8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800fcec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fcf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcf2:	789b      	ldrb	r3, [r3, #2]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d005      	beq.n	800fd04 <find_volume+0x444>
 800fcf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcfa:	789b      	ldrb	r3, [r3, #2]
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d001      	beq.n	800fd04 <find_volume+0x444>
 800fd00:	230d      	movs	r3, #13
 800fd02:	e15d      	b.n	800ffc0 <find_volume+0x700>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fd04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd06:	789b      	ldrb	r3, [r3, #2]
 800fd08:	461a      	mov	r2, r3
 800fd0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd0c:	fb02 f303 	mul.w	r3, r2, r3
 800fd10:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fd12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd14:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fd1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd20:	895b      	ldrh	r3, [r3, #10]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d008      	beq.n	800fd38 <find_volume+0x478>
 800fd26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd28:	895b      	ldrh	r3, [r3, #10]
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd2e:	895b      	ldrh	r3, [r3, #10]
 800fd30:	3b01      	subs	r3, #1
 800fd32:	4013      	ands	r3, r2
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d001      	beq.n	800fd3c <find_volume+0x47c>
 800fd38:	230d      	movs	r3, #13
 800fd3a:	e141      	b.n	800ffc0 <find_volume+0x700>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fd3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd3e:	333c      	adds	r3, #60	; 0x3c
 800fd40:	3311      	adds	r3, #17
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fc fd0c 	bl	800c760 <ld_word>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fd50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd52:	891b      	ldrh	r3, [r3, #8]
 800fd54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd56:	8992      	ldrh	r2, [r2, #12]
 800fd58:	0952      	lsrs	r2, r2, #5
 800fd5a:	b292      	uxth	r2, r2
 800fd5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd60:	fb02 f201 	mul.w	r2, r2, r1
 800fd64:	1a9b      	subs	r3, r3, r2
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d001      	beq.n	800fd70 <find_volume+0x4b0>
 800fd6c:	230d      	movs	r3, #13
 800fd6e:	e127      	b.n	800ffc0 <find_volume+0x700>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fd70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd72:	333c      	adds	r3, #60	; 0x3c
 800fd74:	3313      	adds	r3, #19
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fc fcf2 	bl	800c760 <ld_word>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fd80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d106      	bne.n	800fd94 <find_volume+0x4d4>
 800fd86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd88:	333c      	adds	r3, #60	; 0x3c
 800fd8a:	3320      	adds	r3, #32
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7fc fcff 	bl	800c790 <ld_dword>
 800fd92:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fd94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd96:	333c      	adds	r3, #60	; 0x3c
 800fd98:	330e      	adds	r3, #14
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7fc fce0 	bl	800c760 <ld_word>
 800fda0:	4603      	mov	r3, r0
 800fda2:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fda4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d101      	bne.n	800fdae <find_volume+0x4ee>
 800fdaa:	230d      	movs	r3, #13
 800fdac:	e108      	b.n	800ffc0 <find_volume+0x700>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fdae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fdb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdb2:	4413      	add	r3, r2
 800fdb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fdb6:	8911      	ldrh	r1, [r2, #8]
 800fdb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fdba:	8992      	ldrh	r2, [r2, #12]
 800fdbc:	0952      	lsrs	r2, r2, #5
 800fdbe:	b292      	uxth	r2, r2
 800fdc0:	fbb1 f2f2 	udiv	r2, r1, r2
 800fdc4:	b292      	uxth	r2, r2
 800fdc6:	4413      	add	r3, r2
 800fdc8:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fdca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d201      	bcs.n	800fdd6 <find_volume+0x516>
 800fdd2:	230d      	movs	r3, #13
 800fdd4:	e0f4      	b.n	800ffc0 <find_volume+0x700>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fdd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdda:	1ad3      	subs	r3, r2, r3
 800fddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fdde:	8952      	ldrh	r2, [r2, #10]
 800fde0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fde4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d101      	bne.n	800fdf0 <find_volume+0x530>
 800fdec:	230d      	movs	r3, #13
 800fdee:	e0e7      	b.n	800ffc0 <find_volume+0x700>
		fmt = FS_FAT32;
 800fdf0:	2303      	movs	r3, #3
 800fdf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d802      	bhi.n	800fe06 <find_volume+0x546>
 800fe00:	2302      	movs	r3, #2
 800fe02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fe06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe08:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d802      	bhi.n	800fe16 <find_volume+0x556>
 800fe10:	2301      	movs	r3, #1
 800fe12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fe16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe18:	1c9a      	adds	r2, r3, #2
 800fe1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe1c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800fe1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe22:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fe24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fe26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe28:	441a      	add	r2, r3
 800fe2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe2c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800fe2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe32:	441a      	add	r2, r3
 800fe34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe36:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800fe38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe3c:	2b03      	cmp	r3, #3
 800fe3e:	d11e      	bne.n	800fe7e <find_volume+0x5be>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe42:	333c      	adds	r3, #60	; 0x3c
 800fe44:	332a      	adds	r3, #42	; 0x2a
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fc fc8a 	bl	800c760 <ld_word>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <find_volume+0x596>
 800fe52:	230d      	movs	r3, #13
 800fe54:	e0b4      	b.n	800ffc0 <find_volume+0x700>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe58:	891b      	ldrh	r3, [r3, #8]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d001      	beq.n	800fe62 <find_volume+0x5a2>
 800fe5e:	230d      	movs	r3, #13
 800fe60:	e0ae      	b.n	800ffc0 <find_volume+0x700>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe64:	333c      	adds	r3, #60	; 0x3c
 800fe66:	332c      	adds	r3, #44	; 0x2c
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7fc fc91 	bl	800c790 <ld_dword>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe72:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe76:	6a1b      	ldr	r3, [r3, #32]
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe7c:	e01f      	b.n	800febe <find_volume+0x5fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe80:	891b      	ldrh	r3, [r3, #8]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d101      	bne.n	800fe8a <find_volume+0x5ca>
 800fe86:	230d      	movs	r3, #13
 800fe88:	e09a      	b.n	800ffc0 <find_volume+0x700>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe90:	441a      	add	r2, r3
 800fe92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe94:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fe96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe9a:	2b02      	cmp	r3, #2
 800fe9c:	d103      	bne.n	800fea6 <find_volume+0x5e6>
 800fe9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fea0:	6a1b      	ldr	r3, [r3, #32]
 800fea2:	005b      	lsls	r3, r3, #1
 800fea4:	e00a      	b.n	800febc <find_volume+0x5fc>
 800fea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fea8:	6a1a      	ldr	r2, [r3, #32]
 800feaa:	4613      	mov	r3, r2
 800feac:	005b      	lsls	r3, r3, #1
 800feae:	4413      	add	r3, r2
 800feb0:	085a      	lsrs	r2, r3, #1
 800feb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feb4:	6a1b      	ldr	r3, [r3, #32]
 800feb6:	f003 0301 	and.w	r3, r3, #1
 800feba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800febc:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800febe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fec4:	899b      	ldrh	r3, [r3, #12]
 800fec6:	4619      	mov	r1, r3
 800fec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800feca:	440b      	add	r3, r1
 800fecc:	3b01      	subs	r3, #1
 800fece:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fed0:	8989      	ldrh	r1, [r1, #12]
 800fed2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d201      	bcs.n	800fede <find_volume+0x61e>
 800feda:	230d      	movs	r3, #13
 800fedc:	e070      	b.n	800ffc0 <find_volume+0x700>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fee0:	f04f 32ff 	mov.w	r2, #4294967295
 800fee4:	61da      	str	r2, [r3, #28]
 800fee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fee8:	69da      	ldr	r2, [r3, #28]
 800feea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feec:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800feee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fef0:	2280      	movs	r2, #128	; 0x80
 800fef2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fef4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fef8:	2b03      	cmp	r3, #3
 800fefa:	d149      	bne.n	800ff90 <find_volume+0x6d0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fefc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fefe:	333c      	adds	r3, #60	; 0x3c
 800ff00:	3330      	adds	r3, #48	; 0x30
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fc fc2c 	bl	800c760 <ld_word>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d140      	bne.n	800ff90 <find_volume+0x6d0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ff0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff10:	3301      	adds	r3, #1
 800ff12:	4619      	mov	r1, r3
 800ff14:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ff16:	f7fd f817 	bl	800cf48 <move_window>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d137      	bne.n	800ff90 <find_volume+0x6d0>
		{
			fs->fsi_flag = 0;
 800ff20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff22:	2200      	movs	r2, #0
 800ff24:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ff26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff28:	333c      	adds	r3, #60	; 0x3c
 800ff2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fc fc16 	bl	800c760 <ld_word>
 800ff34:	4603      	mov	r3, r0
 800ff36:	461a      	mov	r2, r3
 800ff38:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d127      	bne.n	800ff90 <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ff40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff42:	333c      	adds	r3, #60	; 0x3c
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fc fc23 	bl	800c790 <ld_dword>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	4a1f      	ldr	r2, [pc, #124]	; (800ffcc <find_volume+0x70c>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d11e      	bne.n	800ff90 <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff54:	333c      	adds	r3, #60	; 0x3c
 800ff56:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fc fc18 	bl	800c790 <ld_dword>
 800ff60:	4603      	mov	r3, r0
 800ff62:	4a1b      	ldr	r2, [pc, #108]	; (800ffd0 <find_volume+0x710>)
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d113      	bne.n	800ff90 <find_volume+0x6d0>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff6a:	333c      	adds	r3, #60	; 0x3c
 800ff6c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7fc fc0d 	bl	800c790 <ld_dword>
 800ff76:	4602      	mov	r2, r0
 800ff78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff7a:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff7e:	333c      	adds	r3, #60	; 0x3c
 800ff80:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7fc fc03 	bl	800c790 <ld_dword>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff8e:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ff90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff92:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ff96:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ff98:	4b0e      	ldr	r3, [pc, #56]	; (800ffd4 <find_volume+0x714>)
 800ff9a:	881b      	ldrh	r3, [r3, #0]
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	4b0c      	ldr	r3, [pc, #48]	; (800ffd4 <find_volume+0x714>)
 800ffa2:	801a      	strh	r2, [r3, #0]
 800ffa4:	4b0b      	ldr	r3, [pc, #44]	; (800ffd4 <find_volume+0x714>)
 800ffa6:	881a      	ldrh	r2, [r3, #0]
 800ffa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffaa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ffac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffae:	4a0a      	ldr	r2, [pc, #40]	; (800ffd8 <find_volume+0x718>)
 800ffb0:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800ffb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffb4:	4a09      	ldr	r2, [pc, #36]	; (800ffdc <find_volume+0x71c>)
 800ffb6:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ffb8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ffba:	f7fc ff5d 	bl	800ce78 <clear_lock>
#endif
	return FR_OK;
 800ffbe:	2300      	movs	r3, #0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3760      	adds	r7, #96	; 0x60
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ffca:	bf00      	nop
 800ffcc:	41615252 	.word	0x41615252
 800ffd0:	61417272 	.word	0x61417272
 800ffd4:	200101d4 	.word	0x200101d4
 800ffd8:	20010458 	.word	0x20010458
 800ffdc:	200101f8 	.word	0x200101f8

0800ffe0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ffea:	2309      	movs	r3, #9
 800ffec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d01c      	beq.n	801002e <validate+0x4e>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d018      	beq.n	801002e <validate+0x4e>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d013      	beq.n	801002e <validate+0x4e>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	889a      	ldrh	r2, [r3, #4]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	88db      	ldrh	r3, [r3, #6]
 8010010:	429a      	cmp	r2, r3
 8010012:	d10c      	bne.n	801002e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	785b      	ldrb	r3, [r3, #1]
 801001a:	4618      	mov	r0, r3
 801001c:	f7fc fb02 	bl	800c624 <disk_status>
 8010020:	4603      	mov	r3, r0
 8010022:	f003 0301 	and.w	r3, r3, #1
 8010026:	2b00      	cmp	r3, #0
 8010028:	d101      	bne.n	801002e <validate+0x4e>
			res = FR_OK;
 801002a:	2300      	movs	r3, #0
 801002c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801002e:	7bfb      	ldrb	r3, [r7, #15]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d102      	bne.n	801003a <validate+0x5a>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	e000      	b.n	801003c <validate+0x5c>
 801003a:	2300      	movs	r3, #0
 801003c:	683a      	ldr	r2, [r7, #0]
 801003e:	6013      	str	r3, [r2, #0]
	return res;
 8010040:	7bfb      	ldrb	r3, [r7, #15]
}
 8010042:	4618      	mov	r0, r3
 8010044:	3710      	adds	r7, #16
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
	...

0801004c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b088      	sub	sp, #32
 8010050:	af00      	add	r7, sp, #0
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	4613      	mov	r3, r2
 8010058:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801005e:	f107 0310 	add.w	r3, r7, #16
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff fb84 	bl	800f770 <get_ldnumber>
 8010068:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	2b00      	cmp	r3, #0
 801006e:	da01      	bge.n	8010074 <f_mount+0x28>
 8010070:	230b      	movs	r3, #11
 8010072:	e02b      	b.n	80100cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010074:	4a17      	ldr	r2, [pc, #92]	; (80100d4 <f_mount+0x88>)
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801007c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d005      	beq.n	8010090 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010084:	69b8      	ldr	r0, [r7, #24]
 8010086:	f7fc fef7 	bl	800ce78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	2200      	movs	r2, #0
 801008e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d002      	beq.n	801009c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2200      	movs	r2, #0
 801009a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801009c:	68fa      	ldr	r2, [r7, #12]
 801009e:	490d      	ldr	r1, [pc, #52]	; (80100d4 <f_mount+0x88>)
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d002      	beq.n	80100b2 <f_mount+0x66>
 80100ac:	79fb      	ldrb	r3, [r7, #7]
 80100ae:	2b01      	cmp	r3, #1
 80100b0:	d001      	beq.n	80100b6 <f_mount+0x6a>
 80100b2:	2300      	movs	r3, #0
 80100b4:	e00a      	b.n	80100cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80100b6:	f107 010c 	add.w	r1, r7, #12
 80100ba:	f107 0308 	add.w	r3, r7, #8
 80100be:	2200      	movs	r2, #0
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7ff fbfd 	bl	800f8c0 <find_volume>
 80100c6:	4603      	mov	r3, r0
 80100c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3720      	adds	r7, #32
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}
 80100d4:	200101d0 	.word	0x200101d0

080100d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80100d8:	b5b0      	push	{r4, r5, r7, lr}
 80100da:	b0a2      	sub	sp, #136	; 0x88
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	4613      	mov	r3, r2
 80100e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d101      	bne.n	80100f0 <f_open+0x18>
 80100ec:	2309      	movs	r3, #9
 80100ee:	e2a0      	b.n	8010632 <f_open+0x55a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80100f0:	79fb      	ldrb	r3, [r7, #7]
 80100f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80100f8:	79fa      	ldrb	r2, [r7, #7]
 80100fa:	f107 0114 	add.w	r1, r7, #20
 80100fe:	f107 0308 	add.w	r3, r7, #8
 8010102:	4618      	mov	r0, r3
 8010104:	f7ff fbdc 	bl	800f8c0 <find_volume>
 8010108:	4603      	mov	r3, r0
 801010a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 801010e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010112:	2b00      	cmp	r3, #0
 8010114:	f040 8284 	bne.w	8010620 <f_open+0x548>
		dj.obj.fs = fs;
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801011c:	68ba      	ldr	r2, [r7, #8]
 801011e:	f107 0318 	add.w	r3, r7, #24
 8010122:	4611      	mov	r1, r2
 8010124:	4618      	mov	r0, r3
 8010126:	f7ff fa75 	bl	800f614 <follow_path>
 801012a:	4603      	mov	r3, r0
 801012c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010130:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010134:	2b00      	cmp	r3, #0
 8010136:	d11a      	bne.n	801016e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010138:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801013c:	b25b      	sxtb	r3, r3
 801013e:	2b00      	cmp	r3, #0
 8010140:	da03      	bge.n	801014a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010142:	2306      	movs	r3, #6
 8010144:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010148:	e011      	b.n	801016e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801014a:	79fb      	ldrb	r3, [r7, #7]
 801014c:	f023 0301 	bic.w	r3, r3, #1
 8010150:	2b00      	cmp	r3, #0
 8010152:	bf14      	ite	ne
 8010154:	2301      	movne	r3, #1
 8010156:	2300      	moveq	r3, #0
 8010158:	b2db      	uxtb	r3, r3
 801015a:	461a      	mov	r2, r3
 801015c:	f107 0318 	add.w	r3, r7, #24
 8010160:	4611      	mov	r1, r2
 8010162:	4618      	mov	r0, r3
 8010164:	f7fc fd40 	bl	800cbe8 <chk_lock>
 8010168:	4603      	mov	r3, r0
 801016a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801016e:	79fb      	ldrb	r3, [r7, #7]
 8010170:	f003 031c 	and.w	r3, r3, #28
 8010174:	2b00      	cmp	r3, #0
 8010176:	f000 8109 	beq.w	801038c <f_open+0x2b4>
			if (res != FR_OK) {					/* No file, create new */
 801017a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801017e:	2b00      	cmp	r3, #0
 8010180:	d017      	beq.n	80101b2 <f_open+0xda>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010182:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010186:	2b04      	cmp	r3, #4
 8010188:	d10e      	bne.n	80101a8 <f_open+0xd0>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801018a:	f7fc fd89 	bl	800cca0 <enq_lock>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d006      	beq.n	80101a2 <f_open+0xca>
 8010194:	f107 0318 	add.w	r3, r7, #24
 8010198:	4618      	mov	r0, r3
 801019a:	f7fe fdf1 	bl	800ed80 <dir_register>
 801019e:	4603      	mov	r3, r0
 80101a0:	e000      	b.n	80101a4 <f_open+0xcc>
 80101a2:	2312      	movs	r3, #18
 80101a4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80101a8:	79fb      	ldrb	r3, [r7, #7]
 80101aa:	f043 0308 	orr.w	r3, r3, #8
 80101ae:	71fb      	strb	r3, [r7, #7]
 80101b0:	e010      	b.n	80101d4 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80101b2:	7fbb      	ldrb	r3, [r7, #30]
 80101b4:	f003 0311 	and.w	r3, r3, #17
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d003      	beq.n	80101c4 <f_open+0xec>
					res = FR_DENIED;
 80101bc:	2307      	movs	r3, #7
 80101be:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80101c2:	e007      	b.n	80101d4 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80101c4:	79fb      	ldrb	r3, [r7, #7]
 80101c6:	f003 0304 	and.w	r3, r3, #4
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d002      	beq.n	80101d4 <f_open+0xfc>
 80101ce:	2308      	movs	r3, #8
 80101d0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80101d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80101d8:	2b00      	cmp	r3, #0
 80101da:	f040 80f1 	bne.w	80103c0 <f_open+0x2e8>
 80101de:	79fb      	ldrb	r3, [r7, #7]
 80101e0:	f003 0308 	and.w	r3, r3, #8
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	f000 80eb 	beq.w	80103c0 <f_open+0x2e8>
				dw = GET_FATTIME();
 80101ea:	f7f9 fa1f 	bl	800962c <get_fattime>
 80101ee:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	781b      	ldrb	r3, [r3, #0]
 80101f4:	2b04      	cmp	r3, #4
 80101f6:	f040 8082 	bne.w	80102fe <f_open+0x226>
					/* Get current allocation info */
					fp->obj.fs = fs;
 80101fa:	697a      	ldr	r2, [r7, #20]
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	695b      	ldr	r3, [r3, #20]
 8010204:	3334      	adds	r3, #52	; 0x34
 8010206:	4618      	mov	r0, r3
 8010208:	f7fc fac2 	bl	800c790 <ld_dword>
 801020c:	4602      	mov	r2, r0
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	695b      	ldr	r3, [r3, #20]
 8010216:	3338      	adds	r3, #56	; 0x38
 8010218:	4618      	mov	r0, r3
 801021a:	f7fc fadc 	bl	800c7d6 <ld_qword>
 801021e:	4602      	mov	r2, r0
 8010220:	460b      	mov	r3, r1
 8010222:	68f9      	ldr	r1, [r7, #12]
 8010224:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	695b      	ldr	r3, [r3, #20]
 801022c:	3321      	adds	r3, #33	; 0x21
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	f003 0302 	and.w	r3, r3, #2
 8010234:	b2da      	uxtb	r2, r3
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2200      	movs	r2, #0
 801023e:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	695b      	ldr	r3, [r3, #20]
 8010244:	3308      	adds	r3, #8
 8010246:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010248:	4618      	mov	r0, r3
 801024a:	f7fc fb9a 	bl	800c982 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	695b      	ldr	r3, [r3, #20]
 8010252:	3314      	adds	r3, #20
 8010254:	2200      	movs	r2, #0
 8010256:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	695b      	ldr	r3, [r3, #20]
 801025c:	330c      	adds	r3, #12
 801025e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010260:	4618      	mov	r0, r3
 8010262:	f7fc fb8e 	bl	800c982 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	695b      	ldr	r3, [r3, #20]
 801026a:	3315      	adds	r3, #21
 801026c:	2200      	movs	r2, #0
 801026e:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	695b      	ldr	r3, [r3, #20]
 8010274:	3304      	adds	r3, #4
 8010276:	2220      	movs	r2, #32
 8010278:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	695b      	ldr	r3, [r3, #20]
 801027e:	3334      	adds	r3, #52	; 0x34
 8010280:	2100      	movs	r1, #0
 8010282:	4618      	mov	r0, r3
 8010284:	f7fc fb7d 	bl	800c982 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	695b      	ldr	r3, [r3, #20]
 801028c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010290:	f04f 0200 	mov.w	r2, #0
 8010294:	f04f 0300 	mov.w	r3, #0
 8010298:	4608      	mov	r0, r1
 801029a:	f7fc fb9e 	bl	800c9da <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	695b      	ldr	r3, [r3, #20]
 80102a2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80102a6:	f04f 0200 	mov.w	r2, #0
 80102aa:	f04f 0300 	mov.w	r3, #0
 80102ae:	4608      	mov	r0, r1
 80102b0:	f7fc fb93 	bl	800c9da <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	695b      	ldr	r3, [r3, #20]
 80102b8:	3321      	adds	r3, #33	; 0x21
 80102ba:	2201      	movs	r2, #1
 80102bc:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 80102be:	f107 0318 	add.w	r3, r7, #24
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fe faa9 	bl	800e81a <store_xdir>
 80102c8:	4603      	mov	r3, r0
 80102ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 80102ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d174      	bne.n	80103c0 <f_open+0x2e8>
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	689b      	ldr	r3, [r3, #8]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d070      	beq.n	80103c0 <f_open+0x2e8>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	2200      	movs	r2, #0
 80102e6:	4619      	mov	r1, r3
 80102e8:	f7fd faba 	bl	800d860 <remove_chain>
 80102ec:	4603      	mov	r3, r0
 80102ee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	689a      	ldr	r2, [r3, #8]
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	3a01      	subs	r2, #1
 80102fa:	619a      	str	r2, [r3, #24]
 80102fc:	e060      	b.n	80103c0 <f_open+0x2e8>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80102fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010300:	330e      	adds	r3, #14
 8010302:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010304:	4618      	mov	r0, r3
 8010306:	f7fc fb3c 	bl	800c982 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801030a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801030c:	3316      	adds	r3, #22
 801030e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010310:	4618      	mov	r0, r3
 8010312:	f7fc fb36 	bl	800c982 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010318:	330b      	adds	r3, #11
 801031a:	2220      	movs	r2, #32
 801031c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010322:	4611      	mov	r1, r2
 8010324:	4618      	mov	r0, r3
 8010326:	f7fd fe6a 	bl	800dffe <ld_clust>
 801032a:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010330:	2200      	movs	r2, #0
 8010332:	4618      	mov	r0, r3
 8010334:	f7fd fe82 	bl	800e03c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801033a:	331c      	adds	r3, #28
 801033c:	2100      	movs	r1, #0
 801033e:	4618      	mov	r0, r3
 8010340:	f7fc fb1f 	bl	800c982 <st_dword>
					fs->wflag = 1;
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	2201      	movs	r2, #1
 8010348:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801034a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801034c:	2b00      	cmp	r3, #0
 801034e:	d037      	beq.n	80103c0 <f_open+0x2e8>
						dw = fs->winsect;
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010354:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 8010356:	f107 0318 	add.w	r3, r7, #24
 801035a:	2200      	movs	r2, #0
 801035c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801035e:	4618      	mov	r0, r3
 8010360:	f7fd fa7e 	bl	800d860 <remove_chain>
 8010364:	4603      	mov	r3, r0
 8010366:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 801036a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801036e:	2b00      	cmp	r3, #0
 8010370:	d126      	bne.n	80103c0 <f_open+0x2e8>
							res = move_window(fs, dw);
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010376:	4618      	mov	r0, r3
 8010378:	f7fc fde6 	bl	800cf48 <move_window>
 801037c:	4603      	mov	r3, r0
 801037e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010386:	3a01      	subs	r2, #1
 8010388:	619a      	str	r2, [r3, #24]
 801038a:	e019      	b.n	80103c0 <f_open+0x2e8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801038c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010390:	2b00      	cmp	r3, #0
 8010392:	d115      	bne.n	80103c0 <f_open+0x2e8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010394:	7fbb      	ldrb	r3, [r7, #30]
 8010396:	f003 0310 	and.w	r3, r3, #16
 801039a:	2b00      	cmp	r3, #0
 801039c:	d003      	beq.n	80103a6 <f_open+0x2ce>
					res = FR_NO_FILE;
 801039e:	2304      	movs	r3, #4
 80103a0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80103a4:	e00c      	b.n	80103c0 <f_open+0x2e8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80103a6:	79fb      	ldrb	r3, [r7, #7]
 80103a8:	f003 0302 	and.w	r3, r3, #2
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d007      	beq.n	80103c0 <f_open+0x2e8>
 80103b0:	7fbb      	ldrb	r3, [r7, #30]
 80103b2:	f003 0301 	and.w	r3, r3, #1
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d002      	beq.n	80103c0 <f_open+0x2e8>
						res = FR_DENIED;
 80103ba:	2307      	movs	r3, #7
 80103bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 80103c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d128      	bne.n	801041a <f_open+0x342>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80103c8:	79fb      	ldrb	r3, [r7, #7]
 80103ca:	f003 0308 	and.w	r3, r3, #8
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d003      	beq.n	80103da <f_open+0x302>
				mode |= FA_MODIFIED;
 80103d2:	79fb      	ldrb	r3, [r7, #7]
 80103d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 80103e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80103e8:	79fb      	ldrb	r3, [r7, #7]
 80103ea:	f023 0301 	bic.w	r3, r3, #1
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	bf14      	ite	ne
 80103f2:	2301      	movne	r3, #1
 80103f4:	2300      	moveq	r3, #0
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	461a      	mov	r2, r3
 80103fa:	f107 0318 	add.w	r3, r7, #24
 80103fe:	4611      	mov	r1, r2
 8010400:	4618      	mov	r0, r3
 8010402:	f7fc fc6f 	bl	800cce4 <inc_lock>
 8010406:	4602      	mov	r2, r0
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010410:	2b00      	cmp	r3, #0
 8010412:	d102      	bne.n	801041a <f_open+0x342>
 8010414:	2302      	movs	r3, #2
 8010416:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 801041a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801041e:	2b00      	cmp	r3, #0
 8010420:	f040 80fe 	bne.w	8010620 <f_open+0x548>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	2b04      	cmp	r3, #4
 801042a:	d12c      	bne.n	8010486 <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 801042c:	6a3a      	ldr	r2, [r7, #32]
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8010432:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010436:	4613      	mov	r3, r2
 8010438:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801043c:	7ffa      	ldrb	r2, [r7, #31]
 801043e:	431a      	orrs	r2, r3
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8010444:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	695b      	ldr	r3, [r3, #20]
 801044e:	3334      	adds	r3, #52	; 0x34
 8010450:	4618      	mov	r0, r3
 8010452:	f7fc f99d 	bl	800c790 <ld_dword>
 8010456:	4602      	mov	r2, r0
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	695b      	ldr	r3, [r3, #20]
 8010460:	3338      	adds	r3, #56	; 0x38
 8010462:	4618      	mov	r0, r3
 8010464:	f7fc f9b7 	bl	800c7d6 <ld_qword>
 8010468:	4602      	mov	r2, r0
 801046a:	460b      	mov	r3, r1
 801046c:	68f9      	ldr	r1, [r7, #12]
 801046e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	695b      	ldr	r3, [r3, #20]
 8010476:	3321      	adds	r3, #33	; 0x21
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	f003 0302 	and.w	r3, r3, #2
 801047e:	b2da      	uxtb	r2, r3
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	71da      	strb	r2, [r3, #7]
 8010484:	e014      	b.n	80104b0 <f_open+0x3d8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801048a:	4611      	mov	r1, r2
 801048c:	4618      	mov	r0, r3
 801048e:	f7fd fdb6 	bl	800dffe <ld_clust>
 8010492:	4602      	mov	r2, r0
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801049a:	331c      	adds	r3, #28
 801049c:	4618      	mov	r0, r3
 801049e:	f7fc f977 	bl	800c790 <ld_dword>
 80104a2:	4603      	mov	r3, r0
 80104a4:	461a      	mov	r2, r3
 80104a6:	f04f 0300 	mov.w	r3, #0
 80104aa:	68f9      	ldr	r1, [r7, #12]
 80104ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2200      	movs	r2, #0
 80104b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80104b6:	697a      	ldr	r2, [r7, #20]
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	88da      	ldrh	r2, [r3, #6]
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	79fa      	ldrb	r2, [r7, #7]
 80104c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2200      	movs	r2, #0
 80104d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2200      	movs	r2, #0
 80104d8:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 80104da:	68f9      	ldr	r1, [r7, #12]
 80104dc:	f04f 0200 	mov.w	r2, #0
 80104e0:	f04f 0300 	mov.w	r3, #0
 80104e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	3354      	adds	r3, #84	; 0x54
 80104ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80104f0:	2100      	movs	r1, #0
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7fc fb1a 	bl	800cb2c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80104f8:	79fb      	ldrb	r3, [r7, #7]
 80104fa:	f003 0320 	and.w	r3, r3, #32
 80104fe:	2b00      	cmp	r3, #0
 8010500:	f000 808e 	beq.w	8010620 <f_open+0x548>
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801050a:	4313      	orrs	r3, r2
 801050c:	f000 8088 	beq.w	8010620 <f_open+0x548>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010516:	68f9      	ldr	r1, [r7, #12]
 8010518:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	895b      	ldrh	r3, [r3, #10]
 8010520:	461a      	mov	r2, r3
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	899b      	ldrh	r3, [r3, #12]
 8010526:	fb03 f302 	mul.w	r3, r3, r2
 801052a:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	689b      	ldr	r3, [r3, #8]
 8010530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801053a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 801053e:	e021      	b.n	8010584 <f_open+0x4ac>
					clst = get_fat(&fp->obj, clst);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010546:	4618      	mov	r0, r3
 8010548:	f7fc fdbc 	bl	800d0c4 <get_fat>
 801054c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 8010550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010554:	2b01      	cmp	r3, #1
 8010556:	d802      	bhi.n	801055e <f_open+0x486>
 8010558:	2302      	movs	r3, #2
 801055a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801055e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010566:	d102      	bne.n	801056e <f_open+0x496>
 8010568:	2301      	movs	r3, #1
 801056a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801056e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010570:	461a      	mov	r2, r3
 8010572:	f04f 0300 	mov.w	r3, #0
 8010576:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 801057a:	1a84      	subs	r4, r0, r2
 801057c:	eb61 0503 	sbc.w	r5, r1, r3
 8010580:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
 8010584:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010588:	2b00      	cmp	r3, #0
 801058a:	d109      	bne.n	80105a0 <f_open+0x4c8>
 801058c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801058e:	4618      	mov	r0, r3
 8010590:	f04f 0100 	mov.w	r1, #0
 8010594:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010598:	4299      	cmp	r1, r3
 801059a:	bf08      	it	eq
 801059c:	4290      	cmpeq	r0, r2
 801059e:	d3cf      	bcc.n	8010540 <f_open+0x468>
				}
				fp->clust = clst;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80105a6:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80105a8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d137      	bne.n	8010620 <f_open+0x548>
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	899b      	ldrh	r3, [r3, #12]
 80105b4:	b29a      	uxth	r2, r3
 80105b6:	f04f 0300 	mov.w	r3, #0
 80105ba:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80105be:	f7ef fe5f 	bl	8000280 <__aeabi_uldivmod>
 80105c2:	4313      	orrs	r3, r2
 80105c4:	d02c      	beq.n	8010620 <f_open+0x548>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fc fd59 	bl	800d084 <clust2sect>
 80105d2:	66b8      	str	r0, [r7, #104]	; 0x68
 80105d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d103      	bne.n	80105e2 <f_open+0x50a>
						res = FR_INT_ERR;
 80105da:	2302      	movs	r3, #2
 80105dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80105e0:	e01e      	b.n	8010620 <f_open+0x548>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	899b      	ldrh	r3, [r3, #12]
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	f04f 0300 	mov.w	r3, #0
 80105ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80105f0:	f7ef fe46 	bl	8000280 <__aeabi_uldivmod>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105fa:	441a      	add	r2, r3
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	7858      	ldrb	r0, [r3, #1]
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801060e:	2301      	movs	r3, #1
 8010610:	f7fc f848 	bl	800c6a4 <disk_read>
 8010614:	4603      	mov	r3, r0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d002      	beq.n	8010620 <f_open+0x548>
 801061a:	2301      	movs	r3, #1
 801061c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010620:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010624:	2b00      	cmp	r3, #0
 8010626:	d002      	beq.n	801062e <f_open+0x556>
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2200      	movs	r2, #0
 801062c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801062e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8010632:	4618      	mov	r0, r3
 8010634:	3788      	adds	r7, #136	; 0x88
 8010636:	46bd      	mov	sp, r7
 8010638:	bdb0      	pop	{r4, r5, r7, pc}

0801063a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801063a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801063e:	b091      	sub	sp, #68	; 0x44
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	607a      	str	r2, [r7, #4]
 8010648:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	2200      	movs	r2, #0
 8010652:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f107 0214 	add.w	r2, r7, #20
 801065a:	4611      	mov	r1, r2
 801065c:	4618      	mov	r0, r3
 801065e:	f7ff fcbf 	bl	800ffe0 <validate>
 8010662:	4603      	mov	r3, r0
 8010664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010668:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801066c:	2b00      	cmp	r3, #0
 801066e:	d108      	bne.n	8010682 <f_read+0x48>
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010676:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801067a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801067e:	2b00      	cmp	r3, #0
 8010680:	d002      	beq.n	8010688 <f_read+0x4e>
 8010682:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010686:	e15f      	b.n	8010948 <f_read+0x30e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801068e:	f003 0301 	and.w	r3, r3, #1
 8010692:	2b00      	cmp	r3, #0
 8010694:	d101      	bne.n	801069a <f_read+0x60>
 8010696:	2307      	movs	r3, #7
 8010698:	e156      	b.n	8010948 <f_read+0x30e>
	remain = fp->obj.objsize - fp->fptr;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80106a6:	ebb0 0802 	subs.w	r8, r0, r2
 80106aa:	eb61 0903 	sbc.w	r9, r1, r3
 80106ae:	e9c7 8908 	strd	r8, r9, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	461a      	mov	r2, r3
 80106b6:	f04f 0300 	mov.w	r3, #0
 80106ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80106be:	4299      	cmp	r1, r3
 80106c0:	bf08      	it	eq
 80106c2:	4290      	cmpeq	r0, r2
 80106c4:	f080 813b 	bcs.w	801093e <f_read+0x304>
 80106c8:	6a3b      	ldr	r3, [r7, #32]
 80106ca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80106cc:	e137      	b.n	801093e <f_read+0x304>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	899b      	ldrh	r3, [r3, #12]
 80106d8:	b29a      	uxth	r2, r3
 80106da:	f04f 0300 	mov.w	r3, #0
 80106de:	f7ef fdcf 	bl	8000280 <__aeabi_uldivmod>
 80106e2:	4313      	orrs	r3, r2
 80106e4:	f040 80e6 	bne.w	80108b4 <f_read+0x27a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	899b      	ldrh	r3, [r3, #12]
 80106f2:	b29a      	uxth	r2, r3
 80106f4:	f04f 0300 	mov.w	r3, #0
 80106f8:	f7ef fdc2 	bl	8000280 <__aeabi_uldivmod>
 80106fc:	4602      	mov	r2, r0
 80106fe:	460b      	mov	r3, r1
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	895b      	ldrh	r3, [r3, #10]
 8010704:	3b01      	subs	r3, #1
 8010706:	4013      	ands	r3, r2
 8010708:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801070a:	69fb      	ldr	r3, [r7, #28]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d132      	bne.n	8010776 <f_read+0x13c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010716:	4313      	orrs	r3, r2
 8010718:	d103      	bne.n	8010722 <f_read+0xe8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	689b      	ldr	r3, [r3, #8]
 801071e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010720:	e013      	b.n	801074a <f_read+0x110>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010726:	2b00      	cmp	r3, #0
 8010728:	d007      	beq.n	801073a <f_read+0x100>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010730:	68f8      	ldr	r0, [r7, #12]
 8010732:	f7fd fa4a 	bl	800dbca <clmt_clust>
 8010736:	63b8      	str	r0, [r7, #56]	; 0x38
 8010738:	e007      	b.n	801074a <f_read+0x110>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801073a:	68fa      	ldr	r2, [r7, #12]
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010740:	4619      	mov	r1, r3
 8010742:	4610      	mov	r0, r2
 8010744:	f7fc fcbe 	bl	800d0c4 <get_fat>
 8010748:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801074a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074c:	2b01      	cmp	r3, #1
 801074e:	d805      	bhi.n	801075c <f_read+0x122>
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	2202      	movs	r2, #2
 8010754:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010758:	2302      	movs	r3, #2
 801075a:	e0f5      	b.n	8010948 <f_read+0x30e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801075c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010762:	d105      	bne.n	8010770 <f_read+0x136>
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2201      	movs	r2, #1
 8010768:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801076c:	2301      	movs	r3, #1
 801076e:	e0eb      	b.n	8010948 <f_read+0x30e>
				fp->clust = clst;				/* Update current cluster */
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010774:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010776:	697a      	ldr	r2, [r7, #20]
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801077c:	4619      	mov	r1, r3
 801077e:	4610      	mov	r0, r2
 8010780:	f7fc fc80 	bl	800d084 <clust2sect>
 8010784:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010786:	69bb      	ldr	r3, [r7, #24]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d105      	bne.n	8010798 <f_read+0x15e>
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2202      	movs	r2, #2
 8010790:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010794:	2302      	movs	r3, #2
 8010796:	e0d7      	b.n	8010948 <f_read+0x30e>
			sect += csect;
 8010798:	69ba      	ldr	r2, [r7, #24]
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	4413      	add	r3, r2
 801079e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	899b      	ldrh	r3, [r3, #12]
 80107a4:	461a      	mov	r2, r3
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80107ac:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 80107ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d043      	beq.n	801083c <f_read+0x202>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80107b4:	69fa      	ldr	r2, [r7, #28]
 80107b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b8:	4413      	add	r3, r2
 80107ba:	697a      	ldr	r2, [r7, #20]
 80107bc:	8952      	ldrh	r2, [r2, #10]
 80107be:	4293      	cmp	r3, r2
 80107c0:	d905      	bls.n	80107ce <f_read+0x194>
					cc = fs->csize - csect;
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	895b      	ldrh	r3, [r3, #10]
 80107c6:	461a      	mov	r2, r3
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	1ad3      	subs	r3, r2, r3
 80107cc:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	7858      	ldrb	r0, [r3, #1]
 80107d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d4:	69ba      	ldr	r2, [r7, #24]
 80107d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107d8:	f7fb ff64 	bl	800c6a4 <disk_read>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d005      	beq.n	80107ee <f_read+0x1b4>
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2201      	movs	r2, #1
 80107e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80107ea:	2301      	movs	r3, #1
 80107ec:	e0ac      	b.n	8010948 <f_read+0x30e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107f4:	b25b      	sxtb	r3, r3
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	da18      	bge.n	801082c <f_read+0x1f2>
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	1ad3      	subs	r3, r2, r3
 8010802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010804:	429a      	cmp	r2, r3
 8010806:	d911      	bls.n	801082c <f_read+0x1f2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801080c:	69bb      	ldr	r3, [r7, #24]
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	697a      	ldr	r2, [r7, #20]
 8010812:	8992      	ldrh	r2, [r2, #12]
 8010814:	fb02 f303 	mul.w	r3, r2, r3
 8010818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801081a:	18d0      	adds	r0, r2, r3
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	899b      	ldrh	r3, [r3, #12]
 8010826:	461a      	mov	r2, r3
 8010828:	f7fc f95f 	bl	800caea <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	899b      	ldrh	r3, [r3, #12]
 8010830:	461a      	mov	r2, r3
 8010832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010834:	fb02 f303 	mul.w	r3, r2, r3
 8010838:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 801083a:	e065      	b.n	8010908 <f_read+0x2ce>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010840:	69ba      	ldr	r2, [r7, #24]
 8010842:	429a      	cmp	r2, r3
 8010844:	d033      	beq.n	80108ae <f_read+0x274>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801084c:	b25b      	sxtb	r3, r3
 801084e:	2b00      	cmp	r3, #0
 8010850:	da1b      	bge.n	801088a <f_read+0x250>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	7858      	ldrb	r0, [r3, #1]
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010860:	2301      	movs	r3, #1
 8010862:	f7fb ff3f 	bl	800c6e4 <disk_write>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	d005      	beq.n	8010878 <f_read+0x23e>
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2201      	movs	r2, #1
 8010870:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010874:	2301      	movs	r3, #1
 8010876:	e067      	b.n	8010948 <f_read+0x30e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801087e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010882:	b2da      	uxtb	r2, r3
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	7858      	ldrb	r0, [r3, #1]
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010894:	2301      	movs	r3, #1
 8010896:	69ba      	ldr	r2, [r7, #24]
 8010898:	f7fb ff04 	bl	800c6a4 <disk_read>
 801089c:	4603      	mov	r3, r0
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d005      	beq.n	80108ae <f_read+0x274>
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2201      	movs	r2, #1
 80108a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80108aa:	2301      	movs	r3, #1
 80108ac:	e04c      	b.n	8010948 <f_read+0x30e>
			}
#endif
			fp->sect = sect;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	69ba      	ldr	r2, [r7, #24]
 80108b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	899b      	ldrh	r3, [r3, #12]
 80108b8:	4618      	mov	r0, r3
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80108c0:	4613      	mov	r3, r2
 80108c2:	697a      	ldr	r2, [r7, #20]
 80108c4:	8992      	ldrh	r2, [r2, #12]
 80108c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80108ca:	fb02 f201 	mul.w	r2, r2, r1
 80108ce:	1a9b      	subs	r3, r3, r2
 80108d0:	1ac3      	subs	r3, r0, r3
 80108d2:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80108d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	429a      	cmp	r2, r3
 80108da:	d901      	bls.n	80108e0 <f_read+0x2a6>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f103 0654 	add.w	r6, r3, #84	; 0x54
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	899b      	ldrh	r3, [r3, #12]
 80108f0:	b29a      	uxth	r2, r3
 80108f2:	f04f 0300 	mov.w	r3, #0
 80108f6:	f7ef fcc3 	bl	8000280 <__aeabi_uldivmod>
 80108fa:	4613      	mov	r3, r2
 80108fc:	4433      	add	r3, r6
 80108fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010900:	4619      	mov	r1, r3
 8010902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010904:	f7fc f8f1 	bl	800caea <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801090a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801090c:	4413      	add	r3, r2
 801090e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010918:	461a      	mov	r2, r3
 801091a:	f04f 0300 	mov.w	r3, #0
 801091e:	1884      	adds	r4, r0, r2
 8010920:	eb41 0503 	adc.w	r5, r1, r3
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010930:	441a      	add	r2, r3
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	601a      	str	r2, [r3, #0]
 8010936:	687a      	ldr	r2, [r7, #4]
 8010938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093a:	1ad3      	subs	r3, r2, r3
 801093c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2b00      	cmp	r3, #0
 8010942:	f47f aec4 	bne.w	80106ce <f_read+0x94>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010946:	2300      	movs	r3, #0
}
 8010948:	4618      	mov	r0, r3
 801094a:	3744      	adds	r7, #68	; 0x44
 801094c:	46bd      	mov	sp, r7
 801094e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010952 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010952:	b580      	push	{r7, lr}
 8010954:	b09a      	sub	sp, #104	; 0x68
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010960:	4611      	mov	r1, r2
 8010962:	4618      	mov	r0, r3
 8010964:	f7ff fb3c 	bl	800ffe0 <validate>
 8010968:	4603      	mov	r3, r0
 801096a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801096e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010972:	2b00      	cmp	r3, #0
 8010974:	f040 8105 	bne.w	8010b82 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801097e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010982:	2b00      	cmp	r3, #0
 8010984:	f000 80fd 	beq.w	8010b82 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801098e:	b25b      	sxtb	r3, r3
 8010990:	2b00      	cmp	r3, #0
 8010992:	da17      	bge.n	80109c4 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010996:	7858      	ldrb	r0, [r3, #1]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109a2:	2301      	movs	r3, #1
 80109a4:	f7fb fe9e 	bl	800c6e4 <disk_write>
 80109a8:	4603      	mov	r3, r0
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d001      	beq.n	80109b2 <f_sync+0x60>
 80109ae:	2301      	movs	r3, #1
 80109b0:	e0e9      	b.n	8010b86 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109bc:	b2da      	uxtb	r2, r3
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80109c4:	f7f8 fe32 	bl	800962c <get_fattime>
 80109c8:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80109ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	2b04      	cmp	r3, #4
 80109d0:	f040 808c 	bne.w	8010aec <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fc fee2 	bl	800d7a0 <fill_first_frag>
 80109dc:	4603      	mov	r3, r0
 80109de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80109e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d10a      	bne.n	8010a00 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f0:	f04f 32ff 	mov.w	r2, #4294967295
 80109f4:	4619      	mov	r1, r3
 80109f6:	f7fc ff02 	bl	800d7fe <fill_last_frag>
 80109fa:	4603      	mov	r3, r0
 80109fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8010a00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f040 80bc 	bne.w	8010b82 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	f107 0308 	add.w	r3, r7, #8
 8010a10:	4611      	mov	r1, r2
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fd fec6 	bl	800e7a4 <load_obj_dir>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8010a1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	f040 80ad 	bne.w	8010b82 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8010a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a2a:	695b      	ldr	r3, [r3, #20]
 8010a2c:	3304      	adds	r3, #4
 8010a2e:	781a      	ldrb	r2, [r3, #0]
 8010a30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a32:	695b      	ldr	r3, [r3, #20]
 8010a34:	3304      	adds	r3, #4
 8010a36:	f042 0220 	orr.w	r2, r2, #32
 8010a3a:	b2d2      	uxtb	r2, r2
 8010a3c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	79da      	ldrb	r2, [r3, #7]
 8010a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a44:	695b      	ldr	r3, [r3, #20]
 8010a46:	3321      	adds	r3, #33	; 0x21
 8010a48:	f042 0201 	orr.w	r2, r2, #1
 8010a4c:	b2d2      	uxtb	r2, r2
 8010a4e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8010a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a52:	695b      	ldr	r3, [r3, #20]
 8010a54:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	689b      	ldr	r3, [r3, #8]
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	4610      	mov	r0, r2
 8010a60:	f7fb ff8f 	bl	800c982 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8010a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a66:	695b      	ldr	r3, [r3, #20]
 8010a68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010a72:	4608      	mov	r0, r1
 8010a74:	f7fb ffb1 	bl	800c9da <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8010a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a7a:	695b      	ldr	r3, [r3, #20]
 8010a7c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010a86:	4608      	mov	r0, r1
 8010a88:	f7fb ffa7 	bl	800c9da <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8010a8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a8e:	695b      	ldr	r3, [r3, #20]
 8010a90:	330c      	adds	r3, #12
 8010a92:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7fb ff74 	bl	800c982 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8010a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a9c:	695b      	ldr	r3, [r3, #20]
 8010a9e:	3315      	adds	r3, #21
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8010aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010aa6:	695b      	ldr	r3, [r3, #20]
 8010aa8:	3310      	adds	r3, #16
 8010aaa:	2100      	movs	r1, #0
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fb ff68 	bl	800c982 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8010ab2:	f107 0308 	add.w	r3, r7, #8
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7fd feaf 	bl	800e81a <store_xdir>
 8010abc:	4603      	mov	r3, r0
 8010abe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010ac2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d15b      	bne.n	8010b82 <f_sync+0x230>
							res = sync_fs(fs);
 8010aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7fc fa69 	bl	800cfa4 <sync_fs>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ae2:	b2da      	uxtb	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010aea:	e04a      	b.n	8010b82 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010aec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010af2:	4619      	mov	r1, r3
 8010af4:	4610      	mov	r0, r2
 8010af6:	f7fc fa27 	bl	800cf48 <move_window>
 8010afa:	4603      	mov	r3, r0
 8010afc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010b00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d13c      	bne.n	8010b82 <f_sync+0x230>
					dir = fp->dir_ptr;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b10:	330b      	adds	r3, #11
 8010b12:	781a      	ldrb	r2, [r3, #0]
 8010b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b16:	330b      	adds	r3, #11
 8010b18:	f042 0220 	orr.w	r2, r2, #32
 8010b1c:	b2d2      	uxtb	r2, r2
 8010b1e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6818      	ldr	r0, [r3, #0]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	689b      	ldr	r3, [r3, #8]
 8010b28:	461a      	mov	r2, r3
 8010b2a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010b2c:	f7fd fa86 	bl	800e03c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010b30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b32:	f103 001c 	add.w	r0, r3, #28
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	4619      	mov	r1, r3
 8010b40:	f7fb ff1f 	bl	800c982 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b46:	3316      	adds	r3, #22
 8010b48:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7fb ff19 	bl	800c982 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b52:	3312      	adds	r3, #18
 8010b54:	2100      	movs	r1, #0
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7fb fef8 	bl	800c94c <st_word>
					fs->wflag = 1;
 8010b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b5e:	2201      	movs	r2, #1
 8010b60:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7fc fa1d 	bl	800cfa4 <sync_fs>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b7a:	b2da      	uxtb	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010b82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3768      	adds	r7, #104	; 0x68
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}

08010b8e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b084      	sub	sp, #16
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f7ff fedb 	bl	8010952 <f_sync>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010ba0:	7bfb      	ldrb	r3, [r7, #15]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d118      	bne.n	8010bd8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f107 0208 	add.w	r2, r7, #8
 8010bac:	4611      	mov	r1, r2
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7ff fa16 	bl	800ffe0 <validate>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010bb8:	7bfb      	ldrb	r3, [r7, #15]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d10c      	bne.n	8010bd8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fc f91c 	bl	800ce00 <dec_lock>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010bcc:	7bfb      	ldrb	r3, [r7, #15]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d102      	bne.n	8010bd8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3710      	adds	r7, #16
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}

08010be2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010be2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010be6:	b0a4      	sub	sp, #144	; 0x90
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010bec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010bf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010bf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	4610      	mov	r0, r2
 8010bfa:	f7ff f9f1 	bl	800ffe0 <validate>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010c04:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d104      	bne.n	8010c16 <f_lseek+0x34>
 8010c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010c12:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 8010c16:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d10e      	bne.n	8010c3c <f_lseek+0x5a>
 8010c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	2b04      	cmp	r3, #4
 8010c24:	d10a      	bne.n	8010c3c <f_lseek+0x5a>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8010c26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c30:	4619      	mov	r1, r3
 8010c32:	f7fc fde4 	bl	800d7fe <fill_last_frag>
 8010c36:	4603      	mov	r3, r0
 8010c38:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010c3c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d002      	beq.n	8010c4a <f_lseek+0x68>
 8010c44:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c48:	e308      	b.n	801125c <f_lseek+0x67a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f000 8109 	beq.w	8010e66 <f_lseek+0x284>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010c54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c5c:	bf08      	it	eq
 8010c5e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8010c62:	d166      	bne.n	8010d32 <f_lseek+0x150>
			tbl = fp->cltbl;
 8010c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c68:	677b      	str	r3, [r7, #116]	; 0x74
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c6c:	1d1a      	adds	r2, r3, #4
 8010c6e:	677a      	str	r2, [r7, #116]	; 0x74
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010c74:	2302      	movs	r3, #2
 8010c76:	67bb      	str	r3, [r7, #120]	; 0x78
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c7a:	689b      	ldr	r3, [r3, #8]
 8010c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if (cl) {
 8010c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d044      	beq.n	8010d12 <f_lseek+0x130>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c8e:	2300      	movs	r3, #0
 8010c90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c94:	3302      	adds	r3, #2
 8010c96:	67bb      	str	r3, [r7, #120]	; 0x78
					do {
						pcl = cl; ncl++;
 8010c98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c9c:	657b      	str	r3, [r7, #84]	; 0x54
 8010c9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
						cl = get_fat(&fp->obj, cl);
 8010ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ca6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7fc fa0a 	bl	800d0c4 <get_fat>
 8010cb0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d805      	bhi.n	8010cc8 <f_lseek+0xe6>
 8010cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cbe:	2202      	movs	r2, #2
 8010cc0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010cc4:	2302      	movs	r3, #2
 8010cc6:	e2c9      	b.n	801125c <f_lseek+0x67a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cd0:	d105      	bne.n	8010cde <f_lseek+0xfc>
 8010cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010cda:	2301      	movs	r3, #1
 8010cdc:	e2be      	b.n	801125c <f_lseek+0x67a>
					} while (cl == pcl + 1);
 8010cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d0d6      	beq.n	8010c98 <f_lseek+0xb6>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010cea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d809      	bhi.n	8010d06 <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 8010cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010cf4:	1d1a      	adds	r2, r3, #4
 8010cf6:	677a      	str	r2, [r7, #116]	; 0x74
 8010cf8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010cfa:	601a      	str	r2, [r3, #0]
 8010cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010cfe:	1d1a      	adds	r2, r3, #4
 8010d00:	677a      	str	r2, [r7, #116]	; 0x74
 8010d02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d04:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d08:	6a1b      	ldr	r3, [r3, #32]
 8010d0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d3ba      	bcc.n	8010c88 <f_lseek+0xa6>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d16:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010d18:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010d1a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d803      	bhi.n	8010d2a <f_lseek+0x148>
				*tbl = 0;		/* Terminate table */
 8010d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d24:	2200      	movs	r2, #0
 8010d26:	601a      	str	r2, [r3, #0]
 8010d28:	e296      	b.n	8011258 <f_lseek+0x676>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010d2a:	2311      	movs	r3, #17
 8010d2c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010d30:	e292      	b.n	8011258 <f_lseek+0x676>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d34:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010d38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010d3c:	4299      	cmp	r1, r3
 8010d3e:	bf08      	it	eq
 8010d40:	4290      	cmpeq	r0, r2
 8010d42:	d204      	bcs.n	8010d4e <f_lseek+0x16c>
 8010d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010d4a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			fp->fptr = ofs;				/* Set file pointer */
 8010d4e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010d50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010d54:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 8010d58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	f000 827b 	beq.w	8011258 <f_lseek+0x676>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010d62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010d66:	f112 38ff 	adds.w	r8, r2, #4294967295
 8010d6a:	f143 39ff 	adc.w	r9, r3, #4294967295
 8010d6e:	4642      	mov	r2, r8
 8010d70:	464b      	mov	r3, r9
 8010d72:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010d74:	f7fc ff29 	bl	800dbca <clmt_clust>
 8010d78:	4602      	mov	r2, r0
 8010d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d7c:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 8010d7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d84:	4619      	mov	r1, r3
 8010d86:	4610      	mov	r0, r2
 8010d88:	f7fc f97c 	bl	800d084 <clust2sect>
 8010d8c:	6638      	str	r0, [r7, #96]	; 0x60
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d105      	bne.n	8010da0 <f_lseek+0x1be>
 8010d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d96:	2202      	movs	r2, #2
 8010d98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010d9c:	2302      	movs	r3, #2
 8010d9e:	e25d      	b.n	801125c <f_lseek+0x67a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010da0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010da4:	f112 34ff 	adds.w	r4, r2, #4294967295
 8010da8:	f143 35ff 	adc.w	r5, r3, #4294967295
 8010dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dae:	899b      	ldrh	r3, [r3, #12]
 8010db0:	b29a      	uxth	r2, r3
 8010db2:	f04f 0300 	mov.w	r3, #0
 8010db6:	4620      	mov	r0, r4
 8010db8:	4629      	mov	r1, r5
 8010dba:	f7ef fa61 	bl	8000280 <__aeabi_uldivmod>
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dc4:	895b      	ldrh	r3, [r3, #10]
 8010dc6:	3b01      	subs	r3, #1
 8010dc8:	4013      	ands	r3, r2
 8010dca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010dcc:	4413      	add	r3, r2
 8010dce:	663b      	str	r3, [r7, #96]	; 0x60
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dd2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dd8:	899b      	ldrh	r3, [r3, #12]
 8010dda:	b29a      	uxth	r2, r3
 8010ddc:	f04f 0300 	mov.w	r3, #0
 8010de0:	f7ef fa4e 	bl	8000280 <__aeabi_uldivmod>
 8010de4:	4313      	orrs	r3, r2
 8010de6:	f000 8237 	beq.w	8011258 <f_lseek+0x676>
 8010dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010df0:	429a      	cmp	r2, r3
 8010df2:	f000 8231 	beq.w	8011258 <f_lseek+0x676>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010df8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dfc:	b25b      	sxtb	r3, r3
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	da1b      	bge.n	8010e3a <f_lseek+0x258>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e04:	7858      	ldrb	r0, [r3, #1]
 8010e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e08:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e10:	2301      	movs	r3, #1
 8010e12:	f7fb fc67 	bl	800c6e4 <disk_write>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d005      	beq.n	8010e28 <f_lseek+0x246>
 8010e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e1e:	2201      	movs	r2, #1
 8010e20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010e24:	2301      	movs	r3, #1
 8010e26:	e219      	b.n	801125c <f_lseek+0x67a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e32:	b2da      	uxtb	r2, r3
 8010e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e3c:	7858      	ldrb	r0, [r3, #1]
 8010e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e40:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010e44:	2301      	movs	r3, #1
 8010e46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010e48:	f7fb fc2c 	bl	800c6a4 <disk_read>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d005      	beq.n	8010e5e <f_lseek+0x27c>
 8010e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e54:	2201      	movs	r2, #1
 8010e56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	e1fe      	b.n	801125c <f_lseek+0x67a>
#endif
					fp->sect = dsc;
 8010e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010e62:	645a      	str	r2, [r3, #68]	; 0x44
 8010e64:	e1f8      	b.n	8011258 <f_lseek+0x676>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 8010e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	2b04      	cmp	r3, #4
 8010e6c:	d00b      	beq.n	8010e86 <f_lseek+0x2a4>
 8010e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	bf08      	it	eq
 8010e76:	2a00      	cmpeq	r2, #0
 8010e78:	d305      	bcc.n	8010e86 <f_lseek+0x2a4>
 8010e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e7e:	f04f 0300 	mov.w	r3, #0
 8010e82:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e88:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010e8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010e90:	4299      	cmp	r1, r3
 8010e92:	bf08      	it	eq
 8010e94:	4290      	cmpeq	r0, r2
 8010e96:	d20b      	bcs.n	8010eb0 <f_lseek+0x2ce>
 8010e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e9e:	f003 0302 	and.w	r3, r3, #2
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d104      	bne.n	8010eb0 <f_lseek+0x2ce>
			ofs = fp->obj.objsize;
 8010ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ea8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010eac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		}
		ifptr = fp->fptr;
 8010eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eb2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010eb6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		fp->fptr = nsect = 0;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ec0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010ec2:	f04f 0200 	mov.w	r2, #0
 8010ec6:	f04f 0300 	mov.w	r3, #0
 8010eca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 8010ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010ed2:	4313      	orrs	r3, r2
 8010ed4:	f000 815c 	beq.w	8011190 <f_lseek+0x5ae>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010eda:	895b      	ldrh	r3, [r3, #10]
 8010edc:	461a      	mov	r2, r3
 8010ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ee0:	899b      	ldrh	r3, [r3, #12]
 8010ee2:	fb03 f302 	mul.w	r3, r3, r2
 8010ee6:	667b      	str	r3, [r7, #100]	; 0x64
			if (ifptr > 0 &&
 8010ee8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010eec:	4313      	orrs	r3, r2
 8010eee:	d05c      	beq.n	8010faa <f_lseek+0x3c8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010ef0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8010ef4:	f112 31ff 	adds.w	r1, r2, #4294967295
 8010ef8:	63b9      	str	r1, [r7, #56]	; 0x38
 8010efa:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f02:	461a      	mov	r2, r3
 8010f04:	f04f 0300 	mov.w	r3, #0
 8010f08:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8010f0c:	f7ef f9b8 	bl	8000280 <__aeabi_uldivmod>
 8010f10:	4602      	mov	r2, r0
 8010f12:	460b      	mov	r3, r1
 8010f14:	4614      	mov	r4, r2
 8010f16:	461d      	mov	r5, r3
 8010f18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010f1c:	f112 31ff 	adds.w	r1, r2, #4294967295
 8010f20:	6339      	str	r1, [r7, #48]	; 0x30
 8010f22:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010f26:	637b      	str	r3, [r7, #52]	; 0x34
 8010f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f2a:	461a      	mov	r2, r3
 8010f2c:	f04f 0300 	mov.w	r3, #0
 8010f30:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8010f34:	f7ef f9a4 	bl	8000280 <__aeabi_uldivmod>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 8010f3c:	429d      	cmp	r5, r3
 8010f3e:	bf08      	it	eq
 8010f40:	4294      	cmpeq	r4, r2
 8010f42:	d332      	bcc.n	8010faa <f_lseek+0x3c8>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010f44:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010f48:	f112 31ff 	adds.w	r1, r2, #4294967295
 8010f4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8010f4e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f56:	3b01      	subs	r3, #1
 8010f58:	461a      	mov	r2, r3
 8010f5a:	f04f 0300 	mov.w	r3, #0
 8010f5e:	ea6f 0a02 	mvn.w	sl, r2
 8010f62:	ea6f 0b03 	mvn.w	fp, r3
 8010f66:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	ea03 030a 	and.w	r3, r3, sl
 8010f70:	623b      	str	r3, [r7, #32]
 8010f72:	4613      	mov	r3, r2
 8010f74:	ea03 030b 	and.w	r3, r3, fp
 8010f78:	627b      	str	r3, [r7, #36]	; 0x24
 8010f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f7c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010f80:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 8010f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010f8a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8010f8e:	1a84      	subs	r4, r0, r2
 8010f90:	60bc      	str	r4, [r7, #8]
 8010f92:	eb61 0303 	sbc.w	r3, r1, r3
 8010f96:	60fb      	str	r3, [r7, #12]
 8010f98:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010f9c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
				clst = fp->clust;
 8010fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010fa8:	e02b      	b.n	8011002 <f_lseek+0x420>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d11f      	bne.n	8010ffa <f_lseek+0x418>
					clst = create_chain(&fp->obj, 0);
 8010fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fbc:	2100      	movs	r1, #0
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7fc fd02 	bl	800d9c8 <create_chain>
 8010fc4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	d105      	bne.n	8010fdc <f_lseek+0x3fa>
 8010fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fd2:	2202      	movs	r2, #2
 8010fd4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010fd8:	2302      	movs	r3, #2
 8010fda:	e13f      	b.n	801125c <f_lseek+0x67a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fe4:	d105      	bne.n	8010ff2 <f_lseek+0x410>
 8010fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fe8:	2201      	movs	r2, #1
 8010fea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e134      	b.n	801125c <f_lseek+0x67a>
					fp->obj.sclust = clst;
 8010ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ff4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010ff8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ffc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011000:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (clst != 0) {
 8011002:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011006:	2b00      	cmp	r3, #0
 8011008:	f000 80c2 	beq.w	8011190 <f_lseek+0x5ae>
				while (ofs > bcs) {						/* Cluster following loop */
 801100c:	e079      	b.n	8011102 <f_lseek+0x520>
					ofs -= bcs; fp->fptr += bcs;
 801100e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011010:	461a      	mov	r2, r3
 8011012:	f04f 0300 	mov.w	r3, #0
 8011016:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801101a:	1a84      	subs	r4, r0, r2
 801101c:	603c      	str	r4, [r7, #0]
 801101e:	eb61 0303 	sbc.w	r3, r1, r3
 8011022:	607b      	str	r3, [r7, #4]
 8011024:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011028:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 801102c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801102e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011034:	461a      	mov	r2, r3
 8011036:	f04f 0300 	mov.w	r3, #0
 801103a:	1884      	adds	r4, r0, r2
 801103c:	61bc      	str	r4, [r7, #24]
 801103e:	eb41 0303 	adc.w	r3, r1, r3
 8011042:	61fb      	str	r3, [r7, #28]
 8011044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011046:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801104a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801104e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011054:	f003 0302 	and.w	r3, r3, #2
 8011058:	2b00      	cmp	r3, #0
 801105a:	d02b      	beq.n	80110b4 <f_lseek+0x4d2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 801105c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801105e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011062:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011064:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8011068:	4299      	cmp	r1, r3
 801106a:	bf08      	it	eq
 801106c:	4290      	cmpeq	r0, r2
 801106e:	d20e      	bcs.n	801108e <f_lseek+0x4ac>
							fp->obj.objsize = fp->fptr;
 8011070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011072:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011076:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011078:	e9c1 2304 	strd	r2, r3, [r1, #16]
							fp->flag |= FA_MODIFIED;
 801107c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801107e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011086:	b2da      	uxtb	r2, r3
 8011088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801108a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801108e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011090:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8011094:	4618      	mov	r0, r3
 8011096:	f7fc fc97 	bl	800d9c8 <create_chain>
 801109a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
						if (clst == 0) {				/* Clip file size in case of disk full */
 801109e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d10e      	bne.n	80110c4 <f_lseek+0x4e2>
							ofs = 0; break;
 80110a6:	f04f 0200 	mov.w	r2, #0
 80110aa:	f04f 0300 	mov.w	r3, #0
 80110ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80110b2:	e031      	b.n	8011118 <f_lseek+0x536>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80110b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110b6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7fc f802 	bl	800d0c4 <get_fat>
 80110c0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80110c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80110c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110cc:	d105      	bne.n	80110da <f_lseek+0x4f8>
 80110ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110d0:	2201      	movs	r2, #1
 80110d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80110d6:	2301      	movs	r3, #1
 80110d8:	e0c0      	b.n	801125c <f_lseek+0x67a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80110da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80110de:	2b01      	cmp	r3, #1
 80110e0:	d905      	bls.n	80110ee <f_lseek+0x50c>
 80110e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110e4:	6a1b      	ldr	r3, [r3, #32]
 80110e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d305      	bcc.n	80110fa <f_lseek+0x518>
 80110ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110f0:	2202      	movs	r2, #2
 80110f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80110f6:	2302      	movs	r3, #2
 80110f8:	e0b0      	b.n	801125c <f_lseek+0x67a>
					fp->clust = clst;
 80110fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011100:	641a      	str	r2, [r3, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 8011102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011104:	4618      	mov	r0, r3
 8011106:	f04f 0100 	mov.w	r1, #0
 801110a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801110e:	4299      	cmp	r1, r3
 8011110:	bf08      	it	eq
 8011112:	4290      	cmpeq	r0, r2
 8011114:	f4ff af7b 	bcc.w	801100e <f_lseek+0x42c>
				}
				fp->fptr += ofs;
 8011118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801111a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801111e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011122:	1884      	adds	r4, r0, r2
 8011124:	613c      	str	r4, [r7, #16]
 8011126:	eb41 0303 	adc.w	r3, r1, r3
 801112a:	617b      	str	r3, [r7, #20]
 801112c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801112e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011132:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 8011136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011138:	899b      	ldrh	r3, [r3, #12]
 801113a:	b29a      	uxth	r2, r3
 801113c:	f04f 0300 	mov.w	r3, #0
 8011140:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8011144:	f7ef f89c 	bl	8000280 <__aeabi_uldivmod>
 8011148:	4313      	orrs	r3, r2
 801114a:	d021      	beq.n	8011190 <f_lseek+0x5ae>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801114c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801114e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8011152:	4618      	mov	r0, r3
 8011154:	f7fb ff96 	bl	800d084 <clust2sect>
 8011158:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801115c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011160:	2b00      	cmp	r3, #0
 8011162:	d105      	bne.n	8011170 <f_lseek+0x58e>
 8011164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011166:	2202      	movs	r2, #2
 8011168:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801116c:	2302      	movs	r3, #2
 801116e:	e075      	b.n	801125c <f_lseek+0x67a>
					nsect += (DWORD)(ofs / SS(fs));
 8011170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011172:	899b      	ldrh	r3, [r3, #12]
 8011174:	b29a      	uxth	r2, r3
 8011176:	f04f 0300 	mov.w	r3, #0
 801117a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801117e:	f7ef f87f 	bl	8000280 <__aeabi_uldivmod>
 8011182:	4602      	mov	r2, r0
 8011184:	460b      	mov	r3, r1
 8011186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801118a:	4413      	add	r3, r2
 801118c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011192:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011196:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011198:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 801119c:	4299      	cmp	r1, r3
 801119e:	bf08      	it	eq
 80111a0:	4290      	cmpeq	r0, r2
 80111a2:	d20e      	bcs.n	80111c2 <f_lseek+0x5e0>
			fp->obj.objsize = fp->fptr;
 80111a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80111aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80111ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 80111b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80111c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111c4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80111c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111ca:	899b      	ldrh	r3, [r3, #12]
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	f04f 0300 	mov.w	r3, #0
 80111d2:	f7ef f855 	bl	8000280 <__aeabi_uldivmod>
 80111d6:	4313      	orrs	r3, r2
 80111d8:	d03e      	beq.n	8011258 <f_lseek+0x676>
 80111da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d038      	beq.n	8011258 <f_lseek+0x676>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80111e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111ec:	b25b      	sxtb	r3, r3
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	da1b      	bge.n	801122a <f_lseek+0x648>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80111f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111f4:	7858      	ldrb	r0, [r3, #1]
 80111f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111f8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80111fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011200:	2301      	movs	r3, #1
 8011202:	f7fb fa6f 	bl	800c6e4 <disk_write>
 8011206:	4603      	mov	r3, r0
 8011208:	2b00      	cmp	r3, #0
 801120a:	d005      	beq.n	8011218 <f_lseek+0x636>
 801120c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801120e:	2201      	movs	r2, #1
 8011210:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011214:	2301      	movs	r3, #1
 8011216:	e021      	b.n	801125c <f_lseek+0x67a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801121a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801121e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011222:	b2da      	uxtb	r2, r3
 8011224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011226:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801122a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801122c:	7858      	ldrb	r0, [r3, #1]
 801122e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011230:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011234:	2301      	movs	r3, #1
 8011236:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801123a:	f7fb fa33 	bl	800c6a4 <disk_read>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d005      	beq.n	8011250 <f_lseek+0x66e>
 8011244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011246:	2201      	movs	r2, #1
 8011248:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801124c:	2301      	movs	r3, #1
 801124e:	e005      	b.n	801125c <f_lseek+0x67a>
#endif
			fp->sect = nsect;
 8011250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011252:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011256:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 8011258:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 801125c:	4618      	mov	r0, r3
 801125e:	3790      	adds	r7, #144	; 0x90
 8011260:	46bd      	mov	sp, r7
 8011262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011266 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b086      	sub	sp, #24
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
 801126e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d101      	bne.n	801127a <f_opendir+0x14>
 8011276:	2309      	movs	r3, #9
 8011278:	e09a      	b.n	80113b0 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801127e:	f107 010c 	add.w	r1, r7, #12
 8011282:	463b      	mov	r3, r7
 8011284:	2200      	movs	r2, #0
 8011286:	4618      	mov	r0, r3
 8011288:	f7fe fb1a 	bl	800f8c0 <find_volume>
 801128c:	4603      	mov	r3, r0
 801128e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011290:	7dfb      	ldrb	r3, [r7, #23]
 8011292:	2b00      	cmp	r3, #0
 8011294:	f040 8085 	bne.w	80113a2 <f_opendir+0x13c>
		obj->fs = fs;
 8011298:	68fa      	ldr	r2, [r7, #12]
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	4619      	mov	r1, r3
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f7fe f9b6 	bl	800f614 <follow_path>
 80112a8:	4603      	mov	r3, r0
 80112aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80112ac:	7dfb      	ldrb	r3, [r7, #23]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d172      	bne.n	8011398 <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80112b8:	b25b      	sxtb	r3, r3
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	db47      	blt.n	801134e <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	799b      	ldrb	r3, [r3, #6]
 80112c2:	f003 0310 	and.w	r3, r3, #16
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d03f      	beq.n	801134a <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	2b04      	cmp	r3, #4
 80112d0:	d130      	bne.n	8011334 <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	689a      	ldr	r2, [r3, #8]
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80112e0:	4613      	mov	r3, r2
 80112e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80112e6:	693a      	ldr	r2, [r7, #16]
 80112e8:	79d2      	ldrb	r2, [r2, #7]
 80112ea:	431a      	orrs	r2, r3
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	695b      	ldr	r3, [r3, #20]
 80112fc:	3334      	adds	r3, #52	; 0x34
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fb fa46 	bl	800c790 <ld_dword>
 8011304:	4602      	mov	r2, r0
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	695b      	ldr	r3, [r3, #20]
 801130e:	3338      	adds	r3, #56	; 0x38
 8011310:	4618      	mov	r0, r3
 8011312:	f7fb fa60 	bl	800c7d6 <ld_qword>
 8011316:	4602      	mov	r2, r0
 8011318:	460b      	mov	r3, r1
 801131a:	6939      	ldr	r1, [r7, #16]
 801131c:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	695b      	ldr	r3, [r3, #20]
 8011324:	3321      	adds	r3, #33	; 0x21
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	f003 0302 	and.w	r3, r3, #2
 801132c:	b2da      	uxtb	r2, r3
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	71da      	strb	r2, [r3, #7]
 8011332:	e00c      	b.n	801134e <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011334:	68fa      	ldr	r2, [r7, #12]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801133a:	4619      	mov	r1, r3
 801133c:	4610      	mov	r0, r2
 801133e:	f7fc fe5e 	bl	800dffe <ld_clust>
 8011342:	4602      	mov	r2, r0
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	609a      	str	r2, [r3, #8]
 8011348:	e001      	b.n	801134e <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801134a:	2305      	movs	r3, #5
 801134c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801134e:	7dfb      	ldrb	r3, [r7, #23]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d121      	bne.n	8011398 <f_opendir+0x132>
				obj->id = fs->id;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	88da      	ldrh	r2, [r3, #6]
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801135c:	2100      	movs	r1, #0
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f7fc fc77 	bl	800dc52 <dir_sdi>
 8011364:	4603      	mov	r3, r0
 8011366:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011368:	7dfb      	ldrb	r3, [r7, #23]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d114      	bne.n	8011398 <f_opendir+0x132>
					if (obj->sclust) {
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d00d      	beq.n	8011392 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011376:	2100      	movs	r1, #0
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f7fb fcb3 	bl	800cce4 <inc_lock>
 801137e:	4602      	mov	r2, r0
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011388:	2b00      	cmp	r3, #0
 801138a:	d105      	bne.n	8011398 <f_opendir+0x132>
 801138c:	2312      	movs	r3, #18
 801138e:	75fb      	strb	r3, [r7, #23]
 8011390:	e002      	b.n	8011398 <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	2200      	movs	r2, #0
 8011396:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011398:	7dfb      	ldrb	r3, [r7, #23]
 801139a:	2b04      	cmp	r3, #4
 801139c:	d101      	bne.n	80113a2 <f_opendir+0x13c>
 801139e:	2305      	movs	r3, #5
 80113a0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80113a2:	7dfb      	ldrb	r3, [r7, #23]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d002      	beq.n	80113ae <f_opendir+0x148>
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	2200      	movs	r2, #0
 80113ac:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80113ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3718      	adds	r7, #24
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}

080113b8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f107 0208 	add.w	r2, r7, #8
 80113c6:	4611      	mov	r1, r2
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7fe fe09 	bl	800ffe0 <validate>
 80113ce:	4603      	mov	r3, r0
 80113d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80113d2:	7bfb      	ldrb	r3, [r7, #15]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d110      	bne.n	80113fa <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d006      	beq.n	80113ee <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7fb fd0b 	bl	800ce00 <dec_lock>
 80113ea:	4603      	mov	r3, r0
 80113ec:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80113ee:	7bfb      	ldrb	r3, [r7, #15]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d102      	bne.n	80113fa <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2200      	movs	r2, #0
 80113f8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80113fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3710      	adds	r7, #16
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f107 0208 	add.w	r2, r7, #8
 8011414:	4611      	mov	r1, r2
 8011416:	4618      	mov	r0, r3
 8011418:	f7fe fde2 	bl	800ffe0 <validate>
 801141c:	4603      	mov	r3, r0
 801141e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011420:	7bfb      	ldrb	r3, [r7, #15]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d126      	bne.n	8011474 <f_readdir+0x70>
		if (!fno) {
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d106      	bne.n	801143a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801142c:	2100      	movs	r1, #0
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f7fc fc0f 	bl	800dc52 <dir_sdi>
 8011434:	4603      	mov	r3, r0
 8011436:	73fb      	strb	r3, [r7, #15]
 8011438:	e01c      	b.n	8011474 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801143a:	2100      	movs	r1, #0
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f7fd faae 	bl	800e99e <dir_read>
 8011442:	4603      	mov	r3, r0
 8011444:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011446:	7bfb      	ldrb	r3, [r7, #15]
 8011448:	2b04      	cmp	r3, #4
 801144a:	d101      	bne.n	8011450 <f_readdir+0x4c>
 801144c:	2300      	movs	r3, #0
 801144e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011450:	7bfb      	ldrb	r3, [r7, #15]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d10e      	bne.n	8011474 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011456:	6839      	ldr	r1, [r7, #0]
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f7fd fe37 	bl	800f0cc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801145e:	2100      	movs	r1, #0
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7fc fc8a 	bl	800dd7a <dir_next>
 8011466:	4603      	mov	r3, r0
 8011468:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801146a:	7bfb      	ldrb	r3, [r7, #15]
 801146c:	2b04      	cmp	r3, #4
 801146e:	d101      	bne.n	8011474 <f_readdir+0x70>
 8011470:	2300      	movs	r3, #0
 8011472:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8011474:	7bfb      	ldrb	r3, [r7, #15]
}
 8011476:	4618      	mov	r0, r3
 8011478:	3710      	adds	r7, #16
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
	...

08011480 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011480:	b480      	push	{r7}
 8011482:	b087      	sub	sp, #28
 8011484:	af00      	add	r7, sp, #0
 8011486:	60f8      	str	r0, [r7, #12]
 8011488:	60b9      	str	r1, [r7, #8]
 801148a:	4613      	mov	r3, r2
 801148c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801148e:	2301      	movs	r3, #1
 8011490:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011492:	2300      	movs	r3, #0
 8011494:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011496:	4b1f      	ldr	r3, [pc, #124]	; (8011514 <FATFS_LinkDriverEx+0x94>)
 8011498:	7a5b      	ldrb	r3, [r3, #9]
 801149a:	b2db      	uxtb	r3, r3
 801149c:	2b00      	cmp	r3, #0
 801149e:	d131      	bne.n	8011504 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80114a0:	4b1c      	ldr	r3, [pc, #112]	; (8011514 <FATFS_LinkDriverEx+0x94>)
 80114a2:	7a5b      	ldrb	r3, [r3, #9]
 80114a4:	b2db      	uxtb	r3, r3
 80114a6:	461a      	mov	r2, r3
 80114a8:	4b1a      	ldr	r3, [pc, #104]	; (8011514 <FATFS_LinkDriverEx+0x94>)
 80114aa:	2100      	movs	r1, #0
 80114ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80114ae:	4b19      	ldr	r3, [pc, #100]	; (8011514 <FATFS_LinkDriverEx+0x94>)
 80114b0:	7a5b      	ldrb	r3, [r3, #9]
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	4a17      	ldr	r2, [pc, #92]	; (8011514 <FATFS_LinkDriverEx+0x94>)
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	4413      	add	r3, r2
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80114be:	4b15      	ldr	r3, [pc, #84]	; (8011514 <FATFS_LinkDriverEx+0x94>)
 80114c0:	7a5b      	ldrb	r3, [r3, #9]
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	461a      	mov	r2, r3
 80114c6:	4b13      	ldr	r3, [pc, #76]	; (8011514 <FATFS_LinkDriverEx+0x94>)
 80114c8:	4413      	add	r3, r2
 80114ca:	79fa      	ldrb	r2, [r7, #7]
 80114cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80114ce:	4b11      	ldr	r3, [pc, #68]	; (8011514 <FATFS_LinkDriverEx+0x94>)
 80114d0:	7a5b      	ldrb	r3, [r3, #9]
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	1c5a      	adds	r2, r3, #1
 80114d6:	b2d1      	uxtb	r1, r2
 80114d8:	4a0e      	ldr	r2, [pc, #56]	; (8011514 <FATFS_LinkDriverEx+0x94>)
 80114da:	7251      	strb	r1, [r2, #9]
 80114dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80114de:	7dbb      	ldrb	r3, [r7, #22]
 80114e0:	3330      	adds	r3, #48	; 0x30
 80114e2:	b2da      	uxtb	r2, r3
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	3301      	adds	r3, #1
 80114ec:	223a      	movs	r2, #58	; 0x3a
 80114ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	3302      	adds	r3, #2
 80114f4:	222f      	movs	r2, #47	; 0x2f
 80114f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	3303      	adds	r3, #3
 80114fc:	2200      	movs	r2, #0
 80114fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011500:	2300      	movs	r3, #0
 8011502:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011504:	7dfb      	ldrb	r3, [r7, #23]
}
 8011506:	4618      	mov	r0, r3
 8011508:	371c      	adds	r7, #28
 801150a:	46bd      	mov	sp, r7
 801150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011510:	4770      	bx	lr
 8011512:	bf00      	nop
 8011514:	20010658 	.word	0x20010658

08011518 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011522:	2200      	movs	r2, #0
 8011524:	6839      	ldr	r1, [r7, #0]
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f7ff ffaa 	bl	8011480 <FATFS_LinkDriverEx>
 801152c:	4603      	mov	r3, r0
}
 801152e:	4618      	mov	r0, r3
 8011530:	3708      	adds	r7, #8
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
	...

08011538 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011538:	b480      	push	{r7}
 801153a:	b085      	sub	sp, #20
 801153c:	af00      	add	r7, sp, #0
 801153e:	4603      	mov	r3, r0
 8011540:	6039      	str	r1, [r7, #0]
 8011542:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011544:	88fb      	ldrh	r3, [r7, #6]
 8011546:	2b7f      	cmp	r3, #127	; 0x7f
 8011548:	d802      	bhi.n	8011550 <ff_convert+0x18>
		c = chr;
 801154a:	88fb      	ldrh	r3, [r7, #6]
 801154c:	81fb      	strh	r3, [r7, #14]
 801154e:	e025      	b.n	801159c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00b      	beq.n	801156e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011556:	88fb      	ldrh	r3, [r7, #6]
 8011558:	2bff      	cmp	r3, #255	; 0xff
 801155a:	d805      	bhi.n	8011568 <ff_convert+0x30>
 801155c:	88fb      	ldrh	r3, [r7, #6]
 801155e:	3b80      	subs	r3, #128	; 0x80
 8011560:	4a12      	ldr	r2, [pc, #72]	; (80115ac <ff_convert+0x74>)
 8011562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011566:	e000      	b.n	801156a <ff_convert+0x32>
 8011568:	2300      	movs	r3, #0
 801156a:	81fb      	strh	r3, [r7, #14]
 801156c:	e016      	b.n	801159c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801156e:	2300      	movs	r3, #0
 8011570:	81fb      	strh	r3, [r7, #14]
 8011572:	e009      	b.n	8011588 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011574:	89fb      	ldrh	r3, [r7, #14]
 8011576:	4a0d      	ldr	r2, [pc, #52]	; (80115ac <ff_convert+0x74>)
 8011578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801157c:	88fa      	ldrh	r2, [r7, #6]
 801157e:	429a      	cmp	r2, r3
 8011580:	d006      	beq.n	8011590 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011582:	89fb      	ldrh	r3, [r7, #14]
 8011584:	3301      	adds	r3, #1
 8011586:	81fb      	strh	r3, [r7, #14]
 8011588:	89fb      	ldrh	r3, [r7, #14]
 801158a:	2b7f      	cmp	r3, #127	; 0x7f
 801158c:	d9f2      	bls.n	8011574 <ff_convert+0x3c>
 801158e:	e000      	b.n	8011592 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011590:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011592:	89fb      	ldrh	r3, [r7, #14]
 8011594:	3380      	adds	r3, #128	; 0x80
 8011596:	b29b      	uxth	r3, r3
 8011598:	b2db      	uxtb	r3, r3
 801159a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801159c:	89fb      	ldrh	r3, [r7, #14]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3714      	adds	r7, #20
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	08012830 	.word	0x08012830

080115b0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b087      	sub	sp, #28
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	4603      	mov	r3, r0
 80115b8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80115ba:	88fb      	ldrh	r3, [r7, #6]
 80115bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115c0:	d201      	bcs.n	80115c6 <ff_wtoupper+0x16>
 80115c2:	4b3e      	ldr	r3, [pc, #248]	; (80116bc <ff_wtoupper+0x10c>)
 80115c4:	e000      	b.n	80115c8 <ff_wtoupper+0x18>
 80115c6:	4b3e      	ldr	r3, [pc, #248]	; (80116c0 <ff_wtoupper+0x110>)
 80115c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	1c9a      	adds	r2, r3, #2
 80115ce:	617a      	str	r2, [r7, #20]
 80115d0:	881b      	ldrh	r3, [r3, #0]
 80115d2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80115d4:	8a7b      	ldrh	r3, [r7, #18]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d068      	beq.n	80116ac <ff_wtoupper+0xfc>
 80115da:	88fa      	ldrh	r2, [r7, #6]
 80115dc:	8a7b      	ldrh	r3, [r7, #18]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d364      	bcc.n	80116ac <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	1c9a      	adds	r2, r3, #2
 80115e6:	617a      	str	r2, [r7, #20]
 80115e8:	881b      	ldrh	r3, [r3, #0]
 80115ea:	823b      	strh	r3, [r7, #16]
 80115ec:	8a3b      	ldrh	r3, [r7, #16]
 80115ee:	0a1b      	lsrs	r3, r3, #8
 80115f0:	81fb      	strh	r3, [r7, #14]
 80115f2:	8a3b      	ldrh	r3, [r7, #16]
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80115f8:	88fa      	ldrh	r2, [r7, #6]
 80115fa:	8a79      	ldrh	r1, [r7, #18]
 80115fc:	8a3b      	ldrh	r3, [r7, #16]
 80115fe:	440b      	add	r3, r1
 8011600:	429a      	cmp	r2, r3
 8011602:	da49      	bge.n	8011698 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011604:	89fb      	ldrh	r3, [r7, #14]
 8011606:	2b08      	cmp	r3, #8
 8011608:	d84f      	bhi.n	80116aa <ff_wtoupper+0xfa>
 801160a:	a201      	add	r2, pc, #4	; (adr r2, 8011610 <ff_wtoupper+0x60>)
 801160c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011610:	08011635 	.word	0x08011635
 8011614:	08011647 	.word	0x08011647
 8011618:	0801165d 	.word	0x0801165d
 801161c:	08011665 	.word	0x08011665
 8011620:	0801166d 	.word	0x0801166d
 8011624:	08011675 	.word	0x08011675
 8011628:	0801167d 	.word	0x0801167d
 801162c:	08011685 	.word	0x08011685
 8011630:	0801168d 	.word	0x0801168d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011634:	88fa      	ldrh	r2, [r7, #6]
 8011636:	8a7b      	ldrh	r3, [r7, #18]
 8011638:	1ad3      	subs	r3, r2, r3
 801163a:	005b      	lsls	r3, r3, #1
 801163c:	697a      	ldr	r2, [r7, #20]
 801163e:	4413      	add	r3, r2
 8011640:	881b      	ldrh	r3, [r3, #0]
 8011642:	80fb      	strh	r3, [r7, #6]
 8011644:	e027      	b.n	8011696 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011646:	88fa      	ldrh	r2, [r7, #6]
 8011648:	8a7b      	ldrh	r3, [r7, #18]
 801164a:	1ad3      	subs	r3, r2, r3
 801164c:	b29b      	uxth	r3, r3
 801164e:	f003 0301 	and.w	r3, r3, #1
 8011652:	b29b      	uxth	r3, r3
 8011654:	88fa      	ldrh	r2, [r7, #6]
 8011656:	1ad3      	subs	r3, r2, r3
 8011658:	80fb      	strh	r3, [r7, #6]
 801165a:	e01c      	b.n	8011696 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801165c:	88fb      	ldrh	r3, [r7, #6]
 801165e:	3b10      	subs	r3, #16
 8011660:	80fb      	strh	r3, [r7, #6]
 8011662:	e018      	b.n	8011696 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011664:	88fb      	ldrh	r3, [r7, #6]
 8011666:	3b20      	subs	r3, #32
 8011668:	80fb      	strh	r3, [r7, #6]
 801166a:	e014      	b.n	8011696 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801166c:	88fb      	ldrh	r3, [r7, #6]
 801166e:	3b30      	subs	r3, #48	; 0x30
 8011670:	80fb      	strh	r3, [r7, #6]
 8011672:	e010      	b.n	8011696 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011674:	88fb      	ldrh	r3, [r7, #6]
 8011676:	3b1a      	subs	r3, #26
 8011678:	80fb      	strh	r3, [r7, #6]
 801167a:	e00c      	b.n	8011696 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801167c:	88fb      	ldrh	r3, [r7, #6]
 801167e:	3308      	adds	r3, #8
 8011680:	80fb      	strh	r3, [r7, #6]
 8011682:	e008      	b.n	8011696 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011684:	88fb      	ldrh	r3, [r7, #6]
 8011686:	3b50      	subs	r3, #80	; 0x50
 8011688:	80fb      	strh	r3, [r7, #6]
 801168a:	e004      	b.n	8011696 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801168c:	88fb      	ldrh	r3, [r7, #6]
 801168e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011692:	80fb      	strh	r3, [r7, #6]
 8011694:	bf00      	nop
			}
			break;
 8011696:	e008      	b.n	80116aa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011698:	89fb      	ldrh	r3, [r7, #14]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d195      	bne.n	80115ca <ff_wtoupper+0x1a>
 801169e:	8a3b      	ldrh	r3, [r7, #16]
 80116a0:	005b      	lsls	r3, r3, #1
 80116a2:	697a      	ldr	r2, [r7, #20]
 80116a4:	4413      	add	r3, r2
 80116a6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80116a8:	e78f      	b.n	80115ca <ff_wtoupper+0x1a>
			break;
 80116aa:	bf00      	nop
	}

	return chr;
 80116ac:	88fb      	ldrh	r3, [r7, #6]
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	371c      	adds	r7, #28
 80116b2:	46bd      	mov	sp, r7
 80116b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b8:	4770      	bx	lr
 80116ba:	bf00      	nop
 80116bc:	08012930 	.word	0x08012930
 80116c0:	08012b24 	.word	0x08012b24

080116c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80116c8:	2201      	movs	r2, #1
 80116ca:	490e      	ldr	r1, [pc, #56]	; (8011704 <MX_USB_HOST_Init+0x40>)
 80116cc:	480e      	ldr	r0, [pc, #56]	; (8011708 <MX_USB_HOST_Init+0x44>)
 80116ce:	f7f9 fc51 	bl	800af74 <USBH_Init>
 80116d2:	4603      	mov	r3, r0
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d001      	beq.n	80116dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80116d8:	f7f0 fdde 	bl	8002298 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80116dc:	490b      	ldr	r1, [pc, #44]	; (801170c <MX_USB_HOST_Init+0x48>)
 80116de:	480a      	ldr	r0, [pc, #40]	; (8011708 <MX_USB_HOST_Init+0x44>)
 80116e0:	f7f9 fcd6 	bl	800b090 <USBH_RegisterClass>
 80116e4:	4603      	mov	r3, r0
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d001      	beq.n	80116ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80116ea:	f7f0 fdd5 	bl	8002298 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80116ee:	4806      	ldr	r0, [pc, #24]	; (8011708 <MX_USB_HOST_Init+0x44>)
 80116f0:	f7f9 fd5a 	bl	800b1a8 <USBH_Start>
 80116f4:	4603      	mov	r3, r0
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d001      	beq.n	80116fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80116fa:	f7f0 fdcd 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80116fe:	bf00      	nop
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	08011725 	.word	0x08011725
 8011708:	200143c0 	.word	0x200143c0
 801170c:	20000050 	.word	0x20000050

08011710 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8011714:	4802      	ldr	r0, [pc, #8]	; (8011720 <MX_USB_HOST_Process+0x10>)
 8011716:	f7f9 fd57 	bl	800b1c8 <USBH_Process>
}
 801171a:	bf00      	nop
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	200143c0 	.word	0x200143c0

08011724 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011724:	b480      	push	{r7}
 8011726:	b083      	sub	sp, #12
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	460b      	mov	r3, r1
 801172e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011730:	78fb      	ldrb	r3, [r7, #3]
 8011732:	3b01      	subs	r3, #1
 8011734:	2b04      	cmp	r3, #4
 8011736:	d819      	bhi.n	801176c <USBH_UserProcess+0x48>
 8011738:	a201      	add	r2, pc, #4	; (adr r2, 8011740 <USBH_UserProcess+0x1c>)
 801173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801173e:	bf00      	nop
 8011740:	0801176d 	.word	0x0801176d
 8011744:	0801175d 	.word	0x0801175d
 8011748:	0801176d 	.word	0x0801176d
 801174c:	08011765 	.word	0x08011765
 8011750:	08011755 	.word	0x08011755
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011754:	4b09      	ldr	r3, [pc, #36]	; (801177c <USBH_UserProcess+0x58>)
 8011756:	2203      	movs	r2, #3
 8011758:	701a      	strb	r2, [r3, #0]
  break;
 801175a:	e008      	b.n	801176e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801175c:	4b07      	ldr	r3, [pc, #28]	; (801177c <USBH_UserProcess+0x58>)
 801175e:	2202      	movs	r2, #2
 8011760:	701a      	strb	r2, [r3, #0]
  break;
 8011762:	e004      	b.n	801176e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011764:	4b05      	ldr	r3, [pc, #20]	; (801177c <USBH_UserProcess+0x58>)
 8011766:	2201      	movs	r2, #1
 8011768:	701a      	strb	r2, [r3, #0]
  break;
 801176a:	e000      	b.n	801176e <USBH_UserProcess+0x4a>

  default:
  break;
 801176c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801176e:	bf00      	nop
 8011770:	370c      	adds	r7, #12
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop
 801177c:	20010664 	.word	0x20010664

08011780 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b08a      	sub	sp, #40	; 0x28
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011788:	f107 0314 	add.w	r3, r7, #20
 801178c:	2200      	movs	r2, #0
 801178e:	601a      	str	r2, [r3, #0]
 8011790:	605a      	str	r2, [r3, #4]
 8011792:	609a      	str	r2, [r3, #8]
 8011794:	60da      	str	r2, [r3, #12]
 8011796:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80117a0:	d147      	bne.n	8011832 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80117a2:	2300      	movs	r3, #0
 80117a4:	613b      	str	r3, [r7, #16]
 80117a6:	4b25      	ldr	r3, [pc, #148]	; (801183c <HAL_HCD_MspInit+0xbc>)
 80117a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117aa:	4a24      	ldr	r2, [pc, #144]	; (801183c <HAL_HCD_MspInit+0xbc>)
 80117ac:	f043 0301 	orr.w	r3, r3, #1
 80117b0:	6313      	str	r3, [r2, #48]	; 0x30
 80117b2:	4b22      	ldr	r3, [pc, #136]	; (801183c <HAL_HCD_MspInit+0xbc>)
 80117b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117b6:	f003 0301 	and.w	r3, r3, #1
 80117ba:	613b      	str	r3, [r7, #16]
 80117bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80117be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80117c4:	2300      	movs	r3, #0
 80117c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117c8:	2300      	movs	r3, #0
 80117ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117cc:	f107 0314 	add.w	r3, r7, #20
 80117d0:	4619      	mov	r1, r3
 80117d2:	481b      	ldr	r0, [pc, #108]	; (8011840 <HAL_HCD_MspInit+0xc0>)
 80117d4:	f7f2 f834 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80117d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80117dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117de:	2302      	movs	r3, #2
 80117e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117e2:	2300      	movs	r3, #0
 80117e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80117e6:	2303      	movs	r3, #3
 80117e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80117ea:	230a      	movs	r3, #10
 80117ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117ee:	f107 0314 	add.w	r3, r7, #20
 80117f2:	4619      	mov	r1, r3
 80117f4:	4812      	ldr	r0, [pc, #72]	; (8011840 <HAL_HCD_MspInit+0xc0>)
 80117f6:	f7f2 f823 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80117fa:	4b10      	ldr	r3, [pc, #64]	; (801183c <HAL_HCD_MspInit+0xbc>)
 80117fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117fe:	4a0f      	ldr	r2, [pc, #60]	; (801183c <HAL_HCD_MspInit+0xbc>)
 8011800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011804:	6353      	str	r3, [r2, #52]	; 0x34
 8011806:	2300      	movs	r3, #0
 8011808:	60fb      	str	r3, [r7, #12]
 801180a:	4b0c      	ldr	r3, [pc, #48]	; (801183c <HAL_HCD_MspInit+0xbc>)
 801180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801180e:	4a0b      	ldr	r2, [pc, #44]	; (801183c <HAL_HCD_MspInit+0xbc>)
 8011810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011814:	6453      	str	r3, [r2, #68]	; 0x44
 8011816:	4b09      	ldr	r3, [pc, #36]	; (801183c <HAL_HCD_MspInit+0xbc>)
 8011818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801181a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801181e:	60fb      	str	r3, [r7, #12]
 8011820:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011822:	2200      	movs	r2, #0
 8011824:	2100      	movs	r1, #0
 8011826:	2043      	movs	r0, #67	; 0x43
 8011828:	f7f1 fb95 	bl	8002f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801182c:	2043      	movs	r0, #67	; 0x43
 801182e:	f7f1 fbae 	bl	8002f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011832:	bf00      	nop
 8011834:	3728      	adds	r7, #40	; 0x28
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	40023800 	.word	0x40023800
 8011840:	40020000 	.word	0x40020000

08011844 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011852:	4618      	mov	r0, r3
 8011854:	f7fa f88b 	bl	800b96e <USBH_LL_IncTimer>
}
 8011858:	bf00      	nop
 801185a:	3708      	adds	r7, #8
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801186e:	4618      	mov	r0, r3
 8011870:	f7fa f8c3 	bl	800b9fa <USBH_LL_Connect>
}
 8011874:	bf00      	nop
 8011876:	3708      	adds	r7, #8
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801188a:	4618      	mov	r0, r3
 801188c:	f7fa f8cc 	bl	800ba28 <USBH_LL_Disconnect>
}
 8011890:	bf00      	nop
 8011892:	3708      	adds	r7, #8
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}

08011898 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011898:	b480      	push	{r7}
 801189a:	b083      	sub	sp, #12
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	460b      	mov	r3, r1
 80118a2:	70fb      	strb	r3, [r7, #3]
 80118a4:	4613      	mov	r3, r2
 80118a6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80118a8:	bf00      	nop
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr

080118b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fa f87d 	bl	800b9c2 <USBH_LL_PortEnabled>
}
 80118c8:	bf00      	nop
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118de:	4618      	mov	r0, r3
 80118e0:	f7fa f87d 	bl	800b9de <USBH_LL_PortDisabled>
}
 80118e4:	bf00      	nop
 80118e6:	3708      	adds	r7, #8
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d12a      	bne.n	8011954 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80118fe:	4a18      	ldr	r2, [pc, #96]	; (8011960 <USBH_LL_Init+0x74>)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	4a15      	ldr	r2, [pc, #84]	; (8011960 <USBH_LL_Init+0x74>)
 801190a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801190e:	4b14      	ldr	r3, [pc, #80]	; (8011960 <USBH_LL_Init+0x74>)
 8011910:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011914:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8011916:	4b12      	ldr	r3, [pc, #72]	; (8011960 <USBH_LL_Init+0x74>)
 8011918:	2208      	movs	r2, #8
 801191a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801191c:	4b10      	ldr	r3, [pc, #64]	; (8011960 <USBH_LL_Init+0x74>)
 801191e:	2201      	movs	r2, #1
 8011920:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011922:	4b0f      	ldr	r3, [pc, #60]	; (8011960 <USBH_LL_Init+0x74>)
 8011924:	2200      	movs	r2, #0
 8011926:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011928:	4b0d      	ldr	r3, [pc, #52]	; (8011960 <USBH_LL_Init+0x74>)
 801192a:	2202      	movs	r2, #2
 801192c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801192e:	4b0c      	ldr	r3, [pc, #48]	; (8011960 <USBH_LL_Init+0x74>)
 8011930:	2200      	movs	r2, #0
 8011932:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011934:	480a      	ldr	r0, [pc, #40]	; (8011960 <USBH_LL_Init+0x74>)
 8011936:	f7f2 fa4d 	bl	8003dd4 <HAL_HCD_Init>
 801193a:	4603      	mov	r3, r0
 801193c:	2b00      	cmp	r3, #0
 801193e:	d001      	beq.n	8011944 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011940:	f7f0 fcaa 	bl	8002298 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011944:	4806      	ldr	r0, [pc, #24]	; (8011960 <USBH_LL_Init+0x74>)
 8011946:	f7f2 fe30 	bl	80045aa <HAL_HCD_GetCurrentFrame>
 801194a:	4603      	mov	r3, r0
 801194c:	4619      	mov	r1, r3
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f7f9 fffe 	bl	800b950 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011954:	2300      	movs	r3, #0
}
 8011956:	4618      	mov	r0, r3
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	20014798 	.word	0x20014798

08011964 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801196c:	2300      	movs	r3, #0
 801196e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011970:	2300      	movs	r3, #0
 8011972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801197a:	4618      	mov	r0, r3
 801197c:	f7f2 fd9f 	bl	80044be <HAL_HCD_Start>
 8011980:	4603      	mov	r3, r0
 8011982:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011984:	7bfb      	ldrb	r3, [r7, #15]
 8011986:	4618      	mov	r0, r3
 8011988:	f000 f98c 	bl	8011ca4 <USBH_Get_USB_Status>
 801198c:	4603      	mov	r3, r0
 801198e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011990:	7bbb      	ldrb	r3, [r7, #14]
}
 8011992:	4618      	mov	r0, r3
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}

0801199a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801199a:	b580      	push	{r7, lr}
 801199c:	b084      	sub	sp, #16
 801199e:	af00      	add	r7, sp, #0
 80119a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119a2:	2300      	movs	r3, #0
 80119a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80119a6:	2300      	movs	r3, #0
 80119a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7f2 fda7 	bl	8004504 <HAL_HCD_Stop>
 80119b6:	4603      	mov	r3, r0
 80119b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80119ba:	7bfb      	ldrb	r3, [r7, #15]
 80119bc:	4618      	mov	r0, r3
 80119be:	f000 f971 	bl	8011ca4 <USBH_Get_USB_Status>
 80119c2:	4603      	mov	r3, r0
 80119c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3710      	adds	r7, #16
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b084      	sub	sp, #16
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80119d8:	2301      	movs	r3, #1
 80119da:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7f2 fdef 	bl	80045c6 <HAL_HCD_GetCurrentSpeed>
 80119e8:	4603      	mov	r3, r0
 80119ea:	2b02      	cmp	r3, #2
 80119ec:	d00c      	beq.n	8011a08 <USBH_LL_GetSpeed+0x38>
 80119ee:	2b02      	cmp	r3, #2
 80119f0:	d80d      	bhi.n	8011a0e <USBH_LL_GetSpeed+0x3e>
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d002      	beq.n	80119fc <USBH_LL_GetSpeed+0x2c>
 80119f6:	2b01      	cmp	r3, #1
 80119f8:	d003      	beq.n	8011a02 <USBH_LL_GetSpeed+0x32>
 80119fa:	e008      	b.n	8011a0e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80119fc:	2300      	movs	r3, #0
 80119fe:	73fb      	strb	r3, [r7, #15]
    break;
 8011a00:	e008      	b.n	8011a14 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011a02:	2301      	movs	r3, #1
 8011a04:	73fb      	strb	r3, [r7, #15]
    break;
 8011a06:	e005      	b.n	8011a14 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011a08:	2302      	movs	r3, #2
 8011a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8011a0c:	e002      	b.n	8011a14 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	73fb      	strb	r3, [r7, #15]
    break;
 8011a12:	bf00      	nop
  }
  return  speed;
 8011a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3710      	adds	r7, #16
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}

08011a1e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011a1e:	b580      	push	{r7, lr}
 8011a20:	b084      	sub	sp, #16
 8011a22:	af00      	add	r7, sp, #0
 8011a24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a26:	2300      	movs	r3, #0
 8011a28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7f2 fd82 	bl	800453e <HAL_HCD_ResetPort>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011a3e:	7bfb      	ldrb	r3, [r7, #15]
 8011a40:	4618      	mov	r0, r3
 8011a42:	f000 f92f 	bl	8011ca4 <USBH_Get_USB_Status>
 8011a46:	4603      	mov	r3, r0
 8011a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3710      	adds	r7, #16
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	460b      	mov	r3, r1
 8011a5e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a66:	78fa      	ldrb	r2, [r7, #3]
 8011a68:	4611      	mov	r1, r2
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7f2 fd89 	bl	8004582 <HAL_HCD_HC_GetXferCount>
 8011a70:	4603      	mov	r3, r0
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3708      	adds	r7, #8
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}

08011a7a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011a7a:	b590      	push	{r4, r7, lr}
 8011a7c:	b089      	sub	sp, #36	; 0x24
 8011a7e:	af04      	add	r7, sp, #16
 8011a80:	6078      	str	r0, [r7, #4]
 8011a82:	4608      	mov	r0, r1
 8011a84:	4611      	mov	r1, r2
 8011a86:	461a      	mov	r2, r3
 8011a88:	4603      	mov	r3, r0
 8011a8a:	70fb      	strb	r3, [r7, #3]
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	70bb      	strb	r3, [r7, #2]
 8011a90:	4613      	mov	r3, r2
 8011a92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a94:	2300      	movs	r3, #0
 8011a96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011aa2:	787c      	ldrb	r4, [r7, #1]
 8011aa4:	78ba      	ldrb	r2, [r7, #2]
 8011aa6:	78f9      	ldrb	r1, [r7, #3]
 8011aa8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011aaa:	9302      	str	r3, [sp, #8]
 8011aac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011ab0:	9301      	str	r3, [sp, #4]
 8011ab2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	4623      	mov	r3, r4
 8011aba:	f7f2 f9ed 	bl	8003e98 <HAL_HCD_HC_Init>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011ac2:	7bfb      	ldrb	r3, [r7, #15]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f000 f8ed 	bl	8011ca4 <USBH_Get_USB_Status>
 8011aca:	4603      	mov	r3, r0
 8011acc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3714      	adds	r7, #20
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd90      	pop	{r4, r7, pc}

08011ad8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b084      	sub	sp, #16
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011af2:	78fa      	ldrb	r2, [r7, #3]
 8011af4:	4611      	mov	r1, r2
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7f2 fa5d 	bl	8003fb6 <HAL_HCD_HC_Halt>
 8011afc:	4603      	mov	r3, r0
 8011afe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011b00:	7bfb      	ldrb	r3, [r7, #15]
 8011b02:	4618      	mov	r0, r3
 8011b04:	f000 f8ce 	bl	8011ca4 <USBH_Get_USB_Status>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3710      	adds	r7, #16
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}

08011b16 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011b16:	b590      	push	{r4, r7, lr}
 8011b18:	b089      	sub	sp, #36	; 0x24
 8011b1a:	af04      	add	r7, sp, #16
 8011b1c:	6078      	str	r0, [r7, #4]
 8011b1e:	4608      	mov	r0, r1
 8011b20:	4611      	mov	r1, r2
 8011b22:	461a      	mov	r2, r3
 8011b24:	4603      	mov	r3, r0
 8011b26:	70fb      	strb	r3, [r7, #3]
 8011b28:	460b      	mov	r3, r1
 8011b2a:	70bb      	strb	r3, [r7, #2]
 8011b2c:	4613      	mov	r3, r2
 8011b2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b30:	2300      	movs	r3, #0
 8011b32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b34:	2300      	movs	r3, #0
 8011b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011b3e:	787c      	ldrb	r4, [r7, #1]
 8011b40:	78ba      	ldrb	r2, [r7, #2]
 8011b42:	78f9      	ldrb	r1, [r7, #3]
 8011b44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011b48:	9303      	str	r3, [sp, #12]
 8011b4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011b4c:	9302      	str	r3, [sp, #8]
 8011b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b50:	9301      	str	r3, [sp, #4]
 8011b52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011b56:	9300      	str	r3, [sp, #0]
 8011b58:	4623      	mov	r3, r4
 8011b5a:	f7f2 fa4f 	bl	8003ffc <HAL_HCD_HC_SubmitRequest>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011b62:	7bfb      	ldrb	r3, [r7, #15]
 8011b64:	4618      	mov	r0, r3
 8011b66:	f000 f89d 	bl	8011ca4 <USBH_Get_USB_Status>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3714      	adds	r7, #20
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd90      	pop	{r4, r7, pc}

08011b78 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	460b      	mov	r3, r1
 8011b82:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011b8a:	78fa      	ldrb	r2, [r7, #3]
 8011b8c:	4611      	mov	r1, r2
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7f2 fce3 	bl	800455a <HAL_HCD_HC_GetURBState>
 8011b94:	4603      	mov	r3, r0
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3708      	adds	r7, #8
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}

08011b9e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b082      	sub	sp, #8
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
 8011ba6:	460b      	mov	r3, r1
 8011ba8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d103      	bne.n	8011bbc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011bb4:	78fb      	ldrb	r3, [r7, #3]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f000 f8a0 	bl	8011cfc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011bbc:	20c8      	movs	r0, #200	; 0xc8
 8011bbe:	f7f1 f8cb 	bl	8002d58 <HAL_Delay>
  return USBH_OK;
 8011bc2:	2300      	movs	r3, #0
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b085      	sub	sp, #20
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	70fb      	strb	r3, [r7, #3]
 8011bd8:	4613      	mov	r3, r2
 8011bda:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011be2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011be4:	78fb      	ldrb	r3, [r7, #3]
 8011be6:	68fa      	ldr	r2, [r7, #12]
 8011be8:	212c      	movs	r1, #44	; 0x2c
 8011bea:	fb01 f303 	mul.w	r3, r1, r3
 8011bee:	4413      	add	r3, r2
 8011bf0:	333b      	adds	r3, #59	; 0x3b
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d009      	beq.n	8011c0c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011bf8:	78fb      	ldrb	r3, [r7, #3]
 8011bfa:	68fa      	ldr	r2, [r7, #12]
 8011bfc:	212c      	movs	r1, #44	; 0x2c
 8011bfe:	fb01 f303 	mul.w	r3, r1, r3
 8011c02:	4413      	add	r3, r2
 8011c04:	3354      	adds	r3, #84	; 0x54
 8011c06:	78ba      	ldrb	r2, [r7, #2]
 8011c08:	701a      	strb	r2, [r3, #0]
 8011c0a:	e008      	b.n	8011c1e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011c0c:	78fb      	ldrb	r3, [r7, #3]
 8011c0e:	68fa      	ldr	r2, [r7, #12]
 8011c10:	212c      	movs	r1, #44	; 0x2c
 8011c12:	fb01 f303 	mul.w	r3, r1, r3
 8011c16:	4413      	add	r3, r2
 8011c18:	3355      	adds	r3, #85	; 0x55
 8011c1a:	78ba      	ldrb	r2, [r7, #2]
 8011c1c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011c1e:	2300      	movs	r3, #0
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3714      	adds	r7, #20
 8011c24:	46bd      	mov	sp, r7
 8011c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2a:	4770      	bx	lr

08011c2c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b085      	sub	sp, #20
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	460b      	mov	r3, r1
 8011c36:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c42:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8011c44:	78fb      	ldrb	r3, [r7, #3]
 8011c46:	68ba      	ldr	r2, [r7, #8]
 8011c48:	212c      	movs	r1, #44	; 0x2c
 8011c4a:	fb01 f303 	mul.w	r3, r1, r3
 8011c4e:	4413      	add	r3, r2
 8011c50:	333b      	adds	r3, #59	; 0x3b
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d009      	beq.n	8011c6c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8011c58:	78fb      	ldrb	r3, [r7, #3]
 8011c5a:	68ba      	ldr	r2, [r7, #8]
 8011c5c:	212c      	movs	r1, #44	; 0x2c
 8011c5e:	fb01 f303 	mul.w	r3, r1, r3
 8011c62:	4413      	add	r3, r2
 8011c64:	3354      	adds	r3, #84	; 0x54
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	73fb      	strb	r3, [r7, #15]
 8011c6a:	e008      	b.n	8011c7e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011c6c:	78fb      	ldrb	r3, [r7, #3]
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	212c      	movs	r1, #44	; 0x2c
 8011c72:	fb01 f303 	mul.w	r3, r1, r3
 8011c76:	4413      	add	r3, r2
 8011c78:	3355      	adds	r3, #85	; 0x55
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8011c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3714      	adds	r7, #20
 8011c84:	46bd      	mov	sp, r7
 8011c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8a:	4770      	bx	lr

08011c8c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f7f1 f85f 	bl	8002d58 <HAL_Delay>
}
 8011c9a:	bf00      	nop
 8011c9c:	3708      	adds	r7, #8
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
	...

08011ca4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b085      	sub	sp, #20
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	4603      	mov	r3, r0
 8011cac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011cb2:	79fb      	ldrb	r3, [r7, #7]
 8011cb4:	2b03      	cmp	r3, #3
 8011cb6:	d817      	bhi.n	8011ce8 <USBH_Get_USB_Status+0x44>
 8011cb8:	a201      	add	r2, pc, #4	; (adr r2, 8011cc0 <USBH_Get_USB_Status+0x1c>)
 8011cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cbe:	bf00      	nop
 8011cc0:	08011cd1 	.word	0x08011cd1
 8011cc4:	08011cd7 	.word	0x08011cd7
 8011cc8:	08011cdd 	.word	0x08011cdd
 8011ccc:	08011ce3 	.word	0x08011ce3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8011cd4:	e00b      	b.n	8011cee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011cd6:	2302      	movs	r3, #2
 8011cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8011cda:	e008      	b.n	8011cee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	73fb      	strb	r3, [r7, #15]
    break;
 8011ce0:	e005      	b.n	8011cee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011ce2:	2302      	movs	r3, #2
 8011ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8011ce6:	e002      	b.n	8011cee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011ce8:	2302      	movs	r3, #2
 8011cea:	73fb      	strb	r3, [r7, #15]
    break;
 8011cec:	bf00      	nop
  }
  return usb_status;
 8011cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3714      	adds	r7, #20
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr

08011cfc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b084      	sub	sp, #16
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	4603      	mov	r3, r0
 8011d04:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011d06:	79fb      	ldrb	r3, [r7, #7]
 8011d08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011d0a:	79fb      	ldrb	r3, [r7, #7]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d102      	bne.n	8011d16 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011d10:	2301      	movs	r3, #1
 8011d12:	73fb      	strb	r3, [r7, #15]
 8011d14:	e001      	b.n	8011d1a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011d16:	2300      	movs	r3, #0
 8011d18:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8011d1a:	7bfb      	ldrb	r3, [r7, #15]
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	2101      	movs	r1, #1
 8011d20:	4803      	ldr	r0, [pc, #12]	; (8011d30 <MX_DriverVbusFS+0x34>)
 8011d22:	f7f2 f825 	bl	8003d70 <HAL_GPIO_WritePin>
}
 8011d26:	bf00      	nop
 8011d28:	3710      	adds	r7, #16
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
 8011d2e:	bf00      	nop
 8011d30:	40020800 	.word	0x40020800

08011d34 <__errno>:
 8011d34:	4b01      	ldr	r3, [pc, #4]	; (8011d3c <__errno+0x8>)
 8011d36:	6818      	ldr	r0, [r3, #0]
 8011d38:	4770      	bx	lr
 8011d3a:	bf00      	nop
 8011d3c:	20000070 	.word	0x20000070

08011d40 <__libc_init_array>:
 8011d40:	b570      	push	{r4, r5, r6, lr}
 8011d42:	4d0d      	ldr	r5, [pc, #52]	; (8011d78 <__libc_init_array+0x38>)
 8011d44:	4c0d      	ldr	r4, [pc, #52]	; (8011d7c <__libc_init_array+0x3c>)
 8011d46:	1b64      	subs	r4, r4, r5
 8011d48:	10a4      	asrs	r4, r4, #2
 8011d4a:	2600      	movs	r6, #0
 8011d4c:	42a6      	cmp	r6, r4
 8011d4e:	d109      	bne.n	8011d64 <__libc_init_array+0x24>
 8011d50:	4d0b      	ldr	r5, [pc, #44]	; (8011d80 <__libc_init_array+0x40>)
 8011d52:	4c0c      	ldr	r4, [pc, #48]	; (8011d84 <__libc_init_array+0x44>)
 8011d54:	f000 fc88 	bl	8012668 <_init>
 8011d58:	1b64      	subs	r4, r4, r5
 8011d5a:	10a4      	asrs	r4, r4, #2
 8011d5c:	2600      	movs	r6, #0
 8011d5e:	42a6      	cmp	r6, r4
 8011d60:	d105      	bne.n	8011d6e <__libc_init_array+0x2e>
 8011d62:	bd70      	pop	{r4, r5, r6, pc}
 8011d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d68:	4798      	blx	r3
 8011d6a:	3601      	adds	r6, #1
 8011d6c:	e7ee      	b.n	8011d4c <__libc_init_array+0xc>
 8011d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d72:	4798      	blx	r3
 8011d74:	3601      	adds	r6, #1
 8011d76:	e7f2      	b.n	8011d5e <__libc_init_array+0x1e>
 8011d78:	08012c1c 	.word	0x08012c1c
 8011d7c:	08012c1c 	.word	0x08012c1c
 8011d80:	08012c1c 	.word	0x08012c1c
 8011d84:	08012c20 	.word	0x08012c20

08011d88 <malloc>:
 8011d88:	4b02      	ldr	r3, [pc, #8]	; (8011d94 <malloc+0xc>)
 8011d8a:	4601      	mov	r1, r0
 8011d8c:	6818      	ldr	r0, [r3, #0]
 8011d8e:	f000 b871 	b.w	8011e74 <_malloc_r>
 8011d92:	bf00      	nop
 8011d94:	20000070 	.word	0x20000070

08011d98 <free>:
 8011d98:	4b02      	ldr	r3, [pc, #8]	; (8011da4 <free+0xc>)
 8011d9a:	4601      	mov	r1, r0
 8011d9c:	6818      	ldr	r0, [r3, #0]
 8011d9e:	f000 b819 	b.w	8011dd4 <_free_r>
 8011da2:	bf00      	nop
 8011da4:	20000070 	.word	0x20000070

08011da8 <memcpy>:
 8011da8:	440a      	add	r2, r1
 8011daa:	4291      	cmp	r1, r2
 8011dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8011db0:	d100      	bne.n	8011db4 <memcpy+0xc>
 8011db2:	4770      	bx	lr
 8011db4:	b510      	push	{r4, lr}
 8011db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011dbe:	4291      	cmp	r1, r2
 8011dc0:	d1f9      	bne.n	8011db6 <memcpy+0xe>
 8011dc2:	bd10      	pop	{r4, pc}

08011dc4 <memset>:
 8011dc4:	4402      	add	r2, r0
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	4293      	cmp	r3, r2
 8011dca:	d100      	bne.n	8011dce <memset+0xa>
 8011dcc:	4770      	bx	lr
 8011dce:	f803 1b01 	strb.w	r1, [r3], #1
 8011dd2:	e7f9      	b.n	8011dc8 <memset+0x4>

08011dd4 <_free_r>:
 8011dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011dd6:	2900      	cmp	r1, #0
 8011dd8:	d048      	beq.n	8011e6c <_free_r+0x98>
 8011dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dde:	9001      	str	r0, [sp, #4]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	f1a1 0404 	sub.w	r4, r1, #4
 8011de6:	bfb8      	it	lt
 8011de8:	18e4      	addlt	r4, r4, r3
 8011dea:	f000 f8f7 	bl	8011fdc <__malloc_lock>
 8011dee:	4a20      	ldr	r2, [pc, #128]	; (8011e70 <_free_r+0x9c>)
 8011df0:	9801      	ldr	r0, [sp, #4]
 8011df2:	6813      	ldr	r3, [r2, #0]
 8011df4:	4615      	mov	r5, r2
 8011df6:	b933      	cbnz	r3, 8011e06 <_free_r+0x32>
 8011df8:	6063      	str	r3, [r4, #4]
 8011dfa:	6014      	str	r4, [r2, #0]
 8011dfc:	b003      	add	sp, #12
 8011dfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e02:	f000 b8f1 	b.w	8011fe8 <__malloc_unlock>
 8011e06:	42a3      	cmp	r3, r4
 8011e08:	d90b      	bls.n	8011e22 <_free_r+0x4e>
 8011e0a:	6821      	ldr	r1, [r4, #0]
 8011e0c:	1862      	adds	r2, r4, r1
 8011e0e:	4293      	cmp	r3, r2
 8011e10:	bf04      	itt	eq
 8011e12:	681a      	ldreq	r2, [r3, #0]
 8011e14:	685b      	ldreq	r3, [r3, #4]
 8011e16:	6063      	str	r3, [r4, #4]
 8011e18:	bf04      	itt	eq
 8011e1a:	1852      	addeq	r2, r2, r1
 8011e1c:	6022      	streq	r2, [r4, #0]
 8011e1e:	602c      	str	r4, [r5, #0]
 8011e20:	e7ec      	b.n	8011dfc <_free_r+0x28>
 8011e22:	461a      	mov	r2, r3
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	b10b      	cbz	r3, 8011e2c <_free_r+0x58>
 8011e28:	42a3      	cmp	r3, r4
 8011e2a:	d9fa      	bls.n	8011e22 <_free_r+0x4e>
 8011e2c:	6811      	ldr	r1, [r2, #0]
 8011e2e:	1855      	adds	r5, r2, r1
 8011e30:	42a5      	cmp	r5, r4
 8011e32:	d10b      	bne.n	8011e4c <_free_r+0x78>
 8011e34:	6824      	ldr	r4, [r4, #0]
 8011e36:	4421      	add	r1, r4
 8011e38:	1854      	adds	r4, r2, r1
 8011e3a:	42a3      	cmp	r3, r4
 8011e3c:	6011      	str	r1, [r2, #0]
 8011e3e:	d1dd      	bne.n	8011dfc <_free_r+0x28>
 8011e40:	681c      	ldr	r4, [r3, #0]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	6053      	str	r3, [r2, #4]
 8011e46:	4421      	add	r1, r4
 8011e48:	6011      	str	r1, [r2, #0]
 8011e4a:	e7d7      	b.n	8011dfc <_free_r+0x28>
 8011e4c:	d902      	bls.n	8011e54 <_free_r+0x80>
 8011e4e:	230c      	movs	r3, #12
 8011e50:	6003      	str	r3, [r0, #0]
 8011e52:	e7d3      	b.n	8011dfc <_free_r+0x28>
 8011e54:	6825      	ldr	r5, [r4, #0]
 8011e56:	1961      	adds	r1, r4, r5
 8011e58:	428b      	cmp	r3, r1
 8011e5a:	bf04      	itt	eq
 8011e5c:	6819      	ldreq	r1, [r3, #0]
 8011e5e:	685b      	ldreq	r3, [r3, #4]
 8011e60:	6063      	str	r3, [r4, #4]
 8011e62:	bf04      	itt	eq
 8011e64:	1949      	addeq	r1, r1, r5
 8011e66:	6021      	streq	r1, [r4, #0]
 8011e68:	6054      	str	r4, [r2, #4]
 8011e6a:	e7c7      	b.n	8011dfc <_free_r+0x28>
 8011e6c:	b003      	add	sp, #12
 8011e6e:	bd30      	pop	{r4, r5, pc}
 8011e70:	20010668 	.word	0x20010668

08011e74 <_malloc_r>:
 8011e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e76:	1ccd      	adds	r5, r1, #3
 8011e78:	f025 0503 	bic.w	r5, r5, #3
 8011e7c:	3508      	adds	r5, #8
 8011e7e:	2d0c      	cmp	r5, #12
 8011e80:	bf38      	it	cc
 8011e82:	250c      	movcc	r5, #12
 8011e84:	2d00      	cmp	r5, #0
 8011e86:	4606      	mov	r6, r0
 8011e88:	db01      	blt.n	8011e8e <_malloc_r+0x1a>
 8011e8a:	42a9      	cmp	r1, r5
 8011e8c:	d903      	bls.n	8011e96 <_malloc_r+0x22>
 8011e8e:	230c      	movs	r3, #12
 8011e90:	6033      	str	r3, [r6, #0]
 8011e92:	2000      	movs	r0, #0
 8011e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e96:	f000 f8a1 	bl	8011fdc <__malloc_lock>
 8011e9a:	4921      	ldr	r1, [pc, #132]	; (8011f20 <_malloc_r+0xac>)
 8011e9c:	680a      	ldr	r2, [r1, #0]
 8011e9e:	4614      	mov	r4, r2
 8011ea0:	b99c      	cbnz	r4, 8011eca <_malloc_r+0x56>
 8011ea2:	4f20      	ldr	r7, [pc, #128]	; (8011f24 <_malloc_r+0xb0>)
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	b923      	cbnz	r3, 8011eb2 <_malloc_r+0x3e>
 8011ea8:	4621      	mov	r1, r4
 8011eaa:	4630      	mov	r0, r6
 8011eac:	f000 f83c 	bl	8011f28 <_sbrk_r>
 8011eb0:	6038      	str	r0, [r7, #0]
 8011eb2:	4629      	mov	r1, r5
 8011eb4:	4630      	mov	r0, r6
 8011eb6:	f000 f837 	bl	8011f28 <_sbrk_r>
 8011eba:	1c43      	adds	r3, r0, #1
 8011ebc:	d123      	bne.n	8011f06 <_malloc_r+0x92>
 8011ebe:	230c      	movs	r3, #12
 8011ec0:	6033      	str	r3, [r6, #0]
 8011ec2:	4630      	mov	r0, r6
 8011ec4:	f000 f890 	bl	8011fe8 <__malloc_unlock>
 8011ec8:	e7e3      	b.n	8011e92 <_malloc_r+0x1e>
 8011eca:	6823      	ldr	r3, [r4, #0]
 8011ecc:	1b5b      	subs	r3, r3, r5
 8011ece:	d417      	bmi.n	8011f00 <_malloc_r+0x8c>
 8011ed0:	2b0b      	cmp	r3, #11
 8011ed2:	d903      	bls.n	8011edc <_malloc_r+0x68>
 8011ed4:	6023      	str	r3, [r4, #0]
 8011ed6:	441c      	add	r4, r3
 8011ed8:	6025      	str	r5, [r4, #0]
 8011eda:	e004      	b.n	8011ee6 <_malloc_r+0x72>
 8011edc:	6863      	ldr	r3, [r4, #4]
 8011ede:	42a2      	cmp	r2, r4
 8011ee0:	bf0c      	ite	eq
 8011ee2:	600b      	streq	r3, [r1, #0]
 8011ee4:	6053      	strne	r3, [r2, #4]
 8011ee6:	4630      	mov	r0, r6
 8011ee8:	f000 f87e 	bl	8011fe8 <__malloc_unlock>
 8011eec:	f104 000b 	add.w	r0, r4, #11
 8011ef0:	1d23      	adds	r3, r4, #4
 8011ef2:	f020 0007 	bic.w	r0, r0, #7
 8011ef6:	1ac2      	subs	r2, r0, r3
 8011ef8:	d0cc      	beq.n	8011e94 <_malloc_r+0x20>
 8011efa:	1a1b      	subs	r3, r3, r0
 8011efc:	50a3      	str	r3, [r4, r2]
 8011efe:	e7c9      	b.n	8011e94 <_malloc_r+0x20>
 8011f00:	4622      	mov	r2, r4
 8011f02:	6864      	ldr	r4, [r4, #4]
 8011f04:	e7cc      	b.n	8011ea0 <_malloc_r+0x2c>
 8011f06:	1cc4      	adds	r4, r0, #3
 8011f08:	f024 0403 	bic.w	r4, r4, #3
 8011f0c:	42a0      	cmp	r0, r4
 8011f0e:	d0e3      	beq.n	8011ed8 <_malloc_r+0x64>
 8011f10:	1a21      	subs	r1, r4, r0
 8011f12:	4630      	mov	r0, r6
 8011f14:	f000 f808 	bl	8011f28 <_sbrk_r>
 8011f18:	3001      	adds	r0, #1
 8011f1a:	d1dd      	bne.n	8011ed8 <_malloc_r+0x64>
 8011f1c:	e7cf      	b.n	8011ebe <_malloc_r+0x4a>
 8011f1e:	bf00      	nop
 8011f20:	20010668 	.word	0x20010668
 8011f24:	2001066c 	.word	0x2001066c

08011f28 <_sbrk_r>:
 8011f28:	b538      	push	{r3, r4, r5, lr}
 8011f2a:	4d06      	ldr	r5, [pc, #24]	; (8011f44 <_sbrk_r+0x1c>)
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	4604      	mov	r4, r0
 8011f30:	4608      	mov	r0, r1
 8011f32:	602b      	str	r3, [r5, #0]
 8011f34:	f7f0 fc46 	bl	80027c4 <_sbrk>
 8011f38:	1c43      	adds	r3, r0, #1
 8011f3a:	d102      	bne.n	8011f42 <_sbrk_r+0x1a>
 8011f3c:	682b      	ldr	r3, [r5, #0]
 8011f3e:	b103      	cbz	r3, 8011f42 <_sbrk_r+0x1a>
 8011f40:	6023      	str	r3, [r4, #0]
 8011f42:	bd38      	pop	{r3, r4, r5, pc}
 8011f44:	20014a9c 	.word	0x20014a9c

08011f48 <siprintf>:
 8011f48:	b40e      	push	{r1, r2, r3}
 8011f4a:	b500      	push	{lr}
 8011f4c:	b09c      	sub	sp, #112	; 0x70
 8011f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8011f50:	9002      	str	r0, [sp, #8]
 8011f52:	9006      	str	r0, [sp, #24]
 8011f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011f58:	4809      	ldr	r0, [pc, #36]	; (8011f80 <siprintf+0x38>)
 8011f5a:	9107      	str	r1, [sp, #28]
 8011f5c:	9104      	str	r1, [sp, #16]
 8011f5e:	4909      	ldr	r1, [pc, #36]	; (8011f84 <siprintf+0x3c>)
 8011f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f64:	9105      	str	r1, [sp, #20]
 8011f66:	6800      	ldr	r0, [r0, #0]
 8011f68:	9301      	str	r3, [sp, #4]
 8011f6a:	a902      	add	r1, sp, #8
 8011f6c:	f000 f89e 	bl	80120ac <_svfiprintf_r>
 8011f70:	9b02      	ldr	r3, [sp, #8]
 8011f72:	2200      	movs	r2, #0
 8011f74:	701a      	strb	r2, [r3, #0]
 8011f76:	b01c      	add	sp, #112	; 0x70
 8011f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f7c:	b003      	add	sp, #12
 8011f7e:	4770      	bx	lr
 8011f80:	20000070 	.word	0x20000070
 8011f84:	ffff0208 	.word	0xffff0208

08011f88 <strncpy>:
 8011f88:	b510      	push	{r4, lr}
 8011f8a:	3901      	subs	r1, #1
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	b132      	cbz	r2, 8011f9e <strncpy+0x16>
 8011f90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011f94:	f803 4b01 	strb.w	r4, [r3], #1
 8011f98:	3a01      	subs	r2, #1
 8011f9a:	2c00      	cmp	r4, #0
 8011f9c:	d1f7      	bne.n	8011f8e <strncpy+0x6>
 8011f9e:	441a      	add	r2, r3
 8011fa0:	2100      	movs	r1, #0
 8011fa2:	4293      	cmp	r3, r2
 8011fa4:	d100      	bne.n	8011fa8 <strncpy+0x20>
 8011fa6:	bd10      	pop	{r4, pc}
 8011fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8011fac:	e7f9      	b.n	8011fa2 <strncpy+0x1a>

08011fae <strstr>:
 8011fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fb0:	780c      	ldrb	r4, [r1, #0]
 8011fb2:	b164      	cbz	r4, 8011fce <strstr+0x20>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	781a      	ldrb	r2, [r3, #0]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	1c5e      	adds	r6, r3, #1
 8011fbc:	b90a      	cbnz	r2, 8011fc2 <strstr+0x14>
 8011fbe:	4610      	mov	r0, r2
 8011fc0:	e005      	b.n	8011fce <strstr+0x20>
 8011fc2:	4294      	cmp	r4, r2
 8011fc4:	d108      	bne.n	8011fd8 <strstr+0x2a>
 8011fc6:	460d      	mov	r5, r1
 8011fc8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8011fcc:	b902      	cbnz	r2, 8011fd0 <strstr+0x22>
 8011fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fd0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8011fd4:	4297      	cmp	r7, r2
 8011fd6:	d0f7      	beq.n	8011fc8 <strstr+0x1a>
 8011fd8:	4633      	mov	r3, r6
 8011fda:	e7ec      	b.n	8011fb6 <strstr+0x8>

08011fdc <__malloc_lock>:
 8011fdc:	4801      	ldr	r0, [pc, #4]	; (8011fe4 <__malloc_lock+0x8>)
 8011fde:	f000 baf9 	b.w	80125d4 <__retarget_lock_acquire_recursive>
 8011fe2:	bf00      	nop
 8011fe4:	20014aa4 	.word	0x20014aa4

08011fe8 <__malloc_unlock>:
 8011fe8:	4801      	ldr	r0, [pc, #4]	; (8011ff0 <__malloc_unlock+0x8>)
 8011fea:	f000 baf4 	b.w	80125d6 <__retarget_lock_release_recursive>
 8011fee:	bf00      	nop
 8011ff0:	20014aa4 	.word	0x20014aa4

08011ff4 <__ssputs_r>:
 8011ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ff8:	688e      	ldr	r6, [r1, #8]
 8011ffa:	429e      	cmp	r6, r3
 8011ffc:	4682      	mov	sl, r0
 8011ffe:	460c      	mov	r4, r1
 8012000:	4690      	mov	r8, r2
 8012002:	461f      	mov	r7, r3
 8012004:	d838      	bhi.n	8012078 <__ssputs_r+0x84>
 8012006:	898a      	ldrh	r2, [r1, #12]
 8012008:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801200c:	d032      	beq.n	8012074 <__ssputs_r+0x80>
 801200e:	6825      	ldr	r5, [r4, #0]
 8012010:	6909      	ldr	r1, [r1, #16]
 8012012:	eba5 0901 	sub.w	r9, r5, r1
 8012016:	6965      	ldr	r5, [r4, #20]
 8012018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801201c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012020:	3301      	adds	r3, #1
 8012022:	444b      	add	r3, r9
 8012024:	106d      	asrs	r5, r5, #1
 8012026:	429d      	cmp	r5, r3
 8012028:	bf38      	it	cc
 801202a:	461d      	movcc	r5, r3
 801202c:	0553      	lsls	r3, r2, #21
 801202e:	d531      	bpl.n	8012094 <__ssputs_r+0xa0>
 8012030:	4629      	mov	r1, r5
 8012032:	f7ff ff1f 	bl	8011e74 <_malloc_r>
 8012036:	4606      	mov	r6, r0
 8012038:	b950      	cbnz	r0, 8012050 <__ssputs_r+0x5c>
 801203a:	230c      	movs	r3, #12
 801203c:	f8ca 3000 	str.w	r3, [sl]
 8012040:	89a3      	ldrh	r3, [r4, #12]
 8012042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012046:	81a3      	strh	r3, [r4, #12]
 8012048:	f04f 30ff 	mov.w	r0, #4294967295
 801204c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012050:	6921      	ldr	r1, [r4, #16]
 8012052:	464a      	mov	r2, r9
 8012054:	f7ff fea8 	bl	8011da8 <memcpy>
 8012058:	89a3      	ldrh	r3, [r4, #12]
 801205a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801205e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012062:	81a3      	strh	r3, [r4, #12]
 8012064:	6126      	str	r6, [r4, #16]
 8012066:	6165      	str	r5, [r4, #20]
 8012068:	444e      	add	r6, r9
 801206a:	eba5 0509 	sub.w	r5, r5, r9
 801206e:	6026      	str	r6, [r4, #0]
 8012070:	60a5      	str	r5, [r4, #8]
 8012072:	463e      	mov	r6, r7
 8012074:	42be      	cmp	r6, r7
 8012076:	d900      	bls.n	801207a <__ssputs_r+0x86>
 8012078:	463e      	mov	r6, r7
 801207a:	4632      	mov	r2, r6
 801207c:	6820      	ldr	r0, [r4, #0]
 801207e:	4641      	mov	r1, r8
 8012080:	f000 faaa 	bl	80125d8 <memmove>
 8012084:	68a3      	ldr	r3, [r4, #8]
 8012086:	6822      	ldr	r2, [r4, #0]
 8012088:	1b9b      	subs	r3, r3, r6
 801208a:	4432      	add	r2, r6
 801208c:	60a3      	str	r3, [r4, #8]
 801208e:	6022      	str	r2, [r4, #0]
 8012090:	2000      	movs	r0, #0
 8012092:	e7db      	b.n	801204c <__ssputs_r+0x58>
 8012094:	462a      	mov	r2, r5
 8012096:	f000 fab9 	bl	801260c <_realloc_r>
 801209a:	4606      	mov	r6, r0
 801209c:	2800      	cmp	r0, #0
 801209e:	d1e1      	bne.n	8012064 <__ssputs_r+0x70>
 80120a0:	6921      	ldr	r1, [r4, #16]
 80120a2:	4650      	mov	r0, sl
 80120a4:	f7ff fe96 	bl	8011dd4 <_free_r>
 80120a8:	e7c7      	b.n	801203a <__ssputs_r+0x46>
	...

080120ac <_svfiprintf_r>:
 80120ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b0:	4698      	mov	r8, r3
 80120b2:	898b      	ldrh	r3, [r1, #12]
 80120b4:	061b      	lsls	r3, r3, #24
 80120b6:	b09d      	sub	sp, #116	; 0x74
 80120b8:	4607      	mov	r7, r0
 80120ba:	460d      	mov	r5, r1
 80120bc:	4614      	mov	r4, r2
 80120be:	d50e      	bpl.n	80120de <_svfiprintf_r+0x32>
 80120c0:	690b      	ldr	r3, [r1, #16]
 80120c2:	b963      	cbnz	r3, 80120de <_svfiprintf_r+0x32>
 80120c4:	2140      	movs	r1, #64	; 0x40
 80120c6:	f7ff fed5 	bl	8011e74 <_malloc_r>
 80120ca:	6028      	str	r0, [r5, #0]
 80120cc:	6128      	str	r0, [r5, #16]
 80120ce:	b920      	cbnz	r0, 80120da <_svfiprintf_r+0x2e>
 80120d0:	230c      	movs	r3, #12
 80120d2:	603b      	str	r3, [r7, #0]
 80120d4:	f04f 30ff 	mov.w	r0, #4294967295
 80120d8:	e0d1      	b.n	801227e <_svfiprintf_r+0x1d2>
 80120da:	2340      	movs	r3, #64	; 0x40
 80120dc:	616b      	str	r3, [r5, #20]
 80120de:	2300      	movs	r3, #0
 80120e0:	9309      	str	r3, [sp, #36]	; 0x24
 80120e2:	2320      	movs	r3, #32
 80120e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80120ec:	2330      	movs	r3, #48	; 0x30
 80120ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012298 <_svfiprintf_r+0x1ec>
 80120f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120f6:	f04f 0901 	mov.w	r9, #1
 80120fa:	4623      	mov	r3, r4
 80120fc:	469a      	mov	sl, r3
 80120fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012102:	b10a      	cbz	r2, 8012108 <_svfiprintf_r+0x5c>
 8012104:	2a25      	cmp	r2, #37	; 0x25
 8012106:	d1f9      	bne.n	80120fc <_svfiprintf_r+0x50>
 8012108:	ebba 0b04 	subs.w	fp, sl, r4
 801210c:	d00b      	beq.n	8012126 <_svfiprintf_r+0x7a>
 801210e:	465b      	mov	r3, fp
 8012110:	4622      	mov	r2, r4
 8012112:	4629      	mov	r1, r5
 8012114:	4638      	mov	r0, r7
 8012116:	f7ff ff6d 	bl	8011ff4 <__ssputs_r>
 801211a:	3001      	adds	r0, #1
 801211c:	f000 80aa 	beq.w	8012274 <_svfiprintf_r+0x1c8>
 8012120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012122:	445a      	add	r2, fp
 8012124:	9209      	str	r2, [sp, #36]	; 0x24
 8012126:	f89a 3000 	ldrb.w	r3, [sl]
 801212a:	2b00      	cmp	r3, #0
 801212c:	f000 80a2 	beq.w	8012274 <_svfiprintf_r+0x1c8>
 8012130:	2300      	movs	r3, #0
 8012132:	f04f 32ff 	mov.w	r2, #4294967295
 8012136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801213a:	f10a 0a01 	add.w	sl, sl, #1
 801213e:	9304      	str	r3, [sp, #16]
 8012140:	9307      	str	r3, [sp, #28]
 8012142:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012146:	931a      	str	r3, [sp, #104]	; 0x68
 8012148:	4654      	mov	r4, sl
 801214a:	2205      	movs	r2, #5
 801214c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012150:	4851      	ldr	r0, [pc, #324]	; (8012298 <_svfiprintf_r+0x1ec>)
 8012152:	f7ee f845 	bl	80001e0 <memchr>
 8012156:	9a04      	ldr	r2, [sp, #16]
 8012158:	b9d8      	cbnz	r0, 8012192 <_svfiprintf_r+0xe6>
 801215a:	06d0      	lsls	r0, r2, #27
 801215c:	bf44      	itt	mi
 801215e:	2320      	movmi	r3, #32
 8012160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012164:	0711      	lsls	r1, r2, #28
 8012166:	bf44      	itt	mi
 8012168:	232b      	movmi	r3, #43	; 0x2b
 801216a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801216e:	f89a 3000 	ldrb.w	r3, [sl]
 8012172:	2b2a      	cmp	r3, #42	; 0x2a
 8012174:	d015      	beq.n	80121a2 <_svfiprintf_r+0xf6>
 8012176:	9a07      	ldr	r2, [sp, #28]
 8012178:	4654      	mov	r4, sl
 801217a:	2000      	movs	r0, #0
 801217c:	f04f 0c0a 	mov.w	ip, #10
 8012180:	4621      	mov	r1, r4
 8012182:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012186:	3b30      	subs	r3, #48	; 0x30
 8012188:	2b09      	cmp	r3, #9
 801218a:	d94e      	bls.n	801222a <_svfiprintf_r+0x17e>
 801218c:	b1b0      	cbz	r0, 80121bc <_svfiprintf_r+0x110>
 801218e:	9207      	str	r2, [sp, #28]
 8012190:	e014      	b.n	80121bc <_svfiprintf_r+0x110>
 8012192:	eba0 0308 	sub.w	r3, r0, r8
 8012196:	fa09 f303 	lsl.w	r3, r9, r3
 801219a:	4313      	orrs	r3, r2
 801219c:	9304      	str	r3, [sp, #16]
 801219e:	46a2      	mov	sl, r4
 80121a0:	e7d2      	b.n	8012148 <_svfiprintf_r+0x9c>
 80121a2:	9b03      	ldr	r3, [sp, #12]
 80121a4:	1d19      	adds	r1, r3, #4
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	9103      	str	r1, [sp, #12]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	bfbb      	ittet	lt
 80121ae:	425b      	neglt	r3, r3
 80121b0:	f042 0202 	orrlt.w	r2, r2, #2
 80121b4:	9307      	strge	r3, [sp, #28]
 80121b6:	9307      	strlt	r3, [sp, #28]
 80121b8:	bfb8      	it	lt
 80121ba:	9204      	strlt	r2, [sp, #16]
 80121bc:	7823      	ldrb	r3, [r4, #0]
 80121be:	2b2e      	cmp	r3, #46	; 0x2e
 80121c0:	d10c      	bne.n	80121dc <_svfiprintf_r+0x130>
 80121c2:	7863      	ldrb	r3, [r4, #1]
 80121c4:	2b2a      	cmp	r3, #42	; 0x2a
 80121c6:	d135      	bne.n	8012234 <_svfiprintf_r+0x188>
 80121c8:	9b03      	ldr	r3, [sp, #12]
 80121ca:	1d1a      	adds	r2, r3, #4
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	9203      	str	r2, [sp, #12]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	bfb8      	it	lt
 80121d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80121d8:	3402      	adds	r4, #2
 80121da:	9305      	str	r3, [sp, #20]
 80121dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80122a8 <_svfiprintf_r+0x1fc>
 80121e0:	7821      	ldrb	r1, [r4, #0]
 80121e2:	2203      	movs	r2, #3
 80121e4:	4650      	mov	r0, sl
 80121e6:	f7ed fffb 	bl	80001e0 <memchr>
 80121ea:	b140      	cbz	r0, 80121fe <_svfiprintf_r+0x152>
 80121ec:	2340      	movs	r3, #64	; 0x40
 80121ee:	eba0 000a 	sub.w	r0, r0, sl
 80121f2:	fa03 f000 	lsl.w	r0, r3, r0
 80121f6:	9b04      	ldr	r3, [sp, #16]
 80121f8:	4303      	orrs	r3, r0
 80121fa:	3401      	adds	r4, #1
 80121fc:	9304      	str	r3, [sp, #16]
 80121fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012202:	4826      	ldr	r0, [pc, #152]	; (801229c <_svfiprintf_r+0x1f0>)
 8012204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012208:	2206      	movs	r2, #6
 801220a:	f7ed ffe9 	bl	80001e0 <memchr>
 801220e:	2800      	cmp	r0, #0
 8012210:	d038      	beq.n	8012284 <_svfiprintf_r+0x1d8>
 8012212:	4b23      	ldr	r3, [pc, #140]	; (80122a0 <_svfiprintf_r+0x1f4>)
 8012214:	bb1b      	cbnz	r3, 801225e <_svfiprintf_r+0x1b2>
 8012216:	9b03      	ldr	r3, [sp, #12]
 8012218:	3307      	adds	r3, #7
 801221a:	f023 0307 	bic.w	r3, r3, #7
 801221e:	3308      	adds	r3, #8
 8012220:	9303      	str	r3, [sp, #12]
 8012222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012224:	4433      	add	r3, r6
 8012226:	9309      	str	r3, [sp, #36]	; 0x24
 8012228:	e767      	b.n	80120fa <_svfiprintf_r+0x4e>
 801222a:	fb0c 3202 	mla	r2, ip, r2, r3
 801222e:	460c      	mov	r4, r1
 8012230:	2001      	movs	r0, #1
 8012232:	e7a5      	b.n	8012180 <_svfiprintf_r+0xd4>
 8012234:	2300      	movs	r3, #0
 8012236:	3401      	adds	r4, #1
 8012238:	9305      	str	r3, [sp, #20]
 801223a:	4619      	mov	r1, r3
 801223c:	f04f 0c0a 	mov.w	ip, #10
 8012240:	4620      	mov	r0, r4
 8012242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012246:	3a30      	subs	r2, #48	; 0x30
 8012248:	2a09      	cmp	r2, #9
 801224a:	d903      	bls.n	8012254 <_svfiprintf_r+0x1a8>
 801224c:	2b00      	cmp	r3, #0
 801224e:	d0c5      	beq.n	80121dc <_svfiprintf_r+0x130>
 8012250:	9105      	str	r1, [sp, #20]
 8012252:	e7c3      	b.n	80121dc <_svfiprintf_r+0x130>
 8012254:	fb0c 2101 	mla	r1, ip, r1, r2
 8012258:	4604      	mov	r4, r0
 801225a:	2301      	movs	r3, #1
 801225c:	e7f0      	b.n	8012240 <_svfiprintf_r+0x194>
 801225e:	ab03      	add	r3, sp, #12
 8012260:	9300      	str	r3, [sp, #0]
 8012262:	462a      	mov	r2, r5
 8012264:	4b0f      	ldr	r3, [pc, #60]	; (80122a4 <_svfiprintf_r+0x1f8>)
 8012266:	a904      	add	r1, sp, #16
 8012268:	4638      	mov	r0, r7
 801226a:	f3af 8000 	nop.w
 801226e:	1c42      	adds	r2, r0, #1
 8012270:	4606      	mov	r6, r0
 8012272:	d1d6      	bne.n	8012222 <_svfiprintf_r+0x176>
 8012274:	89ab      	ldrh	r3, [r5, #12]
 8012276:	065b      	lsls	r3, r3, #25
 8012278:	f53f af2c 	bmi.w	80120d4 <_svfiprintf_r+0x28>
 801227c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801227e:	b01d      	add	sp, #116	; 0x74
 8012280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012284:	ab03      	add	r3, sp, #12
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	462a      	mov	r2, r5
 801228a:	4b06      	ldr	r3, [pc, #24]	; (80122a4 <_svfiprintf_r+0x1f8>)
 801228c:	a904      	add	r1, sp, #16
 801228e:	4638      	mov	r0, r7
 8012290:	f000 f87a 	bl	8012388 <_printf_i>
 8012294:	e7eb      	b.n	801226e <_svfiprintf_r+0x1c2>
 8012296:	bf00      	nop
 8012298:	08012be0 	.word	0x08012be0
 801229c:	08012bea 	.word	0x08012bea
 80122a0:	00000000 	.word	0x00000000
 80122a4:	08011ff5 	.word	0x08011ff5
 80122a8:	08012be6 	.word	0x08012be6

080122ac <_printf_common>:
 80122ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122b0:	4616      	mov	r6, r2
 80122b2:	4699      	mov	r9, r3
 80122b4:	688a      	ldr	r2, [r1, #8]
 80122b6:	690b      	ldr	r3, [r1, #16]
 80122b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80122bc:	4293      	cmp	r3, r2
 80122be:	bfb8      	it	lt
 80122c0:	4613      	movlt	r3, r2
 80122c2:	6033      	str	r3, [r6, #0]
 80122c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80122c8:	4607      	mov	r7, r0
 80122ca:	460c      	mov	r4, r1
 80122cc:	b10a      	cbz	r2, 80122d2 <_printf_common+0x26>
 80122ce:	3301      	adds	r3, #1
 80122d0:	6033      	str	r3, [r6, #0]
 80122d2:	6823      	ldr	r3, [r4, #0]
 80122d4:	0699      	lsls	r1, r3, #26
 80122d6:	bf42      	ittt	mi
 80122d8:	6833      	ldrmi	r3, [r6, #0]
 80122da:	3302      	addmi	r3, #2
 80122dc:	6033      	strmi	r3, [r6, #0]
 80122de:	6825      	ldr	r5, [r4, #0]
 80122e0:	f015 0506 	ands.w	r5, r5, #6
 80122e4:	d106      	bne.n	80122f4 <_printf_common+0x48>
 80122e6:	f104 0a19 	add.w	sl, r4, #25
 80122ea:	68e3      	ldr	r3, [r4, #12]
 80122ec:	6832      	ldr	r2, [r6, #0]
 80122ee:	1a9b      	subs	r3, r3, r2
 80122f0:	42ab      	cmp	r3, r5
 80122f2:	dc26      	bgt.n	8012342 <_printf_common+0x96>
 80122f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80122f8:	1e13      	subs	r3, r2, #0
 80122fa:	6822      	ldr	r2, [r4, #0]
 80122fc:	bf18      	it	ne
 80122fe:	2301      	movne	r3, #1
 8012300:	0692      	lsls	r2, r2, #26
 8012302:	d42b      	bmi.n	801235c <_printf_common+0xb0>
 8012304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012308:	4649      	mov	r1, r9
 801230a:	4638      	mov	r0, r7
 801230c:	47c0      	blx	r8
 801230e:	3001      	adds	r0, #1
 8012310:	d01e      	beq.n	8012350 <_printf_common+0xa4>
 8012312:	6823      	ldr	r3, [r4, #0]
 8012314:	68e5      	ldr	r5, [r4, #12]
 8012316:	6832      	ldr	r2, [r6, #0]
 8012318:	f003 0306 	and.w	r3, r3, #6
 801231c:	2b04      	cmp	r3, #4
 801231e:	bf08      	it	eq
 8012320:	1aad      	subeq	r5, r5, r2
 8012322:	68a3      	ldr	r3, [r4, #8]
 8012324:	6922      	ldr	r2, [r4, #16]
 8012326:	bf0c      	ite	eq
 8012328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801232c:	2500      	movne	r5, #0
 801232e:	4293      	cmp	r3, r2
 8012330:	bfc4      	itt	gt
 8012332:	1a9b      	subgt	r3, r3, r2
 8012334:	18ed      	addgt	r5, r5, r3
 8012336:	2600      	movs	r6, #0
 8012338:	341a      	adds	r4, #26
 801233a:	42b5      	cmp	r5, r6
 801233c:	d11a      	bne.n	8012374 <_printf_common+0xc8>
 801233e:	2000      	movs	r0, #0
 8012340:	e008      	b.n	8012354 <_printf_common+0xa8>
 8012342:	2301      	movs	r3, #1
 8012344:	4652      	mov	r2, sl
 8012346:	4649      	mov	r1, r9
 8012348:	4638      	mov	r0, r7
 801234a:	47c0      	blx	r8
 801234c:	3001      	adds	r0, #1
 801234e:	d103      	bne.n	8012358 <_printf_common+0xac>
 8012350:	f04f 30ff 	mov.w	r0, #4294967295
 8012354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012358:	3501      	adds	r5, #1
 801235a:	e7c6      	b.n	80122ea <_printf_common+0x3e>
 801235c:	18e1      	adds	r1, r4, r3
 801235e:	1c5a      	adds	r2, r3, #1
 8012360:	2030      	movs	r0, #48	; 0x30
 8012362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012366:	4422      	add	r2, r4
 8012368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801236c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012370:	3302      	adds	r3, #2
 8012372:	e7c7      	b.n	8012304 <_printf_common+0x58>
 8012374:	2301      	movs	r3, #1
 8012376:	4622      	mov	r2, r4
 8012378:	4649      	mov	r1, r9
 801237a:	4638      	mov	r0, r7
 801237c:	47c0      	blx	r8
 801237e:	3001      	adds	r0, #1
 8012380:	d0e6      	beq.n	8012350 <_printf_common+0xa4>
 8012382:	3601      	adds	r6, #1
 8012384:	e7d9      	b.n	801233a <_printf_common+0x8e>
	...

08012388 <_printf_i>:
 8012388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801238c:	460c      	mov	r4, r1
 801238e:	4691      	mov	r9, r2
 8012390:	7e27      	ldrb	r7, [r4, #24]
 8012392:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012394:	2f78      	cmp	r7, #120	; 0x78
 8012396:	4680      	mov	r8, r0
 8012398:	469a      	mov	sl, r3
 801239a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801239e:	d807      	bhi.n	80123b0 <_printf_i+0x28>
 80123a0:	2f62      	cmp	r7, #98	; 0x62
 80123a2:	d80a      	bhi.n	80123ba <_printf_i+0x32>
 80123a4:	2f00      	cmp	r7, #0
 80123a6:	f000 80d8 	beq.w	801255a <_printf_i+0x1d2>
 80123aa:	2f58      	cmp	r7, #88	; 0x58
 80123ac:	f000 80a3 	beq.w	80124f6 <_printf_i+0x16e>
 80123b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80123b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80123b8:	e03a      	b.n	8012430 <_printf_i+0xa8>
 80123ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80123be:	2b15      	cmp	r3, #21
 80123c0:	d8f6      	bhi.n	80123b0 <_printf_i+0x28>
 80123c2:	a001      	add	r0, pc, #4	; (adr r0, 80123c8 <_printf_i+0x40>)
 80123c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80123c8:	08012421 	.word	0x08012421
 80123cc:	08012435 	.word	0x08012435
 80123d0:	080123b1 	.word	0x080123b1
 80123d4:	080123b1 	.word	0x080123b1
 80123d8:	080123b1 	.word	0x080123b1
 80123dc:	080123b1 	.word	0x080123b1
 80123e0:	08012435 	.word	0x08012435
 80123e4:	080123b1 	.word	0x080123b1
 80123e8:	080123b1 	.word	0x080123b1
 80123ec:	080123b1 	.word	0x080123b1
 80123f0:	080123b1 	.word	0x080123b1
 80123f4:	08012541 	.word	0x08012541
 80123f8:	08012465 	.word	0x08012465
 80123fc:	08012523 	.word	0x08012523
 8012400:	080123b1 	.word	0x080123b1
 8012404:	080123b1 	.word	0x080123b1
 8012408:	08012563 	.word	0x08012563
 801240c:	080123b1 	.word	0x080123b1
 8012410:	08012465 	.word	0x08012465
 8012414:	080123b1 	.word	0x080123b1
 8012418:	080123b1 	.word	0x080123b1
 801241c:	0801252b 	.word	0x0801252b
 8012420:	680b      	ldr	r3, [r1, #0]
 8012422:	1d1a      	adds	r2, r3, #4
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	600a      	str	r2, [r1, #0]
 8012428:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801242c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012430:	2301      	movs	r3, #1
 8012432:	e0a3      	b.n	801257c <_printf_i+0x1f4>
 8012434:	6825      	ldr	r5, [r4, #0]
 8012436:	6808      	ldr	r0, [r1, #0]
 8012438:	062e      	lsls	r6, r5, #24
 801243a:	f100 0304 	add.w	r3, r0, #4
 801243e:	d50a      	bpl.n	8012456 <_printf_i+0xce>
 8012440:	6805      	ldr	r5, [r0, #0]
 8012442:	600b      	str	r3, [r1, #0]
 8012444:	2d00      	cmp	r5, #0
 8012446:	da03      	bge.n	8012450 <_printf_i+0xc8>
 8012448:	232d      	movs	r3, #45	; 0x2d
 801244a:	426d      	negs	r5, r5
 801244c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012450:	485e      	ldr	r0, [pc, #376]	; (80125cc <_printf_i+0x244>)
 8012452:	230a      	movs	r3, #10
 8012454:	e019      	b.n	801248a <_printf_i+0x102>
 8012456:	f015 0f40 	tst.w	r5, #64	; 0x40
 801245a:	6805      	ldr	r5, [r0, #0]
 801245c:	600b      	str	r3, [r1, #0]
 801245e:	bf18      	it	ne
 8012460:	b22d      	sxthne	r5, r5
 8012462:	e7ef      	b.n	8012444 <_printf_i+0xbc>
 8012464:	680b      	ldr	r3, [r1, #0]
 8012466:	6825      	ldr	r5, [r4, #0]
 8012468:	1d18      	adds	r0, r3, #4
 801246a:	6008      	str	r0, [r1, #0]
 801246c:	0628      	lsls	r0, r5, #24
 801246e:	d501      	bpl.n	8012474 <_printf_i+0xec>
 8012470:	681d      	ldr	r5, [r3, #0]
 8012472:	e002      	b.n	801247a <_printf_i+0xf2>
 8012474:	0669      	lsls	r1, r5, #25
 8012476:	d5fb      	bpl.n	8012470 <_printf_i+0xe8>
 8012478:	881d      	ldrh	r5, [r3, #0]
 801247a:	4854      	ldr	r0, [pc, #336]	; (80125cc <_printf_i+0x244>)
 801247c:	2f6f      	cmp	r7, #111	; 0x6f
 801247e:	bf0c      	ite	eq
 8012480:	2308      	moveq	r3, #8
 8012482:	230a      	movne	r3, #10
 8012484:	2100      	movs	r1, #0
 8012486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801248a:	6866      	ldr	r6, [r4, #4]
 801248c:	60a6      	str	r6, [r4, #8]
 801248e:	2e00      	cmp	r6, #0
 8012490:	bfa2      	ittt	ge
 8012492:	6821      	ldrge	r1, [r4, #0]
 8012494:	f021 0104 	bicge.w	r1, r1, #4
 8012498:	6021      	strge	r1, [r4, #0]
 801249a:	b90d      	cbnz	r5, 80124a0 <_printf_i+0x118>
 801249c:	2e00      	cmp	r6, #0
 801249e:	d04d      	beq.n	801253c <_printf_i+0x1b4>
 80124a0:	4616      	mov	r6, r2
 80124a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80124a6:	fb03 5711 	mls	r7, r3, r1, r5
 80124aa:	5dc7      	ldrb	r7, [r0, r7]
 80124ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80124b0:	462f      	mov	r7, r5
 80124b2:	42bb      	cmp	r3, r7
 80124b4:	460d      	mov	r5, r1
 80124b6:	d9f4      	bls.n	80124a2 <_printf_i+0x11a>
 80124b8:	2b08      	cmp	r3, #8
 80124ba:	d10b      	bne.n	80124d4 <_printf_i+0x14c>
 80124bc:	6823      	ldr	r3, [r4, #0]
 80124be:	07df      	lsls	r7, r3, #31
 80124c0:	d508      	bpl.n	80124d4 <_printf_i+0x14c>
 80124c2:	6923      	ldr	r3, [r4, #16]
 80124c4:	6861      	ldr	r1, [r4, #4]
 80124c6:	4299      	cmp	r1, r3
 80124c8:	bfde      	ittt	le
 80124ca:	2330      	movle	r3, #48	; 0x30
 80124cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80124d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80124d4:	1b92      	subs	r2, r2, r6
 80124d6:	6122      	str	r2, [r4, #16]
 80124d8:	f8cd a000 	str.w	sl, [sp]
 80124dc:	464b      	mov	r3, r9
 80124de:	aa03      	add	r2, sp, #12
 80124e0:	4621      	mov	r1, r4
 80124e2:	4640      	mov	r0, r8
 80124e4:	f7ff fee2 	bl	80122ac <_printf_common>
 80124e8:	3001      	adds	r0, #1
 80124ea:	d14c      	bne.n	8012586 <_printf_i+0x1fe>
 80124ec:	f04f 30ff 	mov.w	r0, #4294967295
 80124f0:	b004      	add	sp, #16
 80124f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124f6:	4835      	ldr	r0, [pc, #212]	; (80125cc <_printf_i+0x244>)
 80124f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80124fc:	6823      	ldr	r3, [r4, #0]
 80124fe:	680e      	ldr	r6, [r1, #0]
 8012500:	061f      	lsls	r7, r3, #24
 8012502:	f856 5b04 	ldr.w	r5, [r6], #4
 8012506:	600e      	str	r6, [r1, #0]
 8012508:	d514      	bpl.n	8012534 <_printf_i+0x1ac>
 801250a:	07d9      	lsls	r1, r3, #31
 801250c:	bf44      	itt	mi
 801250e:	f043 0320 	orrmi.w	r3, r3, #32
 8012512:	6023      	strmi	r3, [r4, #0]
 8012514:	b91d      	cbnz	r5, 801251e <_printf_i+0x196>
 8012516:	6823      	ldr	r3, [r4, #0]
 8012518:	f023 0320 	bic.w	r3, r3, #32
 801251c:	6023      	str	r3, [r4, #0]
 801251e:	2310      	movs	r3, #16
 8012520:	e7b0      	b.n	8012484 <_printf_i+0xfc>
 8012522:	6823      	ldr	r3, [r4, #0]
 8012524:	f043 0320 	orr.w	r3, r3, #32
 8012528:	6023      	str	r3, [r4, #0]
 801252a:	2378      	movs	r3, #120	; 0x78
 801252c:	4828      	ldr	r0, [pc, #160]	; (80125d0 <_printf_i+0x248>)
 801252e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012532:	e7e3      	b.n	80124fc <_printf_i+0x174>
 8012534:	065e      	lsls	r6, r3, #25
 8012536:	bf48      	it	mi
 8012538:	b2ad      	uxthmi	r5, r5
 801253a:	e7e6      	b.n	801250a <_printf_i+0x182>
 801253c:	4616      	mov	r6, r2
 801253e:	e7bb      	b.n	80124b8 <_printf_i+0x130>
 8012540:	680b      	ldr	r3, [r1, #0]
 8012542:	6826      	ldr	r6, [r4, #0]
 8012544:	6960      	ldr	r0, [r4, #20]
 8012546:	1d1d      	adds	r5, r3, #4
 8012548:	600d      	str	r5, [r1, #0]
 801254a:	0635      	lsls	r5, r6, #24
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	d501      	bpl.n	8012554 <_printf_i+0x1cc>
 8012550:	6018      	str	r0, [r3, #0]
 8012552:	e002      	b.n	801255a <_printf_i+0x1d2>
 8012554:	0671      	lsls	r1, r6, #25
 8012556:	d5fb      	bpl.n	8012550 <_printf_i+0x1c8>
 8012558:	8018      	strh	r0, [r3, #0]
 801255a:	2300      	movs	r3, #0
 801255c:	6123      	str	r3, [r4, #16]
 801255e:	4616      	mov	r6, r2
 8012560:	e7ba      	b.n	80124d8 <_printf_i+0x150>
 8012562:	680b      	ldr	r3, [r1, #0]
 8012564:	1d1a      	adds	r2, r3, #4
 8012566:	600a      	str	r2, [r1, #0]
 8012568:	681e      	ldr	r6, [r3, #0]
 801256a:	6862      	ldr	r2, [r4, #4]
 801256c:	2100      	movs	r1, #0
 801256e:	4630      	mov	r0, r6
 8012570:	f7ed fe36 	bl	80001e0 <memchr>
 8012574:	b108      	cbz	r0, 801257a <_printf_i+0x1f2>
 8012576:	1b80      	subs	r0, r0, r6
 8012578:	6060      	str	r0, [r4, #4]
 801257a:	6863      	ldr	r3, [r4, #4]
 801257c:	6123      	str	r3, [r4, #16]
 801257e:	2300      	movs	r3, #0
 8012580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012584:	e7a8      	b.n	80124d8 <_printf_i+0x150>
 8012586:	6923      	ldr	r3, [r4, #16]
 8012588:	4632      	mov	r2, r6
 801258a:	4649      	mov	r1, r9
 801258c:	4640      	mov	r0, r8
 801258e:	47d0      	blx	sl
 8012590:	3001      	adds	r0, #1
 8012592:	d0ab      	beq.n	80124ec <_printf_i+0x164>
 8012594:	6823      	ldr	r3, [r4, #0]
 8012596:	079b      	lsls	r3, r3, #30
 8012598:	d413      	bmi.n	80125c2 <_printf_i+0x23a>
 801259a:	68e0      	ldr	r0, [r4, #12]
 801259c:	9b03      	ldr	r3, [sp, #12]
 801259e:	4298      	cmp	r0, r3
 80125a0:	bfb8      	it	lt
 80125a2:	4618      	movlt	r0, r3
 80125a4:	e7a4      	b.n	80124f0 <_printf_i+0x168>
 80125a6:	2301      	movs	r3, #1
 80125a8:	4632      	mov	r2, r6
 80125aa:	4649      	mov	r1, r9
 80125ac:	4640      	mov	r0, r8
 80125ae:	47d0      	blx	sl
 80125b0:	3001      	adds	r0, #1
 80125b2:	d09b      	beq.n	80124ec <_printf_i+0x164>
 80125b4:	3501      	adds	r5, #1
 80125b6:	68e3      	ldr	r3, [r4, #12]
 80125b8:	9903      	ldr	r1, [sp, #12]
 80125ba:	1a5b      	subs	r3, r3, r1
 80125bc:	42ab      	cmp	r3, r5
 80125be:	dcf2      	bgt.n	80125a6 <_printf_i+0x21e>
 80125c0:	e7eb      	b.n	801259a <_printf_i+0x212>
 80125c2:	2500      	movs	r5, #0
 80125c4:	f104 0619 	add.w	r6, r4, #25
 80125c8:	e7f5      	b.n	80125b6 <_printf_i+0x22e>
 80125ca:	bf00      	nop
 80125cc:	08012bf1 	.word	0x08012bf1
 80125d0:	08012c02 	.word	0x08012c02

080125d4 <__retarget_lock_acquire_recursive>:
 80125d4:	4770      	bx	lr

080125d6 <__retarget_lock_release_recursive>:
 80125d6:	4770      	bx	lr

080125d8 <memmove>:
 80125d8:	4288      	cmp	r0, r1
 80125da:	b510      	push	{r4, lr}
 80125dc:	eb01 0402 	add.w	r4, r1, r2
 80125e0:	d902      	bls.n	80125e8 <memmove+0x10>
 80125e2:	4284      	cmp	r4, r0
 80125e4:	4623      	mov	r3, r4
 80125e6:	d807      	bhi.n	80125f8 <memmove+0x20>
 80125e8:	1e43      	subs	r3, r0, #1
 80125ea:	42a1      	cmp	r1, r4
 80125ec:	d008      	beq.n	8012600 <memmove+0x28>
 80125ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80125f6:	e7f8      	b.n	80125ea <memmove+0x12>
 80125f8:	4402      	add	r2, r0
 80125fa:	4601      	mov	r1, r0
 80125fc:	428a      	cmp	r2, r1
 80125fe:	d100      	bne.n	8012602 <memmove+0x2a>
 8012600:	bd10      	pop	{r4, pc}
 8012602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801260a:	e7f7      	b.n	80125fc <memmove+0x24>

0801260c <_realloc_r>:
 801260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801260e:	4607      	mov	r7, r0
 8012610:	4614      	mov	r4, r2
 8012612:	460e      	mov	r6, r1
 8012614:	b921      	cbnz	r1, 8012620 <_realloc_r+0x14>
 8012616:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801261a:	4611      	mov	r1, r2
 801261c:	f7ff bc2a 	b.w	8011e74 <_malloc_r>
 8012620:	b922      	cbnz	r2, 801262c <_realloc_r+0x20>
 8012622:	f7ff fbd7 	bl	8011dd4 <_free_r>
 8012626:	4625      	mov	r5, r4
 8012628:	4628      	mov	r0, r5
 801262a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801262c:	f000 f814 	bl	8012658 <_malloc_usable_size_r>
 8012630:	42a0      	cmp	r0, r4
 8012632:	d20f      	bcs.n	8012654 <_realloc_r+0x48>
 8012634:	4621      	mov	r1, r4
 8012636:	4638      	mov	r0, r7
 8012638:	f7ff fc1c 	bl	8011e74 <_malloc_r>
 801263c:	4605      	mov	r5, r0
 801263e:	2800      	cmp	r0, #0
 8012640:	d0f2      	beq.n	8012628 <_realloc_r+0x1c>
 8012642:	4631      	mov	r1, r6
 8012644:	4622      	mov	r2, r4
 8012646:	f7ff fbaf 	bl	8011da8 <memcpy>
 801264a:	4631      	mov	r1, r6
 801264c:	4638      	mov	r0, r7
 801264e:	f7ff fbc1 	bl	8011dd4 <_free_r>
 8012652:	e7e9      	b.n	8012628 <_realloc_r+0x1c>
 8012654:	4635      	mov	r5, r6
 8012656:	e7e7      	b.n	8012628 <_realloc_r+0x1c>

08012658 <_malloc_usable_size_r>:
 8012658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801265c:	1f18      	subs	r0, r3, #4
 801265e:	2b00      	cmp	r3, #0
 8012660:	bfbc      	itt	lt
 8012662:	580b      	ldrlt	r3, [r1, r0]
 8012664:	18c0      	addlt	r0, r0, r3
 8012666:	4770      	bx	lr

08012668 <_init>:
 8012668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801266a:	bf00      	nop
 801266c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801266e:	bc08      	pop	{r3}
 8012670:	469e      	mov	lr, r3
 8012672:	4770      	bx	lr

08012674 <_fini>:
 8012674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012676:	bf00      	nop
 8012678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801267a:	bc08      	pop	{r3}
 801267c:	469e      	mov	lr, r3
 801267e:	4770      	bx	lr
